[{"type":"js","data":"//////////////////////////////////////////////////////////////////////////\n//                                                                      //\n// This is a generated file. You can view the original                  //\n// source in your browser if your browser supports source maps.         //\n// Source maps are supported by all recent versions of Chrome, Safari,  //\n// and Firefox, and by Internet Explorer 11.                            //\n//                                                                      //\n//////////////////////////////////////////////////////////////////////////\n\n\n(function () {\n\n/* Imports */\nvar Meteor = Package.meteor.Meteor;\nvar DDP = Package['ddp-client'].DDP;\nvar Mongo = Package.mongo.Mongo;\n\n/* Package-scope variables */\nvar Tags;\n\n(function(){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                         //\n// packages/patrickleet_tags/packages/patrickleet_tags.js                                                  //\n//                                                                                                         //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                           //\n(function () {                                                                                             // 1\n                                                                                                           // 2\n//////////////////////////////////////////////////////////////////////////////////////////////////////     // 3\n//                                                                                                  //     // 4\n// packages/patrickleet:tags/patrickleet-tags.js                                                    //     // 5\n//                                                                                                  //     // 6\n//////////////////////////////////////////////////////////////////////////////////////////////////////     // 7\n                                                                                                    //     // 8\n/*                                                                                                  // 1   // 9\n  @Inspired by original version by @apendua / apendua@gmail.com                                     // 2   // 10\n  @git: https://github.com/apendua/meteor-tags                                                      // 3   // 11\n                                                                                                    // 4   // 12\n  @Current version - @patrickleet                                                                   // 5   // 13\n  @git: https://github.com/patrickleet/meteor-tags                                                  // 6   // 14\n*/                                                                                                  // 7   // 15\n                                                                                                    // 8   // 16\nTags = {};                                                                                          // 9   // 17\n                                                                                                    // 10  // 18\nMeteor.tags = new Meteor.Collection(\"tags\");                                                        // 11  // 19\n                                                                                                    // 12  // 20\nvar _ = Package.underscore._;                                                                       // 13  // 21\nvar tagsInterface = {};                                                                             // 14  // 22\nvar collections = {};                                                                               // 15  // 23\nvar validators = {};                                                                                // 16  // 24\nvar defaultCollection = null;                                                                       // 17  // 25\nvar hasCollection2 = !!Package['aldeed:collection2'];                                               // 18  // 26\nvar hasSimpleSchema = !!Package['aldeed:simple-schema'];                                            // 19  // 27\n                                                                                                    // 20  // 28\nvar safe = function (userId, collection, selector, action) {                                        // 21  // 29\n  var count = 0;                                                                                    // 22  // 30\n  if (!_.isFunction(action))                                                                        // 23  // 31\n    return;                                                                                         // 24  // 32\n                                                                                                    // 25  // 33\n  collection.find(selector).forEach(function (doc) {                                                // 26  // 34\n    var allow = Meteor.isClient || _.some(validators[collection._name].allow, function (callback) { // 27  // 35\n      return callback.call(undefined, userId, doc);                                                 // 28  // 36\n    });                                                                                             // 29  // 37\n    var deny = !Meteor.isClient && _.some(validators[collection._name].deny, function (callback) {  // 30  // 38\n      return callback.call(undefined, userId, doc);                                                 // 31  // 39\n    });                                                                                             // 32  // 40\n    if (!allow || deny)                                                                             // 33  // 41\n      throw new Meteor.Error(403, 'Action not allowed');                                            // 34  // 42\n    if (action.call(undefined, doc))                                                                // 35  // 43\n      count++;                                                                                      // 36  // 44\n  });                                                                                               // 37  // 45\n  return count;                                                                                     // 38  // 46\n};                                                                                                  // 39  // 47\n                                                                                                    // 40  // 48\n_.extend(Tags, {                                                                                    // 41  // 49\n                                                                                                    // 42  // 50\n  TagsMixin: function (collection) {                                                                // 43  // 51\n                                                                                                    // 44  // 52\n    if (!collection._name)                                                                          // 45  // 53\n      throw new Error('tags mixin may only be used with named collections');                        // 46  // 54\n                                                                                                    // 47  // 55\n    // for further reference                                                                        // 48  // 56\n    collections[collection._name] = collection;                                                     // 49  // 57\n    validators[collection._name] = { allow: [], deny: [] };                                         // 50  // 58\n                                                                                                    // 51  // 59\n    if (!defaultCollection)                                                                         // 52  // 60\n      defaultCollection = collection;                                                               // 53  // 61\n                                                                                                    // 54  // 62\n    // prepare methods object                                                                       // 55  // 63\n    var methods = {}, prefix = '/' + collection._name + '/';                                        // 56  // 64\n                                                                                                    // 57  // 65\n    // server methods                                                                               // 58  // 66\n                                                                                                    // 59  // 67\n    methods[prefix + 'addTag'] = function (selector, tagName, tagGroup) {                           // 60  // 68\n      if (!tagName)                                                                                 // 61  // 69\n        throw new Meteor.Error(400, 'tagName must be non-empty');                                   // 62  // 70\n                                                                                                    // 63  // 71\n      var tagGroupKey = (!!tagGroup) ? tagGroup + \"Tags\" : 'tags';                                  // 64  // 72\n                                                                                                    // 65  // 73\n      var userId = this.userId;                                                                     // 66  // 74\n                                                                                                    // 67  // 75\n      //TODO: optimize this                                                                         // 68  // 76\n      var nRefs = safe(userId, collection, selector, function (doc) {                               // 69  // 77\n        // first add tagName to tag's list of selected documents                                    // 70  // 78\n        if (doc[tagGroupKey] && doc[tagGroupKey].indexOf(tagName) >= 0)                             // 71  // 79\n          // this tag is already there so don't update                                              // 72  // 80\n          return false;                                                                             // 73  // 81\n                                                                                                    // 74  // 82\n        // create an object to add tag to group                                                     // 75  // 83\n        // and also add group to tagGroups                                                          // 76  // 84\n        var updateOptions = {};                                                                     // 77  // 85\n        updateOptions.$addToSet = {};                                                               // 78  // 86\n        updateOptions.$addToSet[tagGroupKey] = tagName;                                             // 79  // 87\n        if (!!tagGroup) {                                                                           // 80  // 88\n          updateOptions.$addToSet.tagGroups = tagGroup;                                             // 81  // 89\n        }                                                                                           // 82  // 90\n                                                                                                    // 83  // 91\n        // if collection2 and attached schema use validate:false and create temp schema             // 84  // 92\n        // so it isn't cleaned                                                                      // 85  // 93\n        if (hasCollection2 && hasSimpleSchema && !!collection.simpleSchema()) {                     // 86  // 94\n          var tempSchema = {};                                                                      // 87  // 95\n          tempSchema[tagGroupKey] = {                                                               // 88  // 96\n            type: [String],                                                                         // 89  // 97\n            optional: true                                                                          // 90  // 98\n          };                                                                                        // 91  // 99\n          tempSchema.tagGroups = {                                                                  // 92  // 100\n            type: [String],                                                                         // 93  // 101\n            optional: true                                                                          // 94  // 102\n          };                                                                                        // 95  // 103\n          var tempSimpleSchema = new SimpleSchema(tempSchema);                                      // 96  // 104\n          collection.attachSchema(tempSimpleSchema);                                                // 97  // 105\n          collection.update({_id:doc._id}, updateOptions, {validate: false});                       // 98  // 106\n        } else {                                                                                    // 99  // 107\n          collection.update({_id:doc._id}, updateOptions);                                          // 100\n        }                                                                                           // 101\n                                                                                                    // 102\n        return true;                                                                                // 103\n      });//safe                                                                                     // 104\n                                                                                                    // 105\n      if (nRefs) {                                                                                  // 106\n        // if at least one tag was added, update tags collection                                    // 107\n        var tag = Meteor.tags.findOne({                                                             // 108\n          name: tagName,                                                                            // 109\n          collection: collection._name,                                                             // 110\n          group: tagGroup                                                                           // 111\n        });                                                                                         // 112\n                                                                                                    // 113\n        if (tag) {                                                                                  // 114\n          Meteor.tags.update({_id:tag._id}, {                                                       // 115\n            $inc : { nRefs     : nRefs },                                                           // 116\n            $set : { changedAt : new Date() },                                                      // 117\n          });                                                                                       // 118\n          return tag._id;                                                                           // 119\n        }                                                                                           // 120\n                                                                                                    // 121\n        return Meteor.tags.insert({                                                                 // 122\n          collection : collection._name,                                                            // 123\n          createdBy  : userId,                                                                      // 124\n          createdAt  : new Date(),                                                                  // 125\n          nRefs      : nRefs,                                                                       // 126\n          name       : tagName,                                                                     // 127\n          group      : tagGroup                                                                     // 128\n        });                                                                                         // 129\n      }// if (nRefs)                                                                                // 130\n    };//addTag                                                                                      // 131\n                                                                                                    // 132\n    methods[prefix + 'removeTag'] = function (selector, tagName, tagGroup) {                        // 133\n      var tagGroupKey = (!!tagGroup) ? tagGroup + \"Tags\" : 'tags';                                  // 134\n      var nRefs = safe(this.userId, collection, selector, function (doc) {                          // 135\n        if (!doc[tagGroupKey] || doc[tagGroupKey].indexOf(tagName) < 0)                             // 136\n          return false;                                                                             // 137\n                                                                                                    // 138\n        var updateOptions = {};                                                                     // 139\n        updateOptions.$pull = {};                                                                   // 140\n        updateOptions.$pull[tagGroupKey] = tagName;                                                 // 141\n        // if there will be no tags in the group, remove the group from tagGroups                   // 142\n        if ( (doc[tagGroupKey].length - 1) === 0) {                                                 // 143\n          updateOptions.$pull.tagGroups = tagGroup;                                                 // 144\n        }                                                                                           // 145\n                                                                                                    // 146\n        // if collection2 use validate:false                                                        // 147\n        if (hasCollection2 && !!collection.simpleSchema()) {                                        // 148\n          collection.update({_id:doc._id}, updateOptions, {validate: false});                       // 149\n        } else {                                                                                    // 150\n          collection.update({_id:doc._id}, updateOptions);                                          // 151\n        }                                                                                           // 152\n                                                                                                    // 153\n        return true;                                                                                // 154\n      });                                                                                           // 155\n      //                                                                                            // 156\n      if (nRefs) {                                                                                  // 157\n        Meteor.tags.update({                                                                        // 158\n          name: tagName,                                                                            // 159\n          collection: collection._name,                                                             // 160\n          group: tagGroup                                                                           // 161\n        }, {                                                                                        // 162\n          $inc : { nRefs : -1 },                                                                    // 163\n          $set : { changedAt : new Date() },                                                        // 164\n        });                                                                                         // 165\n        // Remove any unused tags                                                                   // 166\n        Meteor.tags.remove({nRefs: 0});                                                             // 167\n      }                                                                                             // 168\n    };                                                                                              // 169\n                                                                                                    // 170\n    // client methods                                                                               // 171\n                                                                                                    // 172\n    collection.addTag = function (tagName, tagGroup, selector) {                                    // 173\n      // if tagGroup is an object, then it's probably a selector object                             // 174\n      if (typeof tagGroup === 'object') {                                                           // 175\n        selector = tagGroup;                                                                        // 176\n        tagGroup = undefined;                                                                       // 177\n      }                                                                                             // 178\n      Meteor.call(prefix + 'addTag', selector, tagName, tagGroup, function (err) {                  // 179\n        if (err) throw new Meteor.Error(500, 'Unable to add tag ' + tagName, err);                  // 180\n      });                                                                                           // 181\n    };                                                                                              // 182\n                                                                                                    // 183\n    collection.removeTag = function (tagName, tagGroup, selector) {                                 // 184\n      if (typeof tagGroup === 'object') {                                                           // 185\n        selector = tagGroup;                                                                        // 186\n        tagGroup = undefined;                                                                       // 187\n      }                                                                                             // 188\n      Meteor.call(prefix + 'removeTag', selector, tagName, tagGroup, function (err) {               // 189\n        if (err) throw new Meteor.Error(500, 'Unable to remove tag ' + tagName, err);               // 190\n      });                                                                                           // 191\n    };                                                                                              // 192\n                                                                                                    // 193\n    //TODO: use allow/deny pattern                                                                  // 194\n                                                                                                    // 195\n    collection.allowTags = function (callback) {                                                    // 196\n      if (!_.isFunction(callback))                                                                  // 197\n        throw new Error('allow callback must be a function');                                       // 198\n      validators[collection._name].allow.push(callback);                                            // 199\n    };                                                                                              // 200\n                                                                                                    // 201\n    collection.denyTags = function (callback) {                                                     // 202\n      if (!_.isFunction(callback))                                                                  // 203\n        throw new Error('dany callback must be a function');                                        // 204\n      validators[collection._name].deny.push(callback);                                             // 205\n    };                                                                                              // 206\n                                                                                                    // 207\n    // define meteor methods                                                                        // 208\n                                                                                                    // 209\n    Meteor.methods(methods);                                                                        // 210\n  },                                                                                                // 211\n                                                                                                    // 212\n  _getCollection: function (name) {                                                                 // 213\n    if (!name)                                                                                      // 214\n      return defaultCollection;                                                                     // 215\n    return collections[name];                                                                       // 216\n  },                                                                                                // 217\n                                                                                                    // 218\n});                                                                                                 // 219\n                                                                                                    // 220\n//////////////////////////////////////////////////////////////////////////////////////////////////////     // 229\n                                                                                                           // 230\n}).call(this);                                                                                             // 231\n                                                                                                           // 232\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n/* Exports */\nif (typeof Package === 'undefined') Package = {};\nPackage['patrickleet:tags'] = {\n  Tags: Tags\n};\n\n})();\n","servePath":"/packages/patrickleet_tags.js","sourceMap":{"version":3,"sources":["/packages/patrickleet_tags/packages/patrickleet_tags.js"],"names":[],"mappingsiH","file":"/packages/patrickleet_tags.js","sourcesContent":["(function () {\n\n//////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                  //\n// packages/patrickleet:tags/patrickleet-tags.js                                                    //\n//                                                                                                  //\n//////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                    //\n/*                                                                                                  // 1\n  @Inspired by original version by @apendua / apendua@gmail.com                                     // 2\n  @git: https://github.com/apendua/meteor-tags                                                      // 3\n                                                                                                    // 4\n  @Current version - @patrickleet                                                                   // 5\n  @git: https://github.com/patrickleet/meteor-tags                                                  // 6\n*/                                                                                                  // 7\n                                                                                                    // 8\nTags = {};                                                                                          // 9\n                                                                                                    // 10\nMeteor.tags = new Meteor.Collection(\"tags\");                                                        // 11\n                                                                                                    // 12\nvar _ = Package.underscore._;                                                                       // 13\nvar tagsInterface = {};                                                                             // 14\nvar collections = {};                                                                               // 15\nvar validators = {};                                                                                // 16\nvar defaultCollection = null;                                                                       // 17\nvar hasCollection2 = !!Package['aldeed:collection2'];                                               // 18\nvar hasSimpleSchema = !!Package['aldeed:simple-schema'];                                            // 19\n                                                                                                    // 20\nvar safe = function (userId, collection, selector, action) {                                        // 21\n  var count = 0;                                                                                    // 22\n  if (!_.isFunction(action))                                                                        // 23\n    return;                                                                                         // 24\n                                                                                                    // 25\n  collection.find(selector).forEach(function (doc) {                                                // 26\n    var allow = Meteor.isClient || _.some(validators[collection._name].allow, function (callback) { // 27\n      return callback.call(undefined, userId, doc);                                                 // 28\n    });                                                                                             // 29\n    var deny = !Meteor.isClient && _.some(validators[collection._name].deny, function (callback) {  // 30\n      return callback.call(undefined, userId, doc);                                                 // 31\n    });                                                                                             // 32\n    if (!allow || deny)                                                                             // 33\n      throw new Meteor.Error(403, 'Action not allowed');                                            // 34\n    if (action.call(undefined, doc))                                                                // 35\n      count++;                                                                                      // 36\n  });                                                                                               // 37\n  return count;                                                                                     // 38\n};                                                                                                  // 39\n                                                                                                    // 40\n_.extend(Tags, {                                                                                    // 41\n                                                                                                    // 42\n  TagsMixin: function (collection) {                                                                // 43\n                                                                                                    // 44\n    if (!collection._name)                                                                          // 45\n      throw new Error('tags mixin may only be used with named collections');                        // 46\n                                                                                                    // 47\n    // for further reference                                                                        // 48\n    collections[collection._name] = collection;                                                     // 49\n    validators[collection._name] = { allow: [], deny: [] };                                         // 50\n                                                                                                    // 51\n    if (!defaultCollection)                                                                         // 52\n      defaultCollection = collection;                                                               // 53\n                                                                                                    // 54\n    // prepare methods object                                                                       // 55\n    var methods = {}, prefix = '/' + collection._name + '/';                                        // 56\n                                                                                                    // 57\n    // server methods                                                                               // 58\n                                                                                                    // 59\n    methods[prefix + 'addTag'] = function (selector, tagName, tagGroup) {                           // 60\n      if (!tagName)                                                                                 // 61\n        throw new Meteor.Error(400, 'tagName must be non-empty');                                   // 62\n                                                                                                    // 63\n      var tagGroupKey = (!!tagGroup) ? tagGroup + \"Tags\" : 'tags';                                  // 64\n                                                                                                    // 65\n      var userId = this.userId;                                                                     // 66\n                                                                                                    // 67\n      //TODO: optimize this                                                                         // 68\n      var nRefs = safe(userId, collection, selector, function (doc) {                               // 69\n        // first add tagName to tag's list of selected documents                                    // 70\n        if (doc[tagGroupKey] && doc[tagGroupKey].indexOf(tagName) >= 0)                             // 71\n          // this tag is already there so don't update                                              // 72\n          return false;                                                                             // 73\n                                                                                                    // 74\n        // create an object to add tag to group                                                     // 75\n        // and also add group to tagGroups                                                          // 76\n        var updateOptions = {};                                                                     // 77\n        updateOptions.$addToSet = {};                                                               // 78\n        updateOptions.$addToSet[tagGroupKey] = tagName;                                             // 79\n        if (!!tagGroup) {                                                                           // 80\n          updateOptions.$addToSet.tagGroups = tagGroup;                                             // 81\n        }                                                                                           // 82\n                                                                                                    // 83\n        // if collection2 and attached schema use validate:false and create temp schema             // 84\n        // so it isn't cleaned                                                                      // 85\n        if (hasCollection2 && hasSimpleSchema && !!collection.simpleSchema()) {                     // 86\n          var tempSchema = {};                                                                      // 87\n          tempSchema[tagGroupKey] = {                                                               // 88\n            type: [String],                                                                         // 89\n            optional: true                                                                          // 90\n          };                                                                                        // 91\n          tempSchema.tagGroups = {                                                                  // 92\n            type: [String],                                                                         // 93\n            optional: true                                                                          // 94\n          };                                                                                        // 95\n          var tempSimpleSchema = new SimpleSchema(tempSchema);                                      // 96\n          collection.attachSchema(tempSimpleSchema);                                                // 97\n          collection.update({_id:doc._id}, updateOptions, {validate: false});                       // 98\n        } else {                                                                                    // 99\n          collection.update({_id:doc._id}, updateOptions);                                          // 100\n        }                                                                                           // 101\n                                                                                                    // 102\n        return true;                                                                                // 103\n      });//safe                                                                                     // 104\n                                                                                                    // 105\n      if (nRefs) {                                                                                  // 106\n        // if at least one tag was added, update tags collection                                    // 107\n        var tag = Meteor.tags.findOne({                                                             // 108\n          name: tagName,                                                                            // 109\n          collection: collection._name,                                                             // 110\n          group: tagGroup                                                                           // 111\n        });                                                                                         // 112\n                                                                                                    // 113\n        if (tag) {                                                                                  // 114\n          Meteor.tags.update({_id:tag._id}, {                                                       // 115\n            $inc : { nRefs     : nRefs },                                                           // 116\n            $set : { changedAt : new Date() },                                                      // 117\n          });                                                                                       // 118\n          return tag._id;                                                                           // 119\n        }                                                                                           // 120\n                                                                                                    // 121\n        return Meteor.tags.insert({                                                                 // 122\n          collection : collection._name,                                                            // 123\n          createdBy  : userId,                                                                      // 124\n          createdAt  : new Date(),                                                                  // 125\n          nRefs      : nRefs,                                                                       // 126\n          name       : tagName,                                                                     // 127\n          group      : tagGroup                                                                     // 128\n        });                                                                                         // 129\n      }// if (nRefs)                                                                                // 130\n    };//addTag                                                                                      // 131\n                                                                                                    // 132\n    methods[prefix + 'removeTag'] = function (selector, tagName, tagGroup) {                        // 133\n      var tagGroupKey = (!!tagGroup) ? tagGroup + \"Tags\" : 'tags';                                  // 134\n      var nRefs = safe(this.userId, collection, selector, function (doc) {                          // 135\n        if (!doc[tagGroupKey] || doc[tagGroupKey].indexOf(tagName) < 0)                             // 136\n          return false;                                                                             // 137\n                                                                                                    // 138\n        var updateOptions = {};                                                                     // 139\n        updateOptions.$pull = {};                                                                   // 140\n        updateOptions.$pull[tagGroupKey] = tagName;                                                 // 141\n        // if there will be no tags in the group, remove the group from tagGroups                   // 142\n        if ( (doc[tagGroupKey].length - 1) === 0) {                                                 // 143\n          updateOptions.$pull.tagGroups = tagGroup;                                                 // 144\n        }                                                                                           // 145\n                                                                                                    // 146\n        // if collection2 use validate:false                                                        // 147\n        if (hasCollection2 && !!collection.simpleSchema()) {                                        // 148\n          collection.update({_id:doc._id}, updateOptions, {validate: false});                       // 149\n        } else {                                                                                    // 150\n          collection.update({_id:doc._id}, updateOptions);                                          // 151\n        }                                                                                           // 152\n                                                                                                    // 153\n        return true;                                                                                // 154\n      });                                                                                           // 155\n      //                                                                                            // 156\n      if (nRefs) {                                                                                  // 157\n        Meteor.tags.update({                                                                        // 158\n          name: tagName,                                                                            // 159\n          collection: collection._name,                                                             // 160\n          group: tagGroup                                                                           // 161\n        }, {                                                                                        // 162\n          $inc : { nRefs : -1 },                                                                    // 163\n          $set : { changedAt : new Date() },                                                        // 164\n        });                                                                                         // 165\n        // Remove any unused tags                                                                   // 166\n        Meteor.tags.remove({nRefs: 0});                                                             // 167\n      }                                                                                             // 168\n    };                                                                                              // 169\n                                                                                                    // 170\n    // client methods                                                                               // 171\n                                                                                                    // 172\n    collection.addTag = function (tagName, tagGroup, selector) {                                    // 173\n      // if tagGroup is an object, then it's probably a selector object                             // 174\n      if (typeof tagGroup === 'object') {                                                           // 175\n        selector = tagGroup;                                                                        // 176\n        tagGroup = undefined;                                                                       // 177\n      }                                                                                             // 178\n      Meteor.call(prefix + 'addTag', selector, tagName, tagGroup, function (err) {                  // 179\n        if (err) throw new Meteor.Error(500, 'Unable to add tag ' + tagName, err);                  // 180\n      });                                                                                           // 181\n    };                                                                                              // 182\n                                                                                                    // 183\n    collection.removeTag = function (tagName, tagGroup, selector) {                                 // 184\n      if (typeof tagGroup === 'object') {                                                           // 185\n        selector = tagGroup;                                                                        // 186\n        tagGroup = undefined;                                                                       // 187\n      }                                                                                             // 188\n      Meteor.call(prefix + 'removeTag', selector, tagName, tagGroup, function (err) {               // 189\n        if (err) throw new Meteor.Error(500, 'Unable to remove tag ' + tagName, err);               // 190\n      });                                                                                           // 191\n    };                                                                                              // 192\n                                                                                                    // 193\n    //TODO: use allow/deny pattern                                                                  // 194\n                                                                                                    // 195\n    collection.allowTags = function (callback) {                                                    // 196\n      if (!_.isFunction(callback))                                                                  // 197\n        throw new Error('allow callback must be a function');                                       // 198\n      validators[collection._name].allow.push(callback);                                            // 199\n    };                                                                                              // 200\n                                                                                                    // 201\n    collection.denyTags = function (callback) {                                                     // 202\n      if (!_.isFunction(callback))                                                                  // 203\n        throw new Error('dany callback must be a function');                                        // 204\n      validators[collection._name].deny.push(callback);                                             // 205\n    };                                                                                              // 206\n                                                                                                    // 207\n    // define meteor methods                                                                        // 208\n                                                                                                    // 209\n    Meteor.methods(methods);                                                                        // 210\n  },                                                                                                // 211\n                                                                                                    // 212\n  _getCollection: function (name) {                                                                 // 213\n    if (!name)                                                                                      // 214\n      return defaultCollection;                                                                     // 215\n    return collections[name];                                                                       // 216\n  },                                                                                                // 217\n                                                                                                    // 218\n});                                                                                                 // 219\n                                                                                                    // 220\n//////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n"]}}]