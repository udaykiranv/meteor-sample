[{"type":"js","data":"/* Imports for global scope */\n\nMongoInternals = Package.mongo.MongoInternals;\nMongo = Package.mongo.Mongo;\nTracker = Package.tracker.Tracker;\nDeps = Package.tracker.Deps;\nDate = Package['es5-shim'].Date;\nparseInt = Package['es5-shim'].parseInt;\nECMAScript = Package.ecmascript.ECMAScript;\nMeteor = Package.meteor.Meteor;\nWebApp = Package.webapp.WebApp;\nmain = Package.webapp.main;\nWebAppInternals = Package.webapp.WebAppInternals;\n_ = Package.underscore._;\nDDP = Package['ddp-client'].DDP;\nDDPServer = Package['ddp-server'].DDPServer;\nLaunchScreen = Package['launch-screen'].LaunchScreen;\nBlaze = Package.ui.Blaze;\nUI = Package.ui.UI;\nHandlebars = Package.ui.Handlebars;\nSpacebars = Package.spacebars.Spacebars;\nbabelHelpers = Package['babel-runtime'].babelHelpers;\nPromise = Package.promise.Promise;\nMap = Package['ecmascript-collections'].Map;\nSet = Package['ecmascript-collections'].Set;\nAutoupdate = Package.autoupdate.Autoupdate;\nHTML = Package.htmljs.HTML;\n\n","servePath":"/packages/global-imports.js"},{"type":"js","data":"(function(){\n\n/////////////////////////////////////////////////////////////////////////\n//                                                                     //\n// server/lib/config/accounts.js                                       //\n//                                                                     //\n/////////////////////////////////////////////////////////////////////////\n                                                                       //\n// Set up login services                                               //\nMeteor.startup(function () {                                           // 2\n  // Add Facebook configuration entry                                  //\n  /*                                                                   //\n  ServiceConfiguration.configurations.update(                          //\n    { service: \"facebook\" },                                           //\n    { $set: {                                                          //\n        appId: \"XXXXXXXXXXXXXXX\",                                      //\n        secret: \"XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\"                     //\n      }                                                                //\n    },                                                                 //\n    { upsert: true }                                                   //\n  );                                                                   //\n  */                                                                   //\n                                                                       //\n  // Add GitHub configuration entry                                    //\n  /*                                                                   //\n  ServiceConfiguration.configurations.update(                          //\n    { service: \"github\" },                                             //\n    { $set: {                                                          //\n        clientId: \"XXXXXXXXXXXXXXXXXXXX\",                              //\n        secret: \"XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\"             //\n      }                                                                //\n    },                                                                 //\n    { upsert: true }                                                   //\n  );                                                                   //\n  */                                                                   //\n                                                                       //\n  // Add Google configuration entry                                    //\n  ServiceConfiguration.configurations.update({ service: \"google\" }, { $set: {\n      clientId: \"XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\",\n      client_email: \"XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\",\n      secret: \"XXXXXXXXXXXXXXXXXXXXXXXX\"                               // 35\n    }                                                                  //\n  }, { upsert: true });                                                //\n                                                                       //\n  // Add Linkedin configuration entry                                  //\n  /*                                                                   //\n  ServiceConfiguration.configurations.update(                          //\n    { service: \"linkedin\" },                                           //\n    { $set: {                                                          //\n        clientId: \"XXXXXXXXXXXXXX\",                                    //\n        secret: \"XXXXXXXXXXXXXXXX\"                                     //\n      }                                                                //\n    },                                                                 //\n    { upsert: true }                                                   //\n  );                                                                   //\n  */                                                                   //\n});                                                                    //\n/////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n","servePath":"/server/lib/config/accounts.js","sourceMap":{"version":3,"sources":["/server/lib/config/accounts.js"],"names":[],"mappings":";;;;;;;;;AACA,MAAM,CAAC,OAAO,CAAC,YAAW;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA4BxB,sBAAoB,CAAC,cAAc,CAAC,MAAM,CACxC,EAAE,OAAO,EAAE,QAAQ,EAAE,EACrB,EAAE,IAAI,EAAE;AACJ,cAAQ,EAAE,0EAA0E;AACpF,kBAAY,EAAE,6EAA6E;AAC3F,YAAM,EAAE,0BAA0B;KACnC;GACF,EACD,EAAE,MAAM,EAAE,IAAI,EAAE,CACjB,CAAC;;;;;;;;;;;;;;CAcH,CAAC,CAAC,sE","file":"/server/lib/config/accounts.js","sourcesContent":["// Set up login services\nMeteor.startup(function() {\n  // Add Facebook configuration entry\n  /*\n  ServiceConfiguration.configurations.update(\n    { service: \"facebook\" },\n    { $set: {\n        appId: \"XXXXXXXXXXXXXXX\",\n        secret: \"XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\"\n      }\n    },\n    { upsert: true }\n  );\n  */\n\n  // Add GitHub configuration entry\n  /*\n  ServiceConfiguration.configurations.update(\n    { service: \"github\" },\n    { $set: {\n        clientId: \"XXXXXXXXXXXXXXXXXXXX\",\n        secret: \"XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\"\n      }\n    },\n    { upsert: true }\n  );\n  */\n\n  // Add Google configuration entry\n  ServiceConfiguration.configurations.update(\n    { service: \"google\" },\n    { $set: {\n        clientId: \"XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\",\n        client_email: \"XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\",\n        secret: \"XXXXXXXXXXXXXXXXXXXXXXXX\"\n      }\n    },\n    { upsert: true }\n  );\n\n  // Add Linkedin configuration entry\n  /*\n  ServiceConfiguration.configurations.update(\n    { service: \"linkedin\" },\n    { $set: {\n        clientId: \"XXXXXXXXXXXXXX\",\n        secret: \"XXXXXXXXXXXXXXXX\"\n      }\n    },\n    { upsert: true }\n  );\n  */\n});\n"]}},{"type":"js","data":"(function(){\n\n/////////////////////////////////////////////////////////////////////////\n//                                                                     //\n// server/lib/config/email.js                                          //\n//                                                                     //\n/////////////////////////////////////////////////////////////////////////\n                                                                       //\n/*                                                                     //\nAccounts.emailTemplates.siteName = \"MySite\";                           //\n                                                                       //\nAccounts.emailTemplates.from = \"MySite <support@mysite.com>\";          //\n                                                                       //\nAccounts.emailTemplates.resetPassword.subject = function (user) {      //\n    return \"Message for \" + user.profile.displayName;                  //\n};                                                                     //\n                                                                       //\nAccounts.emailTemplates.resetPassword.text = function (user, url) {    //\n    var signature = \"MySite Bot\";                                      //\n    //var president = President.findOne();                             //\n    //if (president)                                                   //\n    //    president = Meteor.users.findOne(president.presidentId);     //\n    //    signature = president.profile.displayName + \", the MySite President.\";\n                                                                       //\n    return \"Dear \" + user.profile.displayName + \",\\n\\n\" +              //\n        \"Click the following link to set your new password:\\n\" +       //\n        url + \"\\n\\n\" +                                                 //\n        \"Please never forget it again!!!\\n\\n\\n\" +                      //\n        \"Cheers,\\n\" +                                                  //\n        signature;                                                     //\n};                                                                     //\n*/                                                                     //\n/////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n","servePath":"/server/lib/config/email.js","sourceMap":{"version":3,"sources":[],"names":[],"mappings":"","file":"/server/lib/config/email.js"}},{"type":"js","data":"(function(){\n\n/////////////////////////////////////////////////////////////////////////\n//                                                                     //\n// lib/config/accounts_t9n.js                                          //\n//                                                                     //\n/////////////////////////////////////////////////////////////////////////\n                                                                       //\nT9n.setLanguage('en');                                                 // 1\n/////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n","servePath":"/lib/config/accounts_t9n.js","sourceMap":{"version":3,"sources":["meteor://💻app/lib/config/accounts_t9n.js"],"names":[],"mappings":";;;;;;;;AAAA,GAAG,CAAC,WAAW,CAAC,IAAI,CAAC,CAAC,qD","file":"/lib/config/accounts_t9n.js","sourcesContent":["T9n.setLanguage('en');"]}},{"type":"js","data":"(function(){\n\n/////////////////////////////////////////////////////////////////////////\n//                                                                     //\n// lib/config/at_config.js                                             //\n//                                                                     //\n/////////////////////////////////////////////////////////////////////////\n                                                                       //\n                                                                       //\n// Options                                                             //\nAccountsTemplates.configure({                                          // 3\n  defaultLayout: 'masterLayout',                                       // 4\n  defaultLayoutRegions: {                                              // 5\n    nav: 'nav',                                                        // 6\n    footer: 'footer'                                                   // 7\n  },                                                                   //\n  defaultContentRegion: 'main',                                        // 9\n  showForgotPasswordLink: true,                                        // 10\n  overrideLoginErrors: true,                                           // 11\n  enablePasswordChange: true,                                          // 12\n                                                                       //\n  // sendVerificationEmail: true,                                      //\n  // enforceEmailVerification: true,                                   //\n  //confirmPassword: true,                                             //\n  //continuousValidation: false,                                       //\n  //displayFormLabels: true,                                           //\n  //forbidClientAccountCreation: true,                                 //\n  //formValidationFeedback: true,                                      //\n  //homeRoutePath: '/',                                                //\n  //showAddRemoveServices: false,                                      //\n  //showPlaceholders: true,                                            //\n                                                                       //\n  negativeValidation: true,                                            // 25\n  positiveValidation: true,                                            // 26\n  negativeFeedback: false,                                             // 27\n  positiveFeedback: true                                               // 28\n                                                                       //\n});                                                                    //\n// Privacy Policy and Terms of Use                                     //\n//privacyUrl: 'privacy',                                               //\n//termsUrl: 'terms-of-use',                                            //\n/////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n","servePath":"/lib/config/at_config.js","sourceMap":{"version":3,"sources":["meteor://💻app/lib/config/at_config.js"],"names":[],"mappings":";;;;;;;;;;AAEA,iBAAiB,CAAC,SAAS,CAAC;AAC1B,eAAa,EAAE,cAAc;AAC7B,sBAAoB,EAAE;AACpB,OAAG,EAAE,KAAK;AACV,UAAM,EAAE,QAAQ;GACjB;AACD,sBAAoB,EAAE,MAAM;AAC5B,wBAAsB,EAAE,IAAI;AAC5B,qBAAmB,EAAE,IAAI;AACzB,sBAAoB,EAAE,IAAI;;;;;;;;;;;;;AAa1B,oBAAkB,EAAE,IAAI;AACxB,oBAAkB,EAAE,IAAI;AACxB,kBAAgB,EAAE,KAAK;AACvB,kBAAgB,EAAE,IAAI;;CAKvB,CAAC,CAAC","file":"/lib/config/at_config.js","sourcesContent":["\n// Options\nAccountsTemplates.configure({\n  defaultLayout: 'masterLayout',\n  defaultLayoutRegions: {\n    nav: 'nav',\n    footer: 'footer',\n  },\n  defaultContentRegion: 'main',\n  showForgotPasswordLink: true,\n  overrideLoginErrors: true,\n  enablePasswordChange: true,\n\n  // sendVerificationEmail: true,\n  // enforceEmailVerification: true,\n  //confirmPassword: true,\n  //continuousValidation: false,\n  //displayFormLabels: true,\n  //forbidClientAccountCreation: true,\n  //formValidationFeedback: true,\n  //homeRoutePath: '/',\n  //showAddRemoveServices: false,\n  //showPlaceholders: true,\n\n  negativeValidation: true,\n  positiveValidation: true,\n  negativeFeedback: false,\n  positiveFeedback: true,\n\n  // Privacy Policy and Terms of Use\n  //privacyUrl: 'privacy',\n  //termsUrl: 'terms-of-use',\n});\n"]}},{"type":"js","data":"(function(){\n\n/////////////////////////////////////////////////////////////////////////\n//                                                                     //\n// lib/router/routes.js                                                //\n//                                                                     //\n/////////////////////////////////////////////////////////////////////////\n                                                                       //\n                                                                       //\nFlowRouter.route('/', {                                                // 2\n  name: \"home\",                                                        // 3\n  action: function (params, queryParams) {                             // 4\n    BlazeLayout.render('masterLayout', {                               // 5\n      footer: \"footer\",                                                // 6\n      main: \"home\",                                                    // 7\n      nav: \"nav\"                                                       // 8\n    });                                                                //\n  }                                                                    //\n});                                                                    //\n                                                                       //\nFlowRouter.route('/private', {                                         // 13\n  name: \"private\",                                                     // 14\n  triggersEnter: [AccountsTemplates.ensureSignedIn],                   // 15\n  action: function (params, queryParams) {                             // 16\n    BlazeLayout.render('masterLayout', {                               // 17\n      footer: \"footer\",                                                // 18\n      main: \"private\",                                                 // 19\n      nav: \"nav\"                                                       // 20\n    });                                                                //\n  }                                                                    //\n});                                                                    //\n                                                                       //\nFlowRouter.notFound = {                                                // 25\n  action: function () {                                                // 26\n    BlazeLayout.render('masterLayout', {                               // 27\n      footer: \"footer\",                                                // 28\n      main: \"pageNotFound\",                                            // 29\n      nav: \"nav\"                                                       // 30\n    });                                                                //\n  }                                                                    //\n};                                                                     //\n                                                                       //\n//Routes                                                               //\nAccountsTemplates.configureRoute('changePwd');                         // 37\nAccountsTemplates.configureRoute('forgotPwd');                         // 38\nAccountsTemplates.configureRoute('resetPwd');                          // 39\nAccountsTemplates.configureRoute('signIn');                            // 40\nAccountsTemplates.configureRoute('signUp');                            // 41\nAccountsTemplates.configureRoute('verifyEmail');                       // 42\n/////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n","servePath":"/lib/router/routes.js","sourceMap":{"version":3,"sources":["meteor://💻app/lib/router/routes.js"],"names":[],"mappings":";;;;;;;;;AACA,UAAU,CAAC,KAAK,CAAC,GAAG,EAAE;AACpB,MAAI,EAAE,MAAM;AACZ,QAAM,EAAE,UAAS,MAAM,EAAE,WAAW,EAAE;AACpC,eAAW,CAAC,MAAM,CAAC,cAAc,EAAE;AACjC,YAAM,EAAE,QAAQ;AAChB,UAAI,EAAE,MAAM;AACZ,SAAG,EAAE,KAAK;KACX,CAAC,CAAC;GACJ;CACF,CAAC,CAAC;;AAEH,UAAU,CAAC,KAAK,CAAC,UAAU,EAAE;AAC3B,MAAI,EAAE,SAAS;AACf,eAAa,EAAE,CAAC,iBAAiB,CAAC,cAAc,CAAC;AACjD,QAAM,EAAE,UAAS,MAAM,EAAE,WAAW,EAAE;AACpC,eAAW,CAAC,MAAM,CAAC,cAAc,EAAE;AACjC,YAAM,EAAE,QAAQ;AAChB,UAAI,EAAE,SAAS;AACf,SAAG,EAAE,KAAK;KACX,CAAC,CAAC;GACJ;CACF,CAAC,CAAC;;AAEH,UAAU,CAAC,QAAQ,GAAG;AACpB,QAAM,EAAE,YAAW;AACjB,eAAW,CAAC,MAAM,CAAC,cAAc,EAAE;AACjC,YAAM,EAAE,QAAQ;AAChB,UAAI,EAAE,cAAc;AACpB,SAAG,EAAE,KAAK;KACX,CAAC,CAAC;GACJ;CACF,CAAC;;;AAIF,iBAAiB,CAAC,cAAc,CAAC,WAAW,CAAC,CAAC;AAC9C,iBAAiB,CAAC,cAAc,CAAC,WAAW,CAAC,CAAC;AAC9C,iBAAiB,CAAC,cAAc,CAAC,UAAU,CAAC,CAAC;AAC7C,iBAAiB,CAAC,cAAc,CAAC,QAAQ,CAAC,CAAC;AAC3C,iBAAiB,CAAC,cAAc,CAAC,QAAQ,CAAC,CAAC;AAC3C,iBAAiB,CAAC,cAAc,CAAC,aAAa,CAAC,CAAC,4B","file":"/lib/router/routes.js","sourcesContent":["\nFlowRouter.route('/', {\n  name: \"home\",\n  action: function(params, queryParams) {\n    BlazeLayout.render('masterLayout', {\n      footer: \"footer\",\n      main: \"home\",\n      nav: \"nav\",\n    });\n  }\n});\n\nFlowRouter.route('/private', {\n  name: \"private\",\n  triggersEnter: [AccountsTemplates.ensureSignedIn],\n  action: function(params, queryParams) {\n    BlazeLayout.render('masterLayout', {\n      footer: \"footer\",\n      main: \"private\",\n      nav: \"nav\",\n    });\n  }\n});\n\nFlowRouter.notFound = {\n  action: function() {\n    BlazeLayout.render('masterLayout', {\n      footer: \"footer\",\n      main: \"pageNotFound\",\n      nav: \"nav\",\n    });\n  }\n};\n\n\n//Routes\nAccountsTemplates.configureRoute('changePwd');\nAccountsTemplates.configureRoute('forgotPwd');\nAccountsTemplates.configureRoute('resetPwd');\nAccountsTemplates.configureRoute('signIn');\nAccountsTemplates.configureRoute('signUp');\nAccountsTemplates.configureRoute('verifyEmail');\n"]}}]