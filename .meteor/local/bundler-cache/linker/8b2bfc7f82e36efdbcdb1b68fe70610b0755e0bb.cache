[{"type":"js","data":"//////////////////////////////////////////////////////////////////////////\n//                                                                      //\n// This is a generated file. You can view the original                  //\n// source in your browser if your browser supports source maps.         //\n// Source maps are supported by all recent versions of Chrome, Safari,  //\n// and Firefox, and by Internet Explorer 11.                            //\n//                                                                      //\n//////////////////////////////////////////////////////////////////////////\n\n\n(function () {\n\n/* Imports */\nvar Meteor = Package.meteor.Meteor;\nvar _ = Package.underscore._;\nvar Tracker = Package.tracker.Tracker;\nvar Deps = Package.tracker.Deps;\nvar ReactiveDict = Package['reactive-dict'].ReactiveDict;\nvar ReactiveVar = Package['reactive-var'].ReactiveVar;\n\n/* Package-scope variables */\nvar page, qs, Triggers, Router, Group, Route, FlowRouter;\n\n(function(){\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                    //\n// packages/kadira_flow-router/packages/kadira_flow-router.js                                                         //\n//                                                                                                                    //\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                      //\n(function () {                                                                                                        // 1\n                                                                                                                      // 2\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                    //\n// packages/kadira:flow-router/client.browserify.js                                                                   //\n//                                                                                                                    //\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                      //\n(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){\n// shim for using process in browser                                                                                  // 10\n                                                                                                                      // 11\nvar process = module.exports = {};                                                                                    // 12\nvar queue = [];                                                                                                       // 13\nvar draining = false;                                                                                                 // 14\nvar currentQueue;                                                                                                     // 15\nvar queueIndex = -1;                                                                                                  // 16\n                                                                                                                      // 17\nfunction cleanUpNextTick() {                                                                                          // 18\n    draining = false;                                                                                                 // 19\n    if (currentQueue.length) {                                                                                        // 20\n        queue = currentQueue.concat(queue);                                                                           // 21\n    } else {                                                                                                          // 22\n        queueIndex = -1;                                                                                              // 23\n    }                                                                                                                 // 24\n    if (queue.length) {                                                                                               // 25\n        drainQueue();                                                                                                 // 26\n    }                                                                                                                 // 27\n}                                                                                                                     // 28\n                                                                                                                      // 29\nfunction drainQueue() {                                                                                               // 30\n    if (draining) {                                                                                                   // 31\n        return;                                                                                                       // 32\n    }                                                                                                                 // 33\n    var timeout = setTimeout(cleanUpNextTick);                                                                        // 34\n    draining = true;                                                                                                  // 35\n                                                                                                                      // 36\n    var len = queue.length;                                                                                           // 37\n    while(len) {                                                                                                      // 38\n        currentQueue = queue;                                                                                         // 39\n        queue = [];                                                                                                   // 40\n        while (++queueIndex < len) {                                                                                  // 41\n            currentQueue[queueIndex].run();                                                                           // 42\n        }                                                                                                             // 43\n        queueIndex = -1;                                                                                              // 44\n        len = queue.length;                                                                                           // 45\n    }                                                                                                                 // 46\n    currentQueue = null;                                                                                              // 47\n    draining = false;                                                                                                 // 48\n    clearTimeout(timeout);                                                                                            // 49\n}                                                                                                                     // 50\n                                                                                                                      // 51\nprocess.nextTick = function (fun) {                                                                                   // 52\n    var args = new Array(arguments.length - 1);                                                                       // 53\n    if (arguments.length > 1) {                                                                                       // 54\n        for (var i = 1; i < arguments.length; i++) {                                                                  // 55\n            args[i - 1] = arguments[i];                                                                               // 56\n        }                                                                                                             // 57\n    }                                                                                                                 // 58\n    queue.push(new Item(fun, args));                                                                                  // 59\n    if (queue.length === 1 && !draining) {                                                                            // 60\n        setTimeout(drainQueue, 0);                                                                                    // 61\n    }                                                                                                                 // 62\n};                                                                                                                    // 63\n                                                                                                                      // 64\n// v8 likes predictible objects                                                                                       // 65\nfunction Item(fun, array) {                                                                                           // 66\n    this.fun = fun;                                                                                                   // 67\n    this.array = array;                                                                                               // 68\n}                                                                                                                     // 69\nItem.prototype.run = function () {                                                                                    // 70\n    this.fun.apply(null, this.array);                                                                                 // 71\n};                                                                                                                    // 72\nprocess.title = 'browser';                                                                                            // 73\nprocess.browser = true;                                                                                               // 74\nprocess.env = {};                                                                                                     // 75\nprocess.argv = [];                                                                                                    // 76\nprocess.version = ''; // empty string to avoid regexp issues                                                          // 77\nprocess.versions = {};                                                                                                // 78\n                                                                                                                      // 79\nfunction noop() {}                                                                                                    // 80\n                                                                                                                      // 81\nprocess.on = noop;                                                                                                    // 82\nprocess.addListener = noop;                                                                                           // 83\nprocess.once = noop;                                                                                                  // 84\nprocess.off = noop;                                                                                                   // 85\nprocess.removeListener = noop;                                                                                        // 86\nprocess.removeAllListeners = noop;                                                                                    // 87\nprocess.emit = noop;                                                                                                  // 88\n                                                                                                                      // 89\nprocess.binding = function (name) {                                                                                   // 90\n    throw new Error('process.binding is not supported');                                                              // 91\n};                                                                                                                    // 92\n                                                                                                                      // 93\n// TODO(shtylman)                                                                                                     // 94\nprocess.cwd = function () { return '/' };                                                                             // 95\nprocess.chdir = function (dir) {                                                                                      // 96\n    throw new Error('process.chdir is not supported');                                                                // 97\n};                                                                                                                    // 98\nprocess.umask = function() { return 0; };                                                                             // 99\n                                                                                                                      // 100\n},{}],2:[function(require,module,exports){                                                                            // 101\npage = require('page');                                                                                               // 102\nqs   = require('qs');                                                                                                 // 103\n                                                                                                                      // 104\n},{\"page\":3,\"qs\":6}],3:[function(require,module,exports){                                                             // 105\n(function (process){                                                                                                  // 106\n  /* globals require, module */                                                                                       // 107\n                                                                                                                      // 108\n  'use strict';                                                                                                       // 109\n                                                                                                                      // 110\n  /**                                                                                                                 // 111\n   * Module dependencies.                                                                                             // 112\n   */                                                                                                                 // 113\n                                                                                                                      // 114\n  var pathtoRegexp = require('path-to-regexp');                                                                       // 115\n                                                                                                                      // 116\n  /**                                                                                                                 // 117\n   * Module exports.                                                                                                  // 118\n   */                                                                                                                 // 119\n                                                                                                                      // 120\n  module.exports = page;                                                                                              // 121\n                                                                                                                      // 122\n  /**                                                                                                                 // 123\n   * Detect click event                                                                                               // 124\n   */                                                                                                                 // 125\n  var clickEvent = ('undefined' !== typeof document) && document.ontouchstart ? 'touchstart' : 'click';               // 126\n                                                                                                                      // 127\n  /**                                                                                                                 // 128\n   * To work properly with the URL                                                                                    // 129\n   * history.location generated polyfill in https://github.com/devote/HTML5-History-API                               // 130\n   */                                                                                                                 // 131\n                                                                                                                      // 132\n  var location = ('undefined' !== typeof window) && (window.history.location || window.location);                     // 133\n                                                                                                                      // 134\n  /**                                                                                                                 // 135\n   * Perform initial dispatch.                                                                                        // 136\n   */                                                                                                                 // 137\n                                                                                                                      // 138\n  var dispatch = true;                                                                                                // 139\n                                                                                                                      // 140\n                                                                                                                      // 141\n  /**                                                                                                                 // 142\n   * Decode URL components (query string, pathname, hash).                                                            // 143\n   * Accommodates both regular percent encoding and x-www-form-urlencoded format.                                     // 144\n   */                                                                                                                 // 145\n  var decodeURLComponents = true;                                                                                     // 146\n                                                                                                                      // 147\n  /**                                                                                                                 // 148\n   * Base path.                                                                                                       // 149\n   */                                                                                                                 // 150\n                                                                                                                      // 151\n  var base = '';                                                                                                      // 152\n                                                                                                                      // 153\n  /**                                                                                                                 // 154\n   * Running flag.                                                                                                    // 155\n   */                                                                                                                 // 156\n                                                                                                                      // 157\n  var running;                                                                                                        // 158\n                                                                                                                      // 159\n  /**                                                                                                                 // 160\n   * HashBang option                                                                                                  // 161\n   */                                                                                                                 // 162\n                                                                                                                      // 163\n  var hashbang = false;                                                                                               // 164\n                                                                                                                      // 165\n  /**                                                                                                                 // 166\n   * Previous context, for capturing                                                                                  // 167\n   * page exit events.                                                                                                // 168\n   */                                                                                                                 // 169\n                                                                                                                      // 170\n  var prevContext;                                                                                                    // 171\n                                                                                                                      // 172\n  /**                                                                                                                 // 173\n   * Register `path` with callback `fn()`,                                                                            // 174\n   * or route `path`, or redirection,                                                                                 // 175\n   * or `page.start()`.                                                                                               // 176\n   *                                                                                                                  // 177\n   *   page(fn);                                                                                                      // 178\n   *   page('*', fn);                                                                                                 // 179\n   *   page('/user/:id', load, user);                                                                                 // 180\n   *   page('/user/' + user.id, { some: 'thing' });                                                                   // 181\n   *   page('/user/' + user.id);                                                                                      // 182\n   *   page('/from', '/to')                                                                                           // 183\n   *   page();                                                                                                        // 184\n   *                                                                                                                  // 185\n   * @param {String|Function} path                                                                                    // 186\n   * @param {Function} fn...                                                                                          // 187\n   * @api public                                                                                                      // 188\n   */                                                                                                                 // 189\n                                                                                                                      // 190\n  function page(path, fn) {                                                                                           // 191\n    // <callback>                                                                                                     // 192\n    if ('function' === typeof path) {                                                                                 // 193\n      return page('*', path);                                                                                         // 194\n    }                                                                                                                 // 195\n                                                                                                                      // 196\n    // route <path> to <callback ...>                                                                                 // 197\n    if ('function' === typeof fn) {                                                                                   // 198\n      var route = new Route(path);                                                                                    // 199\n      for (var i = 1; i < arguments.length; ++i) {                                                                    // 200\n        page.callbacks.push(route.middleware(arguments[i]));                                                          // 201\n      }                                                                                                               // 202\n      // show <path> with [state]                                                                                     // 203\n    } else if ('string' === typeof path) {                                                                            // 204\n      page['string' === typeof fn ? 'redirect' : 'show'](path, fn);                                                   // 205\n      // start [options]                                                                                              // 206\n    } else {                                                                                                          // 207\n      page.start(path);                                                                                               // 208\n    }                                                                                                                 // 209\n  }                                                                                                                   // 210\n                                                                                                                      // 211\n  /**                                                                                                                 // 212\n   * Callback functions.                                                                                              // 213\n   */                                                                                                                 // 214\n                                                                                                                      // 215\n  page.callbacks = [];                                                                                                // 216\n  page.exits = [];                                                                                                    // 217\n                                                                                                                      // 218\n  /**                                                                                                                 // 219\n   * Current path being processed                                                                                     // 220\n   * @type {String}                                                                                                   // 221\n   */                                                                                                                 // 222\n  page.current = '';                                                                                                  // 223\n                                                                                                                      // 224\n  /**                                                                                                                 // 225\n   * Number of pages navigated to.                                                                                    // 226\n   * @type {number}                                                                                                   // 227\n   *                                                                                                                  // 228\n   *     page.len == 0;                                                                                               // 229\n   *     page('/login');                                                                                              // 230\n   *     page.len == 1;                                                                                               // 231\n   */                                                                                                                 // 232\n                                                                                                                      // 233\n  page.len = 0;                                                                                                       // 234\n                                                                                                                      // 235\n  /**                                                                                                                 // 236\n   * Get or set basepath to `path`.                                                                                   // 237\n   *                                                                                                                  // 238\n   * @param {String} path                                                                                             // 239\n   * @api public                                                                                                      // 240\n   */                                                                                                                 // 241\n                                                                                                                      // 242\n  page.base = function(path) {                                                                                        // 243\n    if (0 === arguments.length) return base;                                                                          // 244\n    base = path;                                                                                                      // 245\n  };                                                                                                                  // 246\n                                                                                                                      // 247\n  /**                                                                                                                 // 248\n   * Bind with the given `options`.                                                                                   // 249\n   *                                                                                                                  // 250\n   * Options:                                                                                                         // 251\n   *                                                                                                                  // 252\n   *    - `click` bind to click events [true]                                                                         // 253\n   *    - `popstate` bind to popstate [true]                                                                          // 254\n   *    - `dispatch` perform initial dispatch [true]                                                                  // 255\n   *                                                                                                                  // 256\n   * @param {Object} options                                                                                          // 257\n   * @api public                                                                                                      // 258\n   */                                                                                                                 // 259\n                                                                                                                      // 260\n  page.start = function(options) {                                                                                    // 261\n    options = options || {};                                                                                          // 262\n    if (running) return;                                                                                              // 263\n    running = true;                                                                                                   // 264\n    if (false === options.dispatch) dispatch = false;                                                                 // 265\n    if (false === options.decodeURLComponents) decodeURLComponents = false;                                           // 266\n    if (false !== options.popstate) window.addEventListener('popstate', onpopstate, false);                           // 267\n    if (false !== options.click) {                                                                                    // 268\n      document.addEventListener(clickEvent, onclick, false);                                                          // 269\n    }                                                                                                                 // 270\n    if (true === options.hashbang) hashbang = true;                                                                   // 271\n    if (!dispatch) return;                                                                                            // 272\n    var url = (hashbang && ~location.hash.indexOf('#!')) ? location.hash.substr(2) + location.search : location.pathname + location.search + location.hash;\n    page.replace(url, null, true, dispatch);                                                                          // 274\n  };                                                                                                                  // 275\n                                                                                                                      // 276\n  /**                                                                                                                 // 277\n   * Unbind click and popstate event handlers.                                                                        // 278\n   *                                                                                                                  // 279\n   * @api public                                                                                                      // 280\n   */                                                                                                                 // 281\n                                                                                                                      // 282\n  page.stop = function() {                                                                                            // 283\n    if (!running) return;                                                                                             // 284\n    page.current = '';                                                                                                // 285\n    page.len = 0;                                                                                                     // 286\n    running = false;                                                                                                  // 287\n    document.removeEventListener(clickEvent, onclick, false);                                                         // 288\n    window.removeEventListener('popstate', onpopstate, false);                                                        // 289\n  };                                                                                                                  // 290\n                                                                                                                      // 291\n  /**                                                                                                                 // 292\n   * Show `path` with optional `state` object.                                                                        // 293\n   *                                                                                                                  // 294\n   * @param {String} path                                                                                             // 295\n   * @param {Object} state                                                                                            // 296\n   * @param {Boolean} dispatch                                                                                        // 297\n   * @return {Context}                                                                                                // 298\n   * @api public                                                                                                      // 299\n   */                                                                                                                 // 300\n                                                                                                                      // 301\n  page.show = function(path, state, dispatch, push) {                                                                 // 302\n    var ctx = new Context(path, state);                                                                               // 303\n    page.current = ctx.path;                                                                                          // 304\n    if (false !== dispatch) page.dispatch(ctx);                                                                       // 305\n    if (false !== ctx.handled && false !== push) ctx.pushState();                                                     // 306\n    return ctx;                                                                                                       // 307\n  };                                                                                                                  // 308\n                                                                                                                      // 309\n  /**                                                                                                                 // 310\n   * Goes back in the history                                                                                         // 311\n   * Back should always let the current route push state and then go back.                                            // 312\n   *                                                                                                                  // 313\n   * @param {String} path - fallback path to go back if no more history exists, if undefined defaults to page.base    // 314\n   * @param {Object} [state]                                                                                          // 315\n   * @api public                                                                                                      // 316\n   */                                                                                                                 // 317\n                                                                                                                      // 318\n  page.back = function(path, state) {                                                                                 // 319\n    if (page.len > 0) {                                                                                               // 320\n      // this may need more testing to see if all browsers                                                            // 321\n      // wait for the next tick to go back in history                                                                 // 322\n      history.back();                                                                                                 // 323\n      page.len--;                                                                                                     // 324\n    } else if (path) {                                                                                                // 325\n      setTimeout(function() {                                                                                         // 326\n        page.show(path, state);                                                                                       // 327\n      });                                                                                                             // 328\n    }else{                                                                                                            // 329\n      setTimeout(function() {                                                                                         // 330\n        page.show(base, state);                                                                                       // 331\n      });                                                                                                             // 332\n    }                                                                                                                 // 333\n  };                                                                                                                  // 334\n                                                                                                                      // 335\n                                                                                                                      // 336\n  /**                                                                                                                 // 337\n   * Register route to redirect from one path to other                                                                // 338\n   * or just redirect to another route                                                                                // 339\n   *                                                                                                                  // 340\n   * @param {String} from - if param 'to' is undefined redirects to 'from'                                            // 341\n   * @param {String} [to]                                                                                             // 342\n   * @api public                                                                                                      // 343\n   */                                                                                                                 // 344\n  page.redirect = function(from, to) {                                                                                // 345\n    // Define route from a path to another                                                                            // 346\n    if ('string' === typeof from && 'string' === typeof to) {                                                         // 347\n      page(from, function(e) {                                                                                        // 348\n        setTimeout(function() {                                                                                       // 349\n          page.replace(to);                                                                                           // 350\n        }, 0);                                                                                                        // 351\n      });                                                                                                             // 352\n    }                                                                                                                 // 353\n                                                                                                                      // 354\n    // Wait for the push state and replace it with another                                                            // 355\n    if ('string' === typeof from && 'undefined' === typeof to) {                                                      // 356\n      setTimeout(function() {                                                                                         // 357\n        page.replace(from);                                                                                           // 358\n      }, 0);                                                                                                          // 359\n    }                                                                                                                 // 360\n  };                                                                                                                  // 361\n                                                                                                                      // 362\n  /**                                                                                                                 // 363\n   * Replace `path` with optional `state` object.                                                                     // 364\n   *                                                                                                                  // 365\n   * @param {String} path                                                                                             // 366\n   * @param {Object} state                                                                                            // 367\n   * @return {Context}                                                                                                // 368\n   * @api public                                                                                                      // 369\n   */                                                                                                                 // 370\n                                                                                                                      // 371\n                                                                                                                      // 372\n  page.replace = function(path, state, init, dispatch) {                                                              // 373\n    var ctx = new Context(path, state);                                                                               // 374\n    page.current = ctx.path;                                                                                          // 375\n    ctx.init = init;                                                                                                  // 376\n    ctx.save(); // save before dispatching, which may redirect                                                        // 377\n    if (false !== dispatch) page.dispatch(ctx);                                                                       // 378\n    return ctx;                                                                                                       // 379\n  };                                                                                                                  // 380\n                                                                                                                      // 381\n  /**                                                                                                                 // 382\n   * Dispatch the given `ctx`.                                                                                        // 383\n   *                                                                                                                  // 384\n   * @param {Object} ctx                                                                                              // 385\n   * @api private                                                                                                     // 386\n   */                                                                                                                 // 387\n                                                                                                                      // 388\n  page.dispatch = function(ctx) {                                                                                     // 389\n    var prev = prevContext,                                                                                           // 390\n      i = 0,                                                                                                          // 391\n      j = 0;                                                                                                          // 392\n                                                                                                                      // 393\n    prevContext = ctx;                                                                                                // 394\n                                                                                                                      // 395\n    function nextExit() {                                                                                             // 396\n      var fn = page.exits[j++];                                                                                       // 397\n      if (!fn) return nextEnter();                                                                                    // 398\n      fn(prev, nextExit);                                                                                             // 399\n    }                                                                                                                 // 400\n                                                                                                                      // 401\n    function nextEnter() {                                                                                            // 402\n      var fn = page.callbacks[i++];                                                                                   // 403\n                                                                                                                      // 404\n      if (ctx.path !== page.current) {                                                                                // 405\n        ctx.handled = false;                                                                                          // 406\n        return;                                                                                                       // 407\n      }                                                                                                               // 408\n      if (!fn) return unhandled(ctx);                                                                                 // 409\n      fn(ctx, nextEnter);                                                                                             // 410\n    }                                                                                                                 // 411\n                                                                                                                      // 412\n    if (prev) {                                                                                                       // 413\n      nextExit();                                                                                                     // 414\n    } else {                                                                                                          // 415\n      nextEnter();                                                                                                    // 416\n    }                                                                                                                 // 417\n  };                                                                                                                  // 418\n                                                                                                                      // 419\n  /**                                                                                                                 // 420\n   * Unhandled `ctx`. When it's not the initial                                                                       // 421\n   * popstate then redirect. If you wish to handle                                                                    // 422\n   * 404s on your own use `page('*', callback)`.                                                                      // 423\n   *                                                                                                                  // 424\n   * @param {Context} ctx                                                                                             // 425\n   * @api private                                                                                                     // 426\n   */                                                                                                                 // 427\n                                                                                                                      // 428\n  function unhandled(ctx) {                                                                                           // 429\n    if (ctx.handled) return;                                                                                          // 430\n    var current;                                                                                                      // 431\n                                                                                                                      // 432\n    if (hashbang) {                                                                                                   // 433\n      current = base + location.hash.replace('#!', '');                                                               // 434\n    } else {                                                                                                          // 435\n      current = location.pathname + location.search;                                                                  // 436\n    }                                                                                                                 // 437\n                                                                                                                      // 438\n    if (current === ctx.canonicalPath) return;                                                                        // 439\n    page.stop();                                                                                                      // 440\n    ctx.handled = false;                                                                                              // 441\n    location.href = ctx.canonicalPath;                                                                                // 442\n  }                                                                                                                   // 443\n                                                                                                                      // 444\n  /**                                                                                                                 // 445\n   * Register an exit route on `path` with                                                                            // 446\n   * callback `fn()`, which will be called                                                                            // 447\n   * on the previous context when a new                                                                               // 448\n   * page is visited.                                                                                                 // 449\n   */                                                                                                                 // 450\n  page.exit = function(path, fn) {                                                                                    // 451\n    if (typeof path === 'function') {                                                                                 // 452\n      return page.exit('*', path);                                                                                    // 453\n    }                                                                                                                 // 454\n                                                                                                                      // 455\n    var route = new Route(path);                                                                                      // 456\n    for (var i = 1; i < arguments.length; ++i) {                                                                      // 457\n      page.exits.push(route.middleware(arguments[i]));                                                                // 458\n    }                                                                                                                 // 459\n  };                                                                                                                  // 460\n                                                                                                                      // 461\n  /**                                                                                                                 // 462\n   * Remove URL encoding from the given `str`.                                                                        // 463\n   * Accommodates whitespace in both x-www-form-urlencoded                                                            // 464\n   * and regular percent-encoded form.                                                                                // 465\n   *                                                                                                                  // 466\n   * @param {str} URL component to decode                                                                             // 467\n   */                                                                                                                 // 468\n  function decodeURLEncodedURIComponent(val) {                                                                        // 469\n    if (typeof val !== 'string') { return val; }                                                                      // 470\n    return decodeURLComponents ? decodeURIComponent(val.replace(/\\+/g, ' ')) : val;                                   // 471\n  }                                                                                                                   // 472\n                                                                                                                      // 473\n  /**                                                                                                                 // 474\n   * Initialize a new \"request\" `Context`                                                                             // 475\n   * with the given `path` and optional initial `state`.                                                              // 476\n   *                                                                                                                  // 477\n   * @param {String} path                                                                                             // 478\n   * @param {Object} state                                                                                            // 479\n   * @api public                                                                                                      // 480\n   */                                                                                                                 // 481\n                                                                                                                      // 482\n  function Context(path, state) {                                                                                     // 483\n    if ('/' === path[0] && 0 !== path.indexOf(base)) path = base + (hashbang ? '#!' : '') + path;                     // 484\n    var i = path.indexOf('?');                                                                                        // 485\n                                                                                                                      // 486\n    this.canonicalPath = path;                                                                                        // 487\n    this.path = path.replace(base, '') || '/';                                                                        // 488\n    if (hashbang) this.path = this.path.replace('#!', '') || '/';                                                     // 489\n                                                                                                                      // 490\n    this.title = document.title;                                                                                      // 491\n    this.state = state || {};                                                                                         // 492\n    this.state.path = path;                                                                                           // 493\n    this.querystring = ~i ? decodeURLEncodedURIComponent(path.slice(i + 1)) : '';                                     // 494\n    this.pathname = decodeURLEncodedURIComponent(~i ? path.slice(0, i) : path);                                       // 495\n    this.params = {};                                                                                                 // 496\n                                                                                                                      // 497\n    // fragment                                                                                                       // 498\n    this.hash = '';                                                                                                   // 499\n    if (!hashbang) {                                                                                                  // 500\n      if (!~this.path.indexOf('#')) return;                                                                           // 501\n      var parts = this.path.split('#');                                                                               // 502\n      this.path = parts[0];                                                                                           // 503\n      this.hash = decodeURLEncodedURIComponent(parts[1]) || '';                                                       // 504\n      this.querystring = this.querystring.split('#')[0];                                                              // 505\n    }                                                                                                                 // 506\n  }                                                                                                                   // 507\n                                                                                                                      // 508\n  /**                                                                                                                 // 509\n   * Expose `Context`.                                                                                                // 510\n   */                                                                                                                 // 511\n                                                                                                                      // 512\n  page.Context = Context;                                                                                             // 513\n                                                                                                                      // 514\n  /**                                                                                                                 // 515\n   * Push state.                                                                                                      // 516\n   *                                                                                                                  // 517\n   * @api private                                                                                                     // 518\n   */                                                                                                                 // 519\n                                                                                                                      // 520\n  Context.prototype.pushState = function() {                                                                          // 521\n    page.len++;                                                                                                       // 522\n    history.pushState(this.state, this.title, hashbang && this.path !== '/' ? '#!' + this.path : this.canonicalPath);\n  };                                                                                                                  // 524\n                                                                                                                      // 525\n  /**                                                                                                                 // 526\n   * Save the context state.                                                                                          // 527\n   *                                                                                                                  // 528\n   * @api public                                                                                                      // 529\n   */                                                                                                                 // 530\n                                                                                                                      // 531\n  Context.prototype.save = function() {                                                                               // 532\n    history.replaceState(this.state, this.title, hashbang && this.path !== '/' ? '#!' + this.path : this.canonicalPath);\n  };                                                                                                                  // 534\n                                                                                                                      // 535\n  /**                                                                                                                 // 536\n   * Initialize `Route` with the given HTTP `path`,                                                                   // 537\n   * and an array of `callbacks` and `options`.                                                                       // 538\n   *                                                                                                                  // 539\n   * Options:                                                                                                         // 540\n   *                                                                                                                  // 541\n   *   - `sensitive`    enable case-sensitive routes                                                                  // 542\n   *   - `strict`       enable strict matching for trailing slashes                                                   // 543\n   *                                                                                                                  // 544\n   * @param {String} path                                                                                             // 545\n   * @param {Object} options.                                                                                         // 546\n   * @api private                                                                                                     // 547\n   */                                                                                                                 // 548\n                                                                                                                      // 549\n  function Route(path, options) {                                                                                     // 550\n    options = options || {};                                                                                          // 551\n    this.path = (path === '*') ? '(.*)' : path;                                                                       // 552\n    this.method = 'GET';                                                                                              // 553\n    this.regexp = pathtoRegexp(this.path,                                                                             // 554\n      this.keys = [],                                                                                                 // 555\n      options.sensitive,                                                                                              // 556\n      options.strict);                                                                                                // 557\n  }                                                                                                                   // 558\n                                                                                                                      // 559\n  /**                                                                                                                 // 560\n   * Expose `Route`.                                                                                                  // 561\n   */                                                                                                                 // 562\n                                                                                                                      // 563\n  page.Route = Route;                                                                                                 // 564\n                                                                                                                      // 565\n  /**                                                                                                                 // 566\n   * Return route middleware with                                                                                     // 567\n   * the given callback `fn()`.                                                                                       // 568\n   *                                                                                                                  // 569\n   * @param {Function} fn                                                                                             // 570\n   * @return {Function}                                                                                               // 571\n   * @api public                                                                                                      // 572\n   */                                                                                                                 // 573\n                                                                                                                      // 574\n  Route.prototype.middleware = function(fn) {                                                                         // 575\n    var self = this;                                                                                                  // 576\n    return function(ctx, next) {                                                                                      // 577\n      if (self.match(ctx.path, ctx.params)) return fn(ctx, next);                                                     // 578\n      next();                                                                                                         // 579\n    };                                                                                                                // 580\n  };                                                                                                                  // 581\n                                                                                                                      // 582\n  /**                                                                                                                 // 583\n   * Check if this route matches `path`, if so                                                                        // 584\n   * populate `params`.                                                                                               // 585\n   *                                                                                                                  // 586\n   * @param {String} path                                                                                             // 587\n   * @param {Object} params                                                                                           // 588\n   * @return {Boolean}                                                                                                // 589\n   * @api private                                                                                                     // 590\n   */                                                                                                                 // 591\n                                                                                                                      // 592\n  Route.prototype.match = function(path, params) {                                                                    // 593\n    var keys = this.keys,                                                                                             // 594\n      qsIndex = path.indexOf('?'),                                                                                    // 595\n      pathname = ~qsIndex ? path.slice(0, qsIndex) : path,                                                            // 596\n      m = this.regexp.exec(decodeURIComponent(pathname));                                                             // 597\n                                                                                                                      // 598\n    if (!m) return false;                                                                                             // 599\n                                                                                                                      // 600\n    for (var i = 1, len = m.length; i < len; ++i) {                                                                   // 601\n      var key = keys[i - 1];                                                                                          // 602\n      var val = decodeURLEncodedURIComponent(m[i]);                                                                   // 603\n      if (val !== undefined || !(hasOwnProperty.call(params, key.name))) {                                            // 604\n        params[key.name] = val;                                                                                       // 605\n      }                                                                                                               // 606\n    }                                                                                                                 // 607\n                                                                                                                      // 608\n    return true;                                                                                                      // 609\n  };                                                                                                                  // 610\n                                                                                                                      // 611\n                                                                                                                      // 612\n  /**                                                                                                                 // 613\n   * Handle \"populate\" events.                                                                                        // 614\n   */                                                                                                                 // 615\n                                                                                                                      // 616\n  var onpopstate = (function () {                                                                                     // 617\n    var loaded = false;                                                                                               // 618\n    if ('undefined' === typeof window) {                                                                              // 619\n      return;                                                                                                         // 620\n    }                                                                                                                 // 621\n    if (document.readyState === 'complete') {                                                                         // 622\n      loaded = true;                                                                                                  // 623\n    } else {                                                                                                          // 624\n      window.addEventListener('load', function() {                                                                    // 625\n        setTimeout(function() {                                                                                       // 626\n          loaded = true;                                                                                              // 627\n        }, 0);                                                                                                        // 628\n      });                                                                                                             // 629\n    }                                                                                                                 // 630\n    return function onpopstate(e) {                                                                                   // 631\n      if (!loaded) return;                                                                                            // 632\n      if (e.state) {                                                                                                  // 633\n        var path = e.state.path;                                                                                      // 634\n        page.replace(path, e.state);                                                                                  // 635\n      } else {                                                                                                        // 636\n        page.show(location.pathname + location.hash, undefined, undefined, false);                                    // 637\n      }                                                                                                               // 638\n    };                                                                                                                // 639\n  })();                                                                                                               // 640\n  /**                                                                                                                 // 641\n   * Handle \"click\" events.                                                                                           // 642\n   */                                                                                                                 // 643\n                                                                                                                      // 644\n  function onclick(e) {                                                                                               // 645\n                                                                                                                      // 646\n    if (1 !== which(e)) return;                                                                                       // 647\n                                                                                                                      // 648\n    if (e.metaKey || e.ctrlKey || e.shiftKey) return;                                                                 // 649\n    if (e.defaultPrevented) return;                                                                                   // 650\n                                                                                                                      // 651\n                                                                                                                      // 652\n                                                                                                                      // 653\n    // ensure link                                                                                                    // 654\n    var el = e.target;                                                                                                // 655\n    while (el && 'A' !== el.nodeName) el = el.parentNode;                                                             // 656\n    if (!el || 'A' !== el.nodeName) return;                                                                           // 657\n                                                                                                                      // 658\n                                                                                                                      // 659\n                                                                                                                      // 660\n    // Ignore if tag has                                                                                              // 661\n    // 1. \"download\" attribute                                                                                        // 662\n    // 2. rel=\"external\" attribute                                                                                    // 663\n    if (el.hasAttribute('download') || el.getAttribute('rel') === 'external') return;                                 // 664\n                                                                                                                      // 665\n    // ensure non-hash for the same path                                                                              // 666\n    var link = el.getAttribute('href');                                                                               // 667\n    if (!hashbang && el.pathname === location.pathname && (el.hash || '#' === link)) return;                          // 668\n                                                                                                                      // 669\n                                                                                                                      // 670\n                                                                                                                      // 671\n    // Check for mailto: in the href                                                                                  // 672\n    if (link && link.indexOf('mailto:') > -1) return;                                                                 // 673\n                                                                                                                      // 674\n    // check target                                                                                                   // 675\n    if (el.target) return;                                                                                            // 676\n                                                                                                                      // 677\n    // x-origin                                                                                                       // 678\n    if (!sameOrigin(el.href)) return;                                                                                 // 679\n                                                                                                                      // 680\n                                                                                                                      // 681\n                                                                                                                      // 682\n    // rebuild path                                                                                                   // 683\n    var path = el.pathname + el.search + (el.hash || '');                                                             // 684\n                                                                                                                      // 685\n    path = path[0] !== '/' ? '/' + path : path;                                                                       // 686\n                                                                                                                      // 687\n    // strip leading \"/[drive letter]:\" on NW.js on Windows                                                           // 688\n    if (typeof process !== 'undefined' && path.match(/^\\/[a-zA-Z]:\\//)) {                                             // 689\n      path = path.replace(/^\\/[a-zA-Z]:\\//, '/');                                                                     // 690\n    }                                                                                                                 // 691\n                                                                                                                      // 692\n    // same page                                                                                                      // 693\n    var orig = path;                                                                                                  // 694\n                                                                                                                      // 695\n    if (path.indexOf(base) === 0) {                                                                                   // 696\n      path = path.substr(base.length);                                                                                // 697\n    }                                                                                                                 // 698\n                                                                                                                      // 699\n    if (hashbang) path = path.replace('#!', '');                                                                      // 700\n                                                                                                                      // 701\n    if (base && orig === path) return;                                                                                // 702\n                                                                                                                      // 703\n    e.preventDefault();                                                                                               // 704\n    page.show(orig);                                                                                                  // 705\n  }                                                                                                                   // 706\n                                                                                                                      // 707\n  /**                                                                                                                 // 708\n   * Event button.                                                                                                    // 709\n   */                                                                                                                 // 710\n                                                                                                                      // 711\n  function which(e) {                                                                                                 // 712\n    e = e || window.event;                                                                                            // 713\n    return null === e.which ? e.button : e.which;                                                                     // 714\n  }                                                                                                                   // 715\n                                                                                                                      // 716\n  /**                                                                                                                 // 717\n   * Check if `href` is the same origin.                                                                              // 718\n   */                                                                                                                 // 719\n                                                                                                                      // 720\n  function sameOrigin(href) {                                                                                         // 721\n    var origin = location.protocol + '//' + location.hostname;                                                        // 722\n    if (location.port) origin += ':' + location.port;                                                                 // 723\n    return (href && (0 === href.indexOf(origin)));                                                                    // 724\n  }                                                                                                                   // 725\n                                                                                                                      // 726\n  page.sameOrigin = sameOrigin;                                                                                       // 727\n                                                                                                                      // 728\n}).call(this,require('_process'))                                                                                     // 729\n                                                                                                                      // 730\n},{\"_process\":1,\"path-to-regexp\":4}],4:[function(require,module,exports){                                             // 731\nvar isArray = require('isarray');                                                                                     // 732\n                                                                                                                      // 733\n/**                                                                                                                   // 734\n * Expose `pathToRegexp`.                                                                                             // 735\n */                                                                                                                   // 736\nmodule.exports = pathToRegexp;                                                                                        // 737\n                                                                                                                      // 738\n/**                                                                                                                   // 739\n * The main path matching regexp utility.                                                                             // 740\n *                                                                                                                    // 741\n * @type {RegExp}                                                                                                     // 742\n */                                                                                                                   // 743\nvar PATH_REGEXP = new RegExp([                                                                                        // 744\n  // Match escaped characters that would otherwise appear in future matches.                                          // 745\n  // This allows the user to escape special characters that won't transform.                                          // 746\n  '(\\\\\\\\.)',                                                                                                          // 747\n  // Match Express-style parameters and un-named parameters with a prefix                                             // 748\n  // and optional suffixes. Matches appear as:                                                                        // 749\n  //                                                                                                                  // 750\n  // \"/:test(\\\\d+)?\" => [\"/\", \"test\", \"\\d+\", undefined, \"?\"]                                                          // 751\n  // \"/route(\\\\d+)\" => [undefined, undefined, undefined, \"\\d+\", undefined]                                            // 752\n  '([\\\\/.])?(?:\\\\:(\\\\w+)(?:\\\\(((?:\\\\\\\\.|[^)])*)\\\\))?|\\\\(((?:\\\\\\\\.|[^)])*)\\\\))([+*?])?',                               // 753\n  // Match regexp special characters that are always escaped.                                                         // 754\n  '([.+*?=^!:${}()[\\\\]|\\\\/])'                                                                                         // 755\n].join('|'), 'g');                                                                                                    // 756\n                                                                                                                      // 757\n/**                                                                                                                   // 758\n * Escape the capturing group by escaping special characters and meaning.                                             // 759\n *                                                                                                                    // 760\n * @param  {String} group                                                                                             // 761\n * @return {String}                                                                                                   // 762\n */                                                                                                                   // 763\nfunction escapeGroup (group) {                                                                                        // 764\n  return group.replace(/([=!:$\\/()])/g, '\\\\$1');                                                                      // 765\n}                                                                                                                     // 766\n                                                                                                                      // 767\n/**                                                                                                                   // 768\n * Attach the keys as a property of the regexp.                                                                       // 769\n *                                                                                                                    // 770\n * @param  {RegExp} re                                                                                                // 771\n * @param  {Array}  keys                                                                                              // 772\n * @return {RegExp}                                                                                                   // 773\n */                                                                                                                   // 774\nfunction attachKeys (re, keys) {                                                                                      // 775\n  re.keys = keys;                                                                                                     // 776\n  return re;                                                                                                          // 777\n}                                                                                                                     // 778\n                                                                                                                      // 779\n/**                                                                                                                   // 780\n * Get the flags for a regexp from the options.                                                                       // 781\n *                                                                                                                    // 782\n * @param  {Object} options                                                                                           // 783\n * @return {String}                                                                                                   // 784\n */                                                                                                                   // 785\nfunction flags (options) {                                                                                            // 786\n  return options.sensitive ? '' : 'i';                                                                                // 787\n}                                                                                                                     // 788\n                                                                                                                      // 789\n/**                                                                                                                   // 790\n * Pull out keys from a regexp.                                                                                       // 791\n *                                                                                                                    // 792\n * @param  {RegExp} path                                                                                              // 793\n * @param  {Array}  keys                                                                                              // 794\n * @return {RegExp}                                                                                                   // 795\n */                                                                                                                   // 796\nfunction regexpToRegexp (path, keys) {                                                                                // 797\n  // Use a negative lookahead to match only capturing groups.                                                         // 798\n  var groups = path.source.match(/\\((?!\\?)/g);                                                                        // 799\n                                                                                                                      // 800\n  if (groups) {                                                                                                       // 801\n    for (var i = 0; i < groups.length; i++) {                                                                         // 802\n      keys.push({                                                                                                     // 803\n        name:      i,                                                                                                 // 804\n        delimiter: null,                                                                                              // 805\n        optional:  false,                                                                                             // 806\n        repeat:    false                                                                                              // 807\n      });                                                                                                             // 808\n    }                                                                                                                 // 809\n  }                                                                                                                   // 810\n                                                                                                                      // 811\n  return attachKeys(path, keys);                                                                                      // 812\n}                                                                                                                     // 813\n                                                                                                                      // 814\n/**                                                                                                                   // 815\n * Transform an array into a regexp.                                                                                  // 816\n *                                                                                                                    // 817\n * @param  {Array}  path                                                                                              // 818\n * @param  {Array}  keys                                                                                              // 819\n * @param  {Object} options                                                                                           // 820\n * @return {RegExp}                                                                                                   // 821\n */                                                                                                                   // 822\nfunction arrayToRegexp (path, keys, options) {                                                                        // 823\n  var parts = [];                                                                                                     // 824\n                                                                                                                      // 825\n  for (var i = 0; i < path.length; i++) {                                                                             // 826\n    parts.push(pathToRegexp(path[i], keys, options).source);                                                          // 827\n  }                                                                                                                   // 828\n                                                                                                                      // 829\n  var regexp = new RegExp('(?:' + parts.join('|') + ')', flags(options));                                             // 830\n  return attachKeys(regexp, keys);                                                                                    // 831\n}                                                                                                                     // 832\n                                                                                                                      // 833\n/**                                                                                                                   // 834\n * Replace the specific tags with regexp strings.                                                                     // 835\n *                                                                                                                    // 836\n * @param  {String} path                                                                                              // 837\n * @param  {Array}  keys                                                                                              // 838\n * @return {String}                                                                                                   // 839\n */                                                                                                                   // 840\nfunction replacePath (path, keys) {                                                                                   // 841\n  var index = 0;                                                                                                      // 842\n                                                                                                                      // 843\n  function replace (_, escaped, prefix, key, capture, group, suffix, escape) {                                        // 844\n    if (escaped) {                                                                                                    // 845\n      return escaped;                                                                                                 // 846\n    }                                                                                                                 // 847\n                                                                                                                      // 848\n    if (escape) {                                                                                                     // 849\n      return '\\\\' + escape;                                                                                           // 850\n    }                                                                                                                 // 851\n                                                                                                                      // 852\n    var repeat   = suffix === '+' || suffix === '*';                                                                  // 853\n    var optional = suffix === '?' || suffix === '*';                                                                  // 854\n                                                                                                                      // 855\n    keys.push({                                                                                                       // 856\n      name:      key || index++,                                                                                      // 857\n      delimiter: prefix || '/',                                                                                       // 858\n      optional:  optional,                                                                                            // 859\n      repeat:    repeat                                                                                               // 860\n    });                                                                                                               // 861\n                                                                                                                      // 862\n    prefix = prefix ? ('\\\\' + prefix) : '';                                                                           // 863\n    capture = escapeGroup(capture || group || '[^' + (prefix || '\\\\/') + ']+?');                                      // 864\n                                                                                                                      // 865\n    if (repeat) {                                                                                                     // 866\n      capture = capture + '(?:' + prefix + capture + ')*';                                                            // 867\n    }                                                                                                                 // 868\n                                                                                                                      // 869\n    if (optional) {                                                                                                   // 870\n      return '(?:' + prefix + '(' + capture + '))?';                                                                  // 871\n    }                                                                                                                 // 872\n                                                                                                                      // 873\n    // Basic parameter support.                                                                                       // 874\n    return prefix + '(' + capture + ')';                                                                              // 875\n  }                                                                                                                   // 876\n                                                                                                                      // 877\n  return path.replace(PATH_REGEXP, replace);                                                                          // 878\n}                                                                                                                     // 879\n                                                                                                                      // 880\n/**                                                                                                                   // 881\n * Normalize the given path string, returning a regular expression.                                                   // 882\n *                                                                                                                    // 883\n * An empty array can be passed in for the keys, which will hold the                                                  // 884\n * placeholder key descriptions. For example, using `/user/:id`, `keys` will                                          // 885\n * contain `[{ name: 'id', delimiter: '/', optional: false, repeat: false }]`.                                        // 886\n *                                                                                                                    // 887\n * @param  {(String|RegExp|Array)} path                                                                               // 888\n * @param  {Array}                 [keys]                                                                             // 889\n * @param  {Object}                [options]                                                                          // 890\n * @return {RegExp}                                                                                                   // 891\n */                                                                                                                   // 892\nfunction pathToRegexp (path, keys, options) {                                                                         // 893\n  keys = keys || [];                                                                                                  // 894\n                                                                                                                      // 895\n  if (!isArray(keys)) {                                                                                               // 896\n    options = keys;                                                                                                   // 897\n    keys = [];                                                                                                        // 898\n  } else if (!options) {                                                                                              // 899\n    options = {};                                                                                                     // 900\n  }                                                                                                                   // 901\n                                                                                                                      // 902\n  if (path instanceof RegExp) {                                                                                       // 903\n    return regexpToRegexp(path, keys, options);                                                                       // 904\n  }                                                                                                                   // 905\n                                                                                                                      // 906\n  if (isArray(path)) {                                                                                                // 907\n    return arrayToRegexp(path, keys, options);                                                                        // 908\n  }                                                                                                                   // 909\n                                                                                                                      // 910\n  var strict = options.strict;                                                                                        // 911\n  var end = options.end !== false;                                                                                    // 912\n  var route = replacePath(path, keys);                                                                                // 913\n  var endsWithSlash = path.charAt(path.length - 1) === '/';                                                           // 914\n                                                                                                                      // 915\n  // In non-strict mode we allow a slash at the end of match. If the path to                                          // 916\n  // match already ends with a slash, we remove it for consistency. The slash                                         // 917\n  // is valid at the end of a path match, not in the middle. This is important                                        // 918\n  // in non-ending mode, where \"/test/\" shouldn't match \"/test//route\".                                               // 919\n  if (!strict) {                                                                                                      // 920\n    route = (endsWithSlash ? route.slice(0, -2) : route) + '(?:\\\\/(?=$))?';                                           // 921\n  }                                                                                                                   // 922\n                                                                                                                      // 923\n  if (end) {                                                                                                          // 924\n    route += '$';                                                                                                     // 925\n  } else {                                                                                                            // 926\n    // In non-ending mode, we need the capturing groups to match as much as                                           // 927\n    // possible by using a positive lookahead to the end or next path segment.                                        // 928\n    route += strict && endsWithSlash ? '' : '(?=\\\\/|$)';                                                              // 929\n  }                                                                                                                   // 930\n                                                                                                                      // 931\n  return attachKeys(new RegExp('^' + route, flags(options)), keys);                                                   // 932\n}                                                                                                                     // 933\n                                                                                                                      // 934\n},{\"isarray\":5}],5:[function(require,module,exports){                                                                 // 935\nmodule.exports = Array.isArray || function (arr) {                                                                    // 936\n  return Object.prototype.toString.call(arr) == '[object Array]';                                                     // 937\n};                                                                                                                    // 938\n                                                                                                                      // 939\n},{}],6:[function(require,module,exports){                                                                            // 940\nmodule.exports = require('./lib/');                                                                                   // 941\n                                                                                                                      // 942\n},{\"./lib/\":7}],7:[function(require,module,exports){                                                                  // 943\n// Load modules                                                                                                       // 944\n                                                                                                                      // 945\nvar Stringify = require('./stringify');                                                                               // 946\nvar Parse = require('./parse');                                                                                       // 947\n                                                                                                                      // 948\n                                                                                                                      // 949\n// Declare internals                                                                                                  // 950\n                                                                                                                      // 951\nvar internals = {};                                                                                                   // 952\n                                                                                                                      // 953\n                                                                                                                      // 954\nmodule.exports = {                                                                                                    // 955\n    stringify: Stringify,                                                                                             // 956\n    parse: Parse                                                                                                      // 957\n};                                                                                                                    // 958\n                                                                                                                      // 959\n},{\"./parse\":8,\"./stringify\":9}],8:[function(require,module,exports){                                                 // 960\n// Load modules                                                                                                       // 961\n                                                                                                                      // 962\nvar Utils = require('./utils');                                                                                       // 963\n                                                                                                                      // 964\n                                                                                                                      // 965\n// Declare internals                                                                                                  // 966\n                                                                                                                      // 967\nvar internals = {                                                                                                     // 968\n    delimiter: '&',                                                                                                   // 969\n    depth: 5,                                                                                                         // 970\n    arrayLimit: 20,                                                                                                   // 971\n    parameterLimit: 1000,                                                                                             // 972\n    strictNullHandling: false                                                                                         // 973\n};                                                                                                                    // 974\n                                                                                                                      // 975\n                                                                                                                      // 976\ninternals.parseValues = function (str, options) {                                                                     // 977\n                                                                                                                      // 978\n    var obj = {};                                                                                                     // 979\n    var parts = str.split(options.delimiter, options.parameterLimit === Infinity ? undefined : options.parameterLimit);\n                                                                                                                      // 981\n    for (var i = 0, il = parts.length; i < il; ++i) {                                                                 // 982\n        var part = parts[i];                                                                                          // 983\n        var pos = part.indexOf(']=') === -1 ? part.indexOf('=') : part.indexOf(']=') + 1;                             // 984\n                                                                                                                      // 985\n        if (pos === -1) {                                                                                             // 986\n            obj[Utils.decode(part)] = '';                                                                             // 987\n                                                                                                                      // 988\n            if (options.strictNullHandling) {                                                                         // 989\n                obj[Utils.decode(part)] = null;                                                                       // 990\n            }                                                                                                         // 991\n        }                                                                                                             // 992\n        else {                                                                                                        // 993\n            var key = Utils.decode(part.slice(0, pos));                                                               // 994\n            var val = Utils.decode(part.slice(pos + 1));                                                              // 995\n                                                                                                                      // 996\n            if (!Object.prototype.hasOwnProperty.call(obj, key)) {                                                    // 997\n                obj[key] = val;                                                                                       // 998\n            }                                                                                                         // 999\n            else {                                                                                                    // 1000\n                obj[key] = [].concat(obj[key]).concat(val);                                                           // 1001\n            }                                                                                                         // 1002\n        }                                                                                                             // 1003\n    }                                                                                                                 // 1004\n                                                                                                                      // 1005\n    return obj;                                                                                                       // 1006\n};                                                                                                                    // 1007\n                                                                                                                      // 1008\n                                                                                                                      // 1009\ninternals.parseObject = function (chain, val, options) {                                                              // 1010\n                                                                                                                      // 1011\n    if (!chain.length) {                                                                                              // 1012\n        return val;                                                                                                   // 1013\n    }                                                                                                                 // 1014\n                                                                                                                      // 1015\n    var root = chain.shift();                                                                                         // 1016\n                                                                                                                      // 1017\n    var obj;                                                                                                          // 1018\n    if (root === '[]') {                                                                                              // 1019\n        obj = [];                                                                                                     // 1020\n        obj = obj.concat(internals.parseObject(chain, val, options));                                                 // 1021\n    }                                                                                                                 // 1022\n    else {                                                                                                            // 1023\n        obj = Object.create(null);                                                                                    // 1024\n        var cleanRoot = root[0] === '[' && root[root.length - 1] === ']' ? root.slice(1, root.length - 1) : root;     // 1025\n        var index = parseInt(cleanRoot, 10);                                                                          // 1026\n        var indexString = '' + index;                                                                                 // 1027\n        if (!isNaN(index) &&                                                                                          // 1028\n            root !== cleanRoot &&                                                                                     // 1029\n            indexString === cleanRoot &&                                                                              // 1030\n            index >= 0 &&                                                                                             // 1031\n            (options.parseArrays &&                                                                                   // 1032\n             index <= options.arrayLimit)) {                                                                          // 1033\n                                                                                                                      // 1034\n            obj = [];                                                                                                 // 1035\n            obj[index] = internals.parseObject(chain, val, options);                                                  // 1036\n        }                                                                                                             // 1037\n        else {                                                                                                        // 1038\n            obj[cleanRoot] = internals.parseObject(chain, val, options);                                              // 1039\n        }                                                                                                             // 1040\n    }                                                                                                                 // 1041\n                                                                                                                      // 1042\n    return obj;                                                                                                       // 1043\n};                                                                                                                    // 1044\n                                                                                                                      // 1045\n                                                                                                                      // 1046\ninternals.parseKeys = function (key, val, options) {                                                                  // 1047\n                                                                                                                      // 1048\n    if (!key) {                                                                                                       // 1049\n        return;                                                                                                       // 1050\n    }                                                                                                                 // 1051\n                                                                                                                      // 1052\n    // Transform dot notation to bracket notation                                                                     // 1053\n                                                                                                                      // 1054\n    if (options.allowDots) {                                                                                          // 1055\n        key = key.replace(/\\.([^\\.\\[]+)/g, '[$1]');                                                                   // 1056\n    }                                                                                                                 // 1057\n                                                                                                                      // 1058\n    // The regex chunks                                                                                               // 1059\n                                                                                                                      // 1060\n    var parent = /^([^\\[\\]]*)/;                                                                                       // 1061\n    var child = /(\\[[^\\[\\]]*\\])/g;                                                                                    // 1062\n                                                                                                                      // 1063\n    // Get the parent                                                                                                 // 1064\n                                                                                                                      // 1065\n    var segment = parent.exec(key);                                                                                   // 1066\n                                                                                                                      // 1067\n    // Stash the parent if it exists                                                                                  // 1068\n                                                                                                                      // 1069\n    var keys = [];                                                                                                    // 1070\n    if (segment[1]) {                                                                                                 // 1071\n        keys.push(segment[1]);                                                                                        // 1072\n    }                                                                                                                 // 1073\n                                                                                                                      // 1074\n    // Loop through children appending to the array until we hit depth                                                // 1075\n                                                                                                                      // 1076\n    var i = 0;                                                                                                        // 1077\n    while ((segment = child.exec(key)) !== null && i < options.depth) {                                               // 1078\n                                                                                                                      // 1079\n        ++i;                                                                                                          // 1080\n        keys.push(segment[1]);                                                                                        // 1081\n    }                                                                                                                 // 1082\n                                                                                                                      // 1083\n    // If there's a remainder, just add whatever is left                                                              // 1084\n                                                                                                                      // 1085\n    if (segment) {                                                                                                    // 1086\n        keys.push('[' + key.slice(segment.index) + ']');                                                              // 1087\n    }                                                                                                                 // 1088\n                                                                                                                      // 1089\n    return internals.parseObject(keys, val, options);                                                                 // 1090\n};                                                                                                                    // 1091\n                                                                                                                      // 1092\n                                                                                                                      // 1093\nmodule.exports = function (str, options) {                                                                            // 1094\n                                                                                                                      // 1095\n    if (str === '' ||                                                                                                 // 1096\n        str === null ||                                                                                               // 1097\n        typeof str === 'undefined') {                                                                                 // 1098\n                                                                                                                      // 1099\n        return Object.create(null);                                                                                   // 1100\n    }                                                                                                                 // 1101\n                                                                                                                      // 1102\n    options = options || {};                                                                                          // 1103\n    options.delimiter = typeof options.delimiter === 'string' || Utils.isRegExp(options.delimiter) ? options.delimiter : internals.delimiter;\n    options.depth = typeof options.depth === 'number' ? options.depth : internals.depth;                              // 1105\n    options.arrayLimit = typeof options.arrayLimit === 'number' ? options.arrayLimit : internals.arrayLimit;          // 1106\n    options.parseArrays = options.parseArrays !== false;                                                              // 1107\n    options.allowDots = options.allowDots !== false;                                                                  // 1108\n    options.parameterLimit = typeof options.parameterLimit === 'number' ? options.parameterLimit : internals.parameterLimit;\n    options.strictNullHandling = typeof options.strictNullHandling === 'boolean' ? options.strictNullHandling : internals.strictNullHandling;\n                                                                                                                      // 1111\n                                                                                                                      // 1112\n    var tempObj = typeof str === 'string' ? internals.parseValues(str, options) : str;                                // 1113\n    var obj = Object.create(null);                                                                                    // 1114\n                                                                                                                      // 1115\n    // Iterate over the keys and setup the new object                                                                 // 1116\n                                                                                                                      // 1117\n    var keys = Object.keys(tempObj);                                                                                  // 1118\n    for (var i = 0, il = keys.length; i < il; ++i) {                                                                  // 1119\n        var key = keys[i];                                                                                            // 1120\n        var newObj = internals.parseKeys(key, tempObj[key], options);                                                 // 1121\n        obj = Utils.merge(obj, newObj);                                                                               // 1122\n    }                                                                                                                 // 1123\n                                                                                                                      // 1124\n    return Utils.compact(obj);                                                                                        // 1125\n};                                                                                                                    // 1126\n                                                                                                                      // 1127\n},{\"./utils\":10}],9:[function(require,module,exports){                                                                // 1128\n// Load modules                                                                                                       // 1129\n                                                                                                                      // 1130\nvar Utils = require('./utils');                                                                                       // 1131\n                                                                                                                      // 1132\n                                                                                                                      // 1133\n// Declare internals                                                                                                  // 1134\n                                                                                                                      // 1135\nvar internals = {                                                                                                     // 1136\n    delimiter: '&',                                                                                                   // 1137\n    arrayPrefixGenerators: {                                                                                          // 1138\n        brackets: function (prefix, key) {                                                                            // 1139\n                                                                                                                      // 1140\n            return prefix + '[]';                                                                                     // 1141\n        },                                                                                                            // 1142\n        indices: function (prefix, key) {                                                                             // 1143\n                                                                                                                      // 1144\n            return prefix + '[' + key + ']';                                                                          // 1145\n        },                                                                                                            // 1146\n        repeat: function (prefix, key) {                                                                              // 1147\n                                                                                                                      // 1148\n            return prefix;                                                                                            // 1149\n        }                                                                                                             // 1150\n    },                                                                                                                // 1151\n    strictNullHandling: false                                                                                         // 1152\n};                                                                                                                    // 1153\n                                                                                                                      // 1154\n                                                                                                                      // 1155\ninternals.stringify = function (obj, prefix, generateArrayPrefix, strictNullHandling, filter) {                       // 1156\n                                                                                                                      // 1157\n    if (typeof filter === 'function') {                                                                               // 1158\n        obj = filter(prefix, obj);                                                                                    // 1159\n    }                                                                                                                 // 1160\n    else if (Utils.isBuffer(obj)) {                                                                                   // 1161\n        obj = obj.toString();                                                                                         // 1162\n    }                                                                                                                 // 1163\n    else if (obj instanceof Date) {                                                                                   // 1164\n        obj = obj.toISOString();                                                                                      // 1165\n    }                                                                                                                 // 1166\n    else if (obj === null) {                                                                                          // 1167\n        if (strictNullHandling) {                                                                                     // 1168\n            return Utils.encode(prefix);                                                                              // 1169\n        }                                                                                                             // 1170\n                                                                                                                      // 1171\n        obj = '';                                                                                                     // 1172\n    }                                                                                                                 // 1173\n                                                                                                                      // 1174\n    if (typeof obj === 'string' ||                                                                                    // 1175\n        typeof obj === 'number' ||                                                                                    // 1176\n        typeof obj === 'boolean') {                                                                                   // 1177\n                                                                                                                      // 1178\n        return [Utils.encode(prefix) + '=' + Utils.encode(obj)];                                                      // 1179\n    }                                                                                                                 // 1180\n                                                                                                                      // 1181\n    var values = [];                                                                                                  // 1182\n                                                                                                                      // 1183\n    if (typeof obj === 'undefined') {                                                                                 // 1184\n        return values;                                                                                                // 1185\n    }                                                                                                                 // 1186\n                                                                                                                      // 1187\n    var objKeys = Array.isArray(filter) ? filter : Object.keys(obj);                                                  // 1188\n    for (var i = 0, il = objKeys.length; i < il; ++i) {                                                               // 1189\n        var key = objKeys[i];                                                                                         // 1190\n                                                                                                                      // 1191\n        if (Array.isArray(obj)) {                                                                                     // 1192\n            values = values.concat(internals.stringify(obj[key], generateArrayPrefix(prefix, key), generateArrayPrefix, strictNullHandling, filter));\n        }                                                                                                             // 1194\n        else {                                                                                                        // 1195\n            values = values.concat(internals.stringify(obj[key], prefix + '[' + key + ']', generateArrayPrefix, strictNullHandling, filter));\n        }                                                                                                             // 1197\n    }                                                                                                                 // 1198\n                                                                                                                      // 1199\n    return values;                                                                                                    // 1200\n};                                                                                                                    // 1201\n                                                                                                                      // 1202\n                                                                                                                      // 1203\nmodule.exports = function (obj, options) {                                                                            // 1204\n                                                                                                                      // 1205\n    options = options || {};                                                                                          // 1206\n    var delimiter = typeof options.delimiter === 'undefined' ? internals.delimiter : options.delimiter;               // 1207\n    var strictNullHandling = typeof options.strictNullHandling === 'boolean' ? options.strictNullHandling : internals.strictNullHandling;\n    var objKeys;                                                                                                      // 1209\n    var filter;                                                                                                       // 1210\n    if (typeof options.filter === 'function') {                                                                       // 1211\n        filter = options.filter;                                                                                      // 1212\n        obj = filter('', obj);                                                                                        // 1213\n    }                                                                                                                 // 1214\n    else if (Array.isArray(options.filter)) {                                                                         // 1215\n        objKeys = filter = options.filter;                                                                            // 1216\n    }                                                                                                                 // 1217\n                                                                                                                      // 1218\n    var keys = [];                                                                                                    // 1219\n                                                                                                                      // 1220\n    if (typeof obj !== 'object' ||                                                                                    // 1221\n        obj === null) {                                                                                               // 1222\n                                                                                                                      // 1223\n        return '';                                                                                                    // 1224\n    }                                                                                                                 // 1225\n                                                                                                                      // 1226\n    var arrayFormat;                                                                                                  // 1227\n    if (options.arrayFormat in internals.arrayPrefixGenerators) {                                                     // 1228\n        arrayFormat = options.arrayFormat;                                                                            // 1229\n    }                                                                                                                 // 1230\n    else if ('indices' in options) {                                                                                  // 1231\n        arrayFormat = options.indices ? 'indices' : 'repeat';                                                         // 1232\n    }                                                                                                                 // 1233\n    else {                                                                                                            // 1234\n        arrayFormat = 'indices';                                                                                      // 1235\n    }                                                                                                                 // 1236\n                                                                                                                      // 1237\n    var generateArrayPrefix = internals.arrayPrefixGenerators[arrayFormat];                                           // 1238\n                                                                                                                      // 1239\n    if (!objKeys) {                                                                                                   // 1240\n        objKeys = Object.keys(obj);                                                                                   // 1241\n    }                                                                                                                 // 1242\n    for (var i = 0, il = objKeys.length; i < il; ++i) {                                                               // 1243\n        var key = objKeys[i];                                                                                         // 1244\n        keys = keys.concat(internals.stringify(obj[key], key, generateArrayPrefix, strictNullHandling, filter));      // 1245\n    }                                                                                                                 // 1246\n                                                                                                                      // 1247\n    return keys.join(delimiter);                                                                                      // 1248\n};                                                                                                                    // 1249\n                                                                                                                      // 1250\n},{\"./utils\":10}],10:[function(require,module,exports){                                                               // 1251\n// Load modules                                                                                                       // 1252\n                                                                                                                      // 1253\n                                                                                                                      // 1254\n// Declare internals                                                                                                  // 1255\n                                                                                                                      // 1256\nvar internals = {};                                                                                                   // 1257\ninternals.hexTable = new Array(256);                                                                                  // 1258\nfor (var i = 0; i < 256; ++i) {                                                                                       // 1259\n    internals.hexTable[i] = '%' + ((i < 16 ? '0' : '') + i.toString(16)).toUpperCase();                               // 1260\n}                                                                                                                     // 1261\n                                                                                                                      // 1262\n                                                                                                                      // 1263\nexports.arrayToObject = function (source) {                                                                           // 1264\n                                                                                                                      // 1265\n    var obj = Object.create(null);                                                                                    // 1266\n    for (var i = 0, il = source.length; i < il; ++i) {                                                                // 1267\n        if (typeof source[i] !== 'undefined') {                                                                       // 1268\n                                                                                                                      // 1269\n            obj[i] = source[i];                                                                                       // 1270\n        }                                                                                                             // 1271\n    }                                                                                                                 // 1272\n                                                                                                                      // 1273\n    return obj;                                                                                                       // 1274\n};                                                                                                                    // 1275\n                                                                                                                      // 1276\n                                                                                                                      // 1277\nexports.merge = function (target, source) {                                                                           // 1278\n                                                                                                                      // 1279\n    if (!source) {                                                                                                    // 1280\n        return target;                                                                                                // 1281\n    }                                                                                                                 // 1282\n                                                                                                                      // 1283\n    if (typeof source !== 'object') {                                                                                 // 1284\n        if (Array.isArray(target)) {                                                                                  // 1285\n            target.push(source);                                                                                      // 1286\n        }                                                                                                             // 1287\n        else if (typeof target === 'object') {                                                                        // 1288\n            target[source] = true;                                                                                    // 1289\n        }                                                                                                             // 1290\n        else {                                                                                                        // 1291\n            target = [target, source];                                                                                // 1292\n        }                                                                                                             // 1293\n                                                                                                                      // 1294\n        return target;                                                                                                // 1295\n    }                                                                                                                 // 1296\n                                                                                                                      // 1297\n    if (typeof target !== 'object') {                                                                                 // 1298\n        target = [target].concat(source);                                                                             // 1299\n        return target;                                                                                                // 1300\n    }                                                                                                                 // 1301\n                                                                                                                      // 1302\n    if (Array.isArray(target) &&                                                                                      // 1303\n        !Array.isArray(source)) {                                                                                     // 1304\n                                                                                                                      // 1305\n        target = exports.arrayToObject(target);                                                                       // 1306\n    }                                                                                                                 // 1307\n                                                                                                                      // 1308\n    var keys = Object.keys(source);                                                                                   // 1309\n    for (var k = 0, kl = keys.length; k < kl; ++k) {                                                                  // 1310\n        var key = keys[k];                                                                                            // 1311\n        var value = source[key];                                                                                      // 1312\n                                                                                                                      // 1313\n        if (!target[key]) {                                                                                           // 1314\n            target[key] = value;                                                                                      // 1315\n        }                                                                                                             // 1316\n        else {                                                                                                        // 1317\n            target[key] = exports.merge(target[key], value);                                                          // 1318\n        }                                                                                                             // 1319\n    }                                                                                                                 // 1320\n                                                                                                                      // 1321\n    return target;                                                                                                    // 1322\n};                                                                                                                    // 1323\n                                                                                                                      // 1324\n                                                                                                                      // 1325\nexports.decode = function (str) {                                                                                     // 1326\n                                                                                                                      // 1327\n    try {                                                                                                             // 1328\n        return decodeURIComponent(str.replace(/\\+/g, ' '));                                                           // 1329\n    } catch (e) {                                                                                                     // 1330\n        return str;                                                                                                   // 1331\n    }                                                                                                                 // 1332\n};                                                                                                                    // 1333\n                                                                                                                      // 1334\nexports.encode = function (str) {                                                                                     // 1335\n                                                                                                                      // 1336\n    // This code was originally written by Brian White (mscdex) for the io.js core querystring library.               // 1337\n    // It has been adapted here for stricter adherence to RFC 3986                                                    // 1338\n    if (str.length === 0) {                                                                                           // 1339\n        return str;                                                                                                   // 1340\n    }                                                                                                                 // 1341\n                                                                                                                      // 1342\n    if (typeof str !== 'string') {                                                                                    // 1343\n        str = '' + str;                                                                                               // 1344\n    }                                                                                                                 // 1345\n                                                                                                                      // 1346\n    var out = '';                                                                                                     // 1347\n    for (var i = 0, il = str.length; i < il; ++i) {                                                                   // 1348\n        var c = str.charCodeAt(i);                                                                                    // 1349\n                                                                                                                      // 1350\n        if (c === 0x2D || // -                                                                                        // 1351\n            c === 0x2E || // .                                                                                        // 1352\n            c === 0x5F || // _                                                                                        // 1353\n            c === 0x7E || // ~                                                                                        // 1354\n            (c >= 0x30 && c <= 0x39) || // 0-9                                                                        // 1355\n            (c >= 0x41 && c <= 0x5A) || // a-z                                                                        // 1356\n            (c >= 0x61 && c <= 0x7A)) { // A-Z                                                                        // 1357\n                                                                                                                      // 1358\n            out += str[i];                                                                                            // 1359\n            continue;                                                                                                 // 1360\n        }                                                                                                             // 1361\n                                                                                                                      // 1362\n        if (c < 0x80) {                                                                                               // 1363\n            out += internals.hexTable[c];                                                                             // 1364\n            continue;                                                                                                 // 1365\n        }                                                                                                             // 1366\n                                                                                                                      // 1367\n        if (c < 0x800) {                                                                                              // 1368\n            out += internals.hexTable[0xC0 | (c >> 6)] + internals.hexTable[0x80 | (c & 0x3F)];                       // 1369\n            continue;                                                                                                 // 1370\n        }                                                                                                             // 1371\n                                                                                                                      // 1372\n        if (c < 0xD800 || c >= 0xE000) {                                                                              // 1373\n            out += internals.hexTable[0xE0 | (c >> 12)] + internals.hexTable[0x80 | ((c >> 6) & 0x3F)] + internals.hexTable[0x80 | (c & 0x3F)];\n            continue;                                                                                                 // 1375\n        }                                                                                                             // 1376\n                                                                                                                      // 1377\n        ++i;                                                                                                          // 1378\n        c = 0x10000 + (((c & 0x3FF) << 10) | (str.charCodeAt(i) & 0x3FF));                                            // 1379\n        out += internals.hexTable[0xF0 | (c >> 18)] + internals.hexTable[0x80 | ((c >> 12) & 0x3F)] + internals.hexTable[0x80 | ((c >> 6) & 0x3F)] + internals.hexTable[0x80 | (c & 0x3F)];\n    }                                                                                                                 // 1381\n                                                                                                                      // 1382\n    return out;                                                                                                       // 1383\n};                                                                                                                    // 1384\n                                                                                                                      // 1385\nexports.compact = function (obj, refs) {                                                                              // 1386\n                                                                                                                      // 1387\n    if (typeof obj !== 'object' ||                                                                                    // 1388\n        obj === null) {                                                                                               // 1389\n                                                                                                                      // 1390\n        return obj;                                                                                                   // 1391\n    }                                                                                                                 // 1392\n                                                                                                                      // 1393\n    refs = refs || [];                                                                                                // 1394\n    var lookup = refs.indexOf(obj);                                                                                   // 1395\n    if (lookup !== -1) {                                                                                              // 1396\n        return refs[lookup];                                                                                          // 1397\n    }                                                                                                                 // 1398\n                                                                                                                      // 1399\n    refs.push(obj);                                                                                                   // 1400\n                                                                                                                      // 1401\n    if (Array.isArray(obj)) {                                                                                         // 1402\n        var compacted = [];                                                                                           // 1403\n                                                                                                                      // 1404\n        for (var i = 0, il = obj.length; i < il; ++i) {                                                               // 1405\n            if (typeof obj[i] !== 'undefined') {                                                                      // 1406\n                compacted.push(obj[i]);                                                                               // 1407\n            }                                                                                                         // 1408\n        }                                                                                                             // 1409\n                                                                                                                      // 1410\n        return compacted;                                                                                             // 1411\n    }                                                                                                                 // 1412\n                                                                                                                      // 1413\n    var keys = Object.keys(obj);                                                                                      // 1414\n    for (i = 0, il = keys.length; i < il; ++i) {                                                                      // 1415\n        var key = keys[i];                                                                                            // 1416\n        obj[key] = exports.compact(obj[key], refs);                                                                   // 1417\n    }                                                                                                                 // 1418\n                                                                                                                      // 1419\n    return obj;                                                                                                       // 1420\n};                                                                                                                    // 1421\n                                                                                                                      // 1422\n                                                                                                                      // 1423\nexports.isRegExp = function (obj) {                                                                                   // 1424\n                                                                                                                      // 1425\n    return Object.prototype.toString.call(obj) === '[object RegExp]';                                                 // 1426\n};                                                                                                                    // 1427\n                                                                                                                      // 1428\n                                                                                                                      // 1429\nexports.isBuffer = function (obj) {                                                                                   // 1430\n                                                                                                                      // 1431\n    if (obj === null ||                                                                                               // 1432\n        typeof obj === 'undefined') {                                                                                 // 1433\n                                                                                                                      // 1434\n        return false;                                                                                                 // 1435\n    }                                                                                                                 // 1436\n                                                                                                                      // 1437\n    return !!(obj.constructor &&                                                                                      // 1438\n              obj.constructor.isBuffer &&                                                                             // 1439\n              obj.constructor.isBuffer(obj));                                                                         // 1440\n};                                                                                                                    // 1441\n                                                                                                                      // 1442\n},{}]},{},[2])                                                                                                        // 1443\n//# sourceMappingURL=kadira:flow-router/client.browserify.js                                                          // 1444\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                      // 1446\n}).call(this);                                                                                                        // 1447\n                                                                                                                      // 1448\n                                                                                                                      // 1449\n                                                                                                                      // 1450\n                                                                                                                      // 1451\n                                                                                                                      // 1452\n                                                                                                                      // 1453\n(function () {                                                                                                        // 1454\n                                                                                                                      // 1455\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                    //\n// packages/kadira:flow-router/client/triggers.js                                                                     //\n//                                                                                                                    //\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                      //\n// a set of utility functions for triggers                                                                            // 1\n                                                                                                                      // 2\nTriggers = {};                                                                                                        // 3\n                                                                                                                      // 4\n// Apply filters for a set of triggers                                                                                // 5\n// @triggers - a set of triggers                                                                                      // 6\n// @filter - filter with array fileds with `only` and `except`                                                        // 7\n//           support only either `only` or `except`, but not both                                                     // 8\nTriggers.applyFilters = function(triggers, filter) {                                                                  // 9\n  if(!(triggers instanceof Array)) {                                                                                  // 10\n    triggers = [triggers];                                                                                            // 11\n  }                                                                                                                   // 12\n                                                                                                                      // 13\n  if(!filter) {                                                                                                       // 14\n    return triggers;                                                                                                  // 15\n  }                                                                                                                   // 16\n                                                                                                                      // 17\n  if(filter.only && filter.except) {                                                                                  // 18\n    throw new Error(\"Triggers don't support only and except filters at once\");                                        // 19\n  }                                                                                                                   // 20\n                                                                                                                      // 21\n  if(filter.only && !(filter.only instanceof Array)) {                                                                // 22\n    throw new Error(\"only filters needs to be an array\");                                                             // 23\n  }                                                                                                                   // 24\n                                                                                                                      // 25\n  if(filter.except && !(filter.except instanceof Array)) {                                                            // 26\n    throw new Error(\"except filters needs to be an array\");                                                           // 27\n  }                                                                                                                   // 28\n                                                                                                                      // 29\n  if(filter.only) {                                                                                                   // 30\n    return Triggers.createRouteBoundTriggers(triggers, filter.only);                                                  // 31\n  }                                                                                                                   // 32\n                                                                                                                      // 33\n  if(filter.except) {                                                                                                 // 34\n    return Triggers.createRouteBoundTriggers(triggers, filter.except, true);                                          // 35\n  }                                                                                                                   // 36\n                                                                                                                      // 37\n  throw new Error(\"Provided a filter but not supported\");                                                             // 38\n};                                                                                                                    // 39\n                                                                                                                      // 40\n//  create triggers by bounding them to a set of route names                                                          // 41\n//  @triggers - a set of triggers                                                                                     // 42\n//  @names - list of route names to be bound (trigger runs only for these names)                                      // 43\n//  @negate - negate the result (triggers won't run for above names)                                                  // 44\nTriggers.createRouteBoundTriggers = function(triggers, names, negate) {                                               // 45\n  var namesMap = {};                                                                                                  // 46\n  _.each(names, function(name) {                                                                                      // 47\n    namesMap[name] = true;                                                                                            // 48\n  });                                                                                                                 // 49\n                                                                                                                      // 50\n  var filteredTriggers = _.map(triggers, function(originalTrigger) {                                                  // 51\n    var modifiedTrigger = function(context, next) {                                                                   // 52\n      var routeName = context.route.name;                                                                             // 53\n      var matched = (namesMap[routeName])? 1: -1;                                                                     // 54\n      matched = (negate)? matched * -1 : matched;                                                                     // 55\n                                                                                                                      // 56\n      if(matched === 1) {                                                                                             // 57\n        originalTrigger(context, next);                                                                               // 58\n      }                                                                                                               // 59\n    };                                                                                                                // 60\n    return modifiedTrigger;                                                                                           // 61\n  });                                                                                                                 // 62\n                                                                                                                      // 63\n  return filteredTriggers;                                                                                            // 64\n};                                                                                                                    // 65\n                                                                                                                      // 66\n//  run triggers and abort if redirected                                                                              // 67\n//  @triggers - a set of triggers                                                                                     // 68\n//  @context - context we need to pass (it must have the route)                                                       // 69\n//  @redirectFn - function which used to redirect                                                                     // 70\n//  @after - called after if only all the triggers runs                                                               // 71\nTriggers.runTriggers = function(triggers, context, redirectFn, after) {                                               // 72\n  var abort = false;                                                                                                  // 73\n  var inCurrentLoop = true;                                                                                           // 74\n  var alreadyRedirected = false;                                                                                      // 75\n                                                                                                                      // 76\n  for(var lc=0; lc<triggers.length; lc++) {                                                                           // 77\n    var trigger = triggers[lc];                                                                                       // 78\n    trigger(context, doRedirect);                                                                                     // 79\n                                                                                                                      // 80\n    if(abort) {                                                                                                       // 81\n      return;                                                                                                         // 82\n    }                                                                                                                 // 83\n  }                                                                                                                   // 84\n                                                                                                                      // 85\n  // mark that, we've exceeds the currentEventloop for                                                                // 86\n  // this set of triggers.                                                                                            // 87\n  inCurrentLoop = false;                                                                                              // 88\n  after();                                                                                                            // 89\n                                                                                                                      // 90\n  function doRedirect(url, params, queryParams) {                                                                     // 91\n    if(alreadyRedirected) {                                                                                           // 92\n      throw new Error(\"already redirected\");                                                                          // 93\n    }                                                                                                                 // 94\n                                                                                                                      // 95\n    if(!inCurrentLoop) {                                                                                              // 96\n      throw new Error(\"redirect needs to be done in sync\");                                                           // 97\n    }                                                                                                                 // 98\n                                                                                                                      // 99\n    if(!url) {                                                                                                        // 100\n      throw new Error(\"trigger redirect requires an URL\");                                                            // 101\n    }                                                                                                                 // 102\n                                                                                                                      // 103\n    abort = true;                                                                                                     // 104\n    alreadyRedirected = true;                                                                                         // 105\n    redirectFn(url, params, queryParams);                                                                             // 106\n  }                                                                                                                   // 107\n};                                                                                                                    // 108\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                      // 1571\n}).call(this);                                                                                                        // 1572\n                                                                                                                      // 1573\n                                                                                                                      // 1574\n                                                                                                                      // 1575\n                                                                                                                      // 1576\n                                                                                                                      // 1577\n                                                                                                                      // 1578\n(function () {                                                                                                        // 1579\n                                                                                                                      // 1580\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                    //\n// packages/kadira:flow-router/client/router.js                                                                       //\n//                                                                                                                    //\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                      //\nRouter = function () {                                                                                                // 1\n  var self = this;                                                                                                    // 2\n  this.globals = [];                                                                                                  // 3\n  this.subscriptions = Function.prototype;                                                                            // 4\n                                                                                                                      // 5\n  this._tracker = this._buildTracker();                                                                               // 6\n  this._current = {};                                                                                                 // 7\n                                                                                                                      // 8\n  // tracks the current path change                                                                                   // 9\n  this._onEveryPath = new Tracker.Dependency();                                                                       // 10\n                                                                                                                      // 11\n  this._globalRoute = new Route(this);                                                                                // 12\n                                                                                                                      // 13\n  // if _askedToWait is true. We don't automatically start the router                                                 // 14\n  // in Meteor.startup callback. (see client/_init.js)                                                                // 15\n  // Instead user need to call `.initialize()                                                                         // 16\n  this._askedToWait = false;                                                                                          // 17\n  this._initialized = false;                                                                                          // 18\n  this._triggersEnter = [];                                                                                           // 19\n  this._triggersExit = [];                                                                                            // 20\n  this._routes = [];                                                                                                  // 21\n  this._routesMap = {};                                                                                               // 22\n  this._updateCallbacks();                                                                                            // 23\n  this.notFound = this.notfound = null;                                                                               // 24\n  // indicate it's okay (or not okay) to run the tracker                                                              // 25\n  // when doing subscriptions                                                                                         // 26\n  // using a number and increment it help us to support FlowRouter.go()                                               // 27\n  // and legitimate reruns inside tracker on the same event loop.                                                     // 28\n  // this is a solution for #145                                                                                      // 29\n  this.safeToRun = 0;                                                                                                 // 30\n                                                                                                                      // 31\n  this.env = {                                                                                                        // 32\n    replaceState: new Meteor.EnvironmentVariable(),                                                                   // 33\n    reload: new Meteor.EnvironmentVariable(),                                                                         // 34\n    trailingSlash: new Meteor.EnvironmentVariable()                                                                   // 35\n  };                                                                                                                  // 36\n                                                                                                                      // 37\n  // redirect function used inside triggers                                                                           // 38\n  this._redirectFn = function(pathDef, fields, queryParams) {                                                         // 39\n    self.withReplaceState(function() {                                                                                // 40\n      var path = FlowRouter.path(pathDef, fields, queryParams);                                                       // 41\n      self._page.redirect(path);                                                                                      // 42\n    });                                                                                                               // 43\n  };                                                                                                                  // 44\n  this._initTriggersAPI();                                                                                            // 45\n};                                                                                                                    // 46\n                                                                                                                      // 47\nRouter.prototype.route = function(path, options, group) {                                                             // 48\n  if (!/^\\/.*/.test(path)) {                                                                                          // 49\n    var message = \"route's path must start with '/'\";                                                                 // 50\n    throw new Error(message);                                                                                         // 51\n  }                                                                                                                   // 52\n                                                                                                                      // 53\n  options = options || {};                                                                                            // 54\n  var self = this;                                                                                                    // 55\n  var route = new Route(this, path, options, group);                                                                  // 56\n                                                                                                                      // 57\n  // calls when the page route being activates                                                                        // 58\n  route._actionHandle = function (context, next) {                                                                    // 59\n    var oldRoute = self._current.route;                                                                               // 60\n    var queryParams = self._qs.parse(context.querystring);                                                            // 61\n    // _qs.parse() gives us a object without prototypes,                                                              // 62\n    // created with Object.create(null)                                                                               // 63\n    // Meteor's check doesn't play nice with it.                                                                      // 64\n    // So, we need to fix it by cloning it.                                                                           // 65\n    // see more: https://github.com/meteorhacks/flow-router/issues/164                                                // 66\n    queryParams = JSON.parse(JSON.stringify(queryParams));                                                            // 67\n                                                                                                                      // 68\n    self._current = {                                                                                                 // 69\n      path: context.path,                                                                                             // 70\n      context: context,                                                                                               // 71\n      params: context.params,                                                                                         // 72\n      queryParams: queryParams,                                                                                       // 73\n      route: route,                                                                                                   // 74\n      oldRoute: oldRoute                                                                                              // 75\n    };                                                                                                                // 76\n                                                                                                                      // 77\n    // we need to invalidate if all the triggers have been completed                                                  // 78\n    // if not that means, we've been redirected to another path                                                       // 79\n    // then we don't need to invalidate                                                                               // 80\n    var afterAllTriggersRan = function() {                                                                            // 81\n      self._invalidateTracker();                                                                                      // 82\n    };                                                                                                                // 83\n                                                                                                                      // 84\n    var triggers = self._triggersEnter.concat(route._triggersEnter);                                                  // 85\n    Triggers.runTriggers(                                                                                             // 86\n      triggers,                                                                                                       // 87\n      self._current,                                                                                                  // 88\n      self._redirectFn,                                                                                               // 89\n      afterAllTriggersRan                                                                                             // 90\n    );                                                                                                                // 91\n  };                                                                                                                  // 92\n                                                                                                                      // 93\n  // calls when you exit from the page js route                                                                       // 94\n  route._exitHandle = function(context, next) {                                                                       // 95\n    var triggers = self._triggersExit.concat(route._triggersExit);                                                    // 96\n    Triggers.runTriggers(                                                                                             // 97\n      triggers,                                                                                                       // 98\n      self._current,                                                                                                  // 99\n      self._redirectFn,                                                                                               // 100\n      next                                                                                                            // 101\n    );                                                                                                                // 102\n  };                                                                                                                  // 103\n                                                                                                                      // 104\n  this._routes.push(route);                                                                                           // 105\n  if (options.name) {                                                                                                 // 106\n    this._routesMap[options.name] = route;                                                                            // 107\n  }                                                                                                                   // 108\n                                                                                                                      // 109\n  this._updateCallbacks();                                                                                            // 110\n                                                                                                                      // 111\n  return route;                                                                                                       // 112\n};                                                                                                                    // 113\n                                                                                                                      // 114\nRouter.prototype.group = function(options) {                                                                          // 115\n  return new Group(this, options);                                                                                    // 116\n};                                                                                                                    // 117\n                                                                                                                      // 118\nRouter.prototype.path = function(pathDef, fields, queryParams) {                                                      // 119\n  if (this._routesMap[pathDef]) {                                                                                     // 120\n    pathDef = this._routesMap[pathDef].path;                                                                          // 121\n  }                                                                                                                   // 122\n                                                                                                                      // 123\n  fields = fields || {};                                                                                              // 124\n  var regExp = /(:[\\w\\(\\)\\\\\\+\\*\\.\\?]+)+/g;                                                                            // 125\n  var path = pathDef.replace(regExp, function(key) {                                                                  // 126\n    var firstRegexpChar = key.indexOf(\"(\");                                                                           // 127\n    // get the content behind : and (\\\\d+/)                                                                           // 128\n    key = key.substring(1, (firstRegexpChar > 0)? firstRegexpChar: undefined);                                        // 129\n    // remove +?*                                                                                                     // 130\n    key = key.replace(/[\\+\\*\\?]+/g, \"\");                                                                              // 131\n                                                                                                                      // 132\n    // this is to allow page js to keep the custom characters as it is                                                // 133\n    // we need to encode 2 times otherwise \"/\" char does not work properly                                            // 134\n    // So, in that case, when I includes \"/\" it will think it's a part of the                                         // 135\n    // route. encoding 2times fixes it                                                                                // 136\n    return encodeURIComponent(encodeURIComponent(fields[key] || \"\"));                                                 // 137\n  });                                                                                                                 // 138\n                                                                                                                      // 139\n  path = path.replace(/\\/\\/+/g, \"/\"); // Replace multiple slashes with single slash                                   // 140\n                                                                                                                      // 141\n  // remove trailing slash                                                                                            // 142\n  // but keep the root slash if it's the only one                                                                     // 143\n  path = path.match(/^\\/{1}$/) ? path: path.replace(/\\/$/, \"\");                                                       // 144\n                                                                                                                      // 145\n  // explictly asked to add a trailing slash                                                                          // 146\n  if(this.env.trailingSlash.get() && _.last(path) !== \"/\") {                                                          // 147\n    path += \"/\";                                                                                                      // 148\n  }                                                                                                                   // 149\n                                                                                                                      // 150\n  var strQueryParams = this._qs.stringify(queryParams || {});                                                         // 151\n  if(strQueryParams) {                                                                                                // 152\n    path += \"?\" + strQueryParams;                                                                                     // 153\n  }                                                                                                                   // 154\n                                                                                                                      // 155\n  return path;                                                                                                        // 156\n};                                                                                                                    // 157\n                                                                                                                      // 158\nRouter.prototype.go = function(pathDef, fields, queryParams) {                                                        // 159\n  var path = this.path(pathDef, fields, queryParams);                                                                 // 160\n                                                                                                                      // 161\n  var useReplaceState = this.env.replaceState.get();                                                                  // 162\n  if(useReplaceState) {                                                                                               // 163\n    this._page.replace(path);                                                                                         // 164\n  } else {                                                                                                            // 165\n    this._page(path);                                                                                                 // 166\n  }                                                                                                                   // 167\n};                                                                                                                    // 168\n                                                                                                                      // 169\nRouter.prototype.reload = function() {                                                                                // 170\n  var self = this;                                                                                                    // 171\n                                                                                                                      // 172\n  self.env.reload.withValue(true, function() {                                                                        // 173\n    self._page.replace(self._current.path);                                                                           // 174\n  });                                                                                                                 // 175\n};                                                                                                                    // 176\n                                                                                                                      // 177\nRouter.prototype.redirect = function(path) {                                                                          // 178\n  this._page.redirect(path);                                                                                          // 179\n};                                                                                                                    // 180\n                                                                                                                      // 181\nRouter.prototype.setParams = function(newParams) {                                                                    // 182\n  if(!this._current.route) {return false;}                                                                            // 183\n                                                                                                                      // 184\n  var pathDef = this._current.route.path;                                                                             // 185\n  var existingParams = this._current.params;                                                                          // 186\n  var params = {};                                                                                                    // 187\n  _.each(_.keys(existingParams), function(key) {                                                                      // 188\n    params[key] = existingParams[key];                                                                                // 189\n  });                                                                                                                 // 190\n                                                                                                                      // 191\n  params = _.extend(params, newParams);                                                                               // 192\n  var queryParams = this._current.queryParams;                                                                        // 193\n                                                                                                                      // 194\n  this.go(pathDef, params, queryParams);                                                                              // 195\n  return true;                                                                                                        // 196\n};                                                                                                                    // 197\n                                                                                                                      // 198\nRouter.prototype.setQueryParams = function(newParams) {                                                               // 199\n  if(!this._current.route) {return false;}                                                                            // 200\n                                                                                                                      // 201\n  var queryParams = _.clone(this._current.queryParams);                                                               // 202\n  _.extend(queryParams, newParams);                                                                                   // 203\n                                                                                                                      // 204\n  for (var k in queryParams) {                                                                                        // 205\n    if (queryParams[k] === null || queryParams[k] === undefined) {                                                    // 206\n      delete queryParams[k];                                                                                          // 207\n    }                                                                                                                 // 208\n  }                                                                                                                   // 209\n                                                                                                                      // 210\n  var pathDef = this._current.route.path;                                                                             // 211\n  var params = this._current.params;                                                                                  // 212\n  this.go(pathDef, params, queryParams);                                                                              // 213\n  return true;                                                                                                        // 214\n};                                                                                                                    // 215\n                                                                                                                      // 216\n// .current is not reactive                                                                                           // 217\n// This is by design. use .getParam() instead                                                                         // 218\n// If you really need to watch the path change, use .watchPathChange()                                                // 219\nRouter.prototype.current = function() {                                                                               // 220\n  return this._current;                                                                                               // 221\n};                                                                                                                    // 222\n                                                                                                                      // 223\n// Implementing Reactive APIs                                                                                         // 224\nvar reactiveApis = [                                                                                                  // 225\n  'getParam', 'getQueryParam',                                                                                        // 226\n  'getRouteName', 'watchPathChange'                                                                                   // 227\n];                                                                                                                    // 228\nreactiveApis.forEach(function(api) {                                                                                  // 229\n  Router.prototype[api] = function(arg1) {                                                                            // 230\n    // when this is calling, there may not be any route initiated                                                     // 231\n    // so we need to handle it                                                                                        // 232\n    var currentRoute = this._current.route;                                                                           // 233\n    if(!currentRoute) {                                                                                               // 234\n      this._onEveryPath.depend();                                                                                     // 235\n      return;                                                                                                         // 236\n    }                                                                                                                 // 237\n                                                                                                                      // 238\n    // currently, there is only one argument. If we've more let's add more args                                       // 239\n    // this is not clean code, but better in performance                                                              // 240\n    return currentRoute[api].call(currentRoute, arg1);                                                                // 241\n  };                                                                                                                  // 242\n});                                                                                                                   // 243\n                                                                                                                      // 244\nRouter.prototype.subsReady = function() {                                                                             // 245\n  var callback = null;                                                                                                // 246\n  var args = _.toArray(arguments);                                                                                    // 247\n                                                                                                                      // 248\n  if (typeof _.last(args) === \"function\") {                                                                           // 249\n    callback = args.pop();                                                                                            // 250\n  }                                                                                                                   // 251\n                                                                                                                      // 252\n  var currentRoute = this.current().route;                                                                            // 253\n  var globalRoute = this._globalRoute;                                                                                // 254\n                                                                                                                      // 255\n  // we need to depend for every route change and                                                                     // 256\n  // rerun subscriptions to check the ready state                                                                     // 257\n  this._onEveryPath.depend();                                                                                         // 258\n                                                                                                                      // 259\n  if(!currentRoute) {                                                                                                 // 260\n    return false;                                                                                                     // 261\n  }                                                                                                                   // 262\n                                                                                                                      // 263\n  var subscriptions;                                                                                                  // 264\n  if(args.length === 0) {                                                                                             // 265\n    subscriptions = _.values(globalRoute.getAllSubscriptions());                                                      // 266\n    subscriptions = subscriptions.concat(_.values(currentRoute.getAllSubscriptions()));                               // 267\n  } else {                                                                                                            // 268\n    subscriptions = _.map(args, function(subName) {                                                                   // 269\n      return globalRoute.getSubscription(subName) || currentRoute.getSubscription(subName);                           // 270\n    });                                                                                                               // 271\n  }                                                                                                                   // 272\n                                                                                                                      // 273\n  var isReady = function() {                                                                                          // 274\n    var ready =  _.every(subscriptions, function(sub) {                                                               // 275\n      return sub && sub.ready();                                                                                      // 276\n    });                                                                                                               // 277\n                                                                                                                      // 278\n    return ready;                                                                                                     // 279\n  };                                                                                                                  // 280\n                                                                                                                      // 281\n  if (callback) {                                                                                                     // 282\n    Tracker.autorun(function(c) {                                                                                     // 283\n      if (isReady()) {                                                                                                // 284\n        callback();                                                                                                   // 285\n        c.stop();                                                                                                     // 286\n      }                                                                                                               // 287\n    });                                                                                                               // 288\n  } else {                                                                                                            // 289\n    return isReady();                                                                                                 // 290\n  }                                                                                                                   // 291\n};                                                                                                                    // 292\n                                                                                                                      // 293\nRouter.prototype.withReplaceState = function(fn) {                                                                    // 294\n  return this.env.replaceState.withValue(true, fn);                                                                   // 295\n};                                                                                                                    // 296\n                                                                                                                      // 297\nRouter.prototype.withTrailingSlash = function(fn) {                                                                   // 298\n  return this.env.trailingSlash.withValue(true, fn);                                                                  // 299\n};                                                                                                                    // 300\n                                                                                                                      // 301\nRouter.prototype._notfoundRoute = function(context) {                                                                 // 302\n  this._current = {                                                                                                   // 303\n    path: context.path,                                                                                               // 304\n    context: context,                                                                                                 // 305\n    params: [],                                                                                                       // 306\n    queryParams: {},                                                                                                  // 307\n  };                                                                                                                  // 308\n                                                                                                                      // 309\n  // XXX this.notfound kept for backwards compatibility                                                               // 310\n  this.notFound = this.notFound || this.notfound;                                                                     // 311\n  if(!this.notFound) {                                                                                                // 312\n    console.error(\"There is no route for the path:\", context.path);                                                   // 313\n    return;                                                                                                           // 314\n  }                                                                                                                   // 315\n                                                                                                                      // 316\n  this._current.route = new Route(this, \"*\", this.notFound);                                                          // 317\n  this._invalidateTracker();                                                                                          // 318\n};                                                                                                                    // 319\n                                                                                                                      // 320\nRouter.prototype.initialize = function() {                                                                            // 321\n  if(this._initialized) {                                                                                             // 322\n    throw new Error(\"FlowRouter is already initialized\");                                                             // 323\n  }                                                                                                                   // 324\n                                                                                                                      // 325\n  var self = this;                                                                                                    // 326\n  this._updateCallbacks();                                                                                            // 327\n                                                                                                                      // 328\n  // Implementing idempotent routing                                                                                  // 329\n  // by overriding page.js`s \"show\" method.                                                                           // 330\n  // Why?                                                                                                             // 331\n  // It is impossible to bypass exit triggers,                                                                        // 332\n  // becuase they execute before the handler and                                                                      // 333\n  // can not know what the next path is, inside exit trigger.                                                         // 334\n  //                                                                                                                  // 335\n  // we need override both show, replace to make this work                                                            // 336\n  // since we use redirect when we are talking about withReplaceState                                                 // 337\n  _.each(['show', 'replace'], function(fnName) {                                                                      // 338\n    var original = self._page[fnName];                                                                                // 339\n    self._page[fnName] = function(path, state, dispatch, push) {                                                      // 340\n      var reload = self.env.reload.get();                                                                             // 341\n      if (!reload && self._current.path === path) {                                                                   // 342\n        return;                                                                                                       // 343\n      }                                                                                                               // 344\n                                                                                                                      // 345\n      original.call(this, path, state, dispatch, push);                                                               // 346\n    };                                                                                                                // 347\n  });                                                                                                                 // 348\n                                                                                                                      // 349\n  // this is very ugly part of pagejs and it does decoding few times                                                  // 350\n  // in unpredicatable manner. See #168                                                                               // 351\n  // this is the default behaviour and we need keep it like that                                                      // 352\n  // we are doing a hack. see .path()                                                                                 // 353\n  this._page({decodeURLComponents: true});                                                                            // 354\n  this._initialized = true;                                                                                           // 355\n};                                                                                                                    // 356\n                                                                                                                      // 357\nRouter.prototype._buildTracker = function() {                                                                         // 358\n  var self = this;                                                                                                    // 359\n                                                                                                                      // 360\n  // main autorun function                                                                                            // 361\n  var tracker = Tracker.autorun(function () {                                                                         // 362\n    if(!self._current || !self._current.route) {                                                                      // 363\n      return;                                                                                                         // 364\n    }                                                                                                                 // 365\n                                                                                                                      // 366\n    // see the definition of `this._processingContexts`                                                               // 367\n    var currentContext = self._current;                                                                               // 368\n    var route = currentContext.route;                                                                                 // 369\n    var path = currentContext.path;                                                                                   // 370\n                                                                                                                      // 371\n    if(self.safeToRun === 0) {                                                                                        // 372\n      var message =                                                                                                   // 373\n        \"You can't use reactive data sources like Session\" +                                                          // 374\n        \" inside the `.subscriptions` method!\";                                                                       // 375\n      throw new Error(message);                                                                                       // 376\n    }                                                                                                                 // 377\n                                                                                                                      // 378\n    // We need to run subscriptions inside a Tracker                                                                  // 379\n    // to stop subs when switching between routes                                                                     // 380\n    // But we don't need to run this tracker with                                                                     // 381\n    // other reactive changes inside the .subscription method                                                         // 382\n    // We tackle this with the `safeToRun` variable                                                                   // 383\n    self._globalRoute.clearSubscriptions();                                                                           // 384\n    self.subscriptions.call(self._globalRoute, path);                                                                 // 385\n    route.callSubscriptions(currentContext);                                                                          // 386\n                                                                                                                      // 387\n    // otherwise, computations inside action will trigger to re-run                                                   // 388\n    // this computation. which we do not need.                                                                        // 389\n    Tracker.nonreactive(function() {                                                                                  // 390\n      var isRouteChange = currentContext.oldRoute !== currentContext.route;                                           // 391\n      var isFirstRoute = !currentContext.oldRoute;                                                                    // 392\n      // first route is not a route change                                                                            // 393\n      if(isFirstRoute) {                                                                                              // 394\n        isRouteChange = false;                                                                                        // 395\n      }                                                                                                               // 396\n                                                                                                                      // 397\n      currentContext.route.registerRouteChange(currentContext, isRouteChange);                                        // 398\n      route.callAction(currentContext);                                                                               // 399\n                                                                                                                      // 400\n      Tracker.afterFlush(function() {                                                                                 // 401\n        self._onEveryPath.changed();                                                                                  // 402\n        if(isRouteChange) {                                                                                           // 403\n          // We need to trigger that route (definition itself) has changed.                                           // 404\n          // So, we need to re-run all the register callbacks to current route                                        // 405\n          // This is pretty important, otherwise tracker                                                              // 406\n          // can't identify new route's items                                                                         // 407\n                                                                                                                      // 408\n          // We also need to afterFlush, otherwise this will re-run                                                   // 409\n          // helpers on templates which are marked for destroying                                                     // 410\n          currentContext.oldRoute.registerRouteClose();                                                               // 411\n        }                                                                                                             // 412\n      });                                                                                                             // 413\n    });                                                                                                               // 414\n                                                                                                                      // 415\n    self.safeToRun--;                                                                                                 // 416\n  });                                                                                                                 // 417\n                                                                                                                      // 418\n  return tracker;                                                                                                     // 419\n};                                                                                                                    // 420\n                                                                                                                      // 421\nRouter.prototype._invalidateTracker = function() {                                                                    // 422\n  var self = this;                                                                                                    // 423\n  this.safeToRun++;                                                                                                   // 424\n  this._tracker.invalidate();                                                                                         // 425\n  // After the invalidation we need to flush to make changes imediately                                               // 426\n  // otherwise, we have face some issues context mix-maches and so on.                                                // 427\n  // But there are some cases we can't flush. So we need to ready for that.                                           // 428\n                                                                                                                      // 429\n  // we clearly know, we can't flush inside an autorun                                                                // 430\n  // this may leads some issues on flow-routing                                                                       // 431\n  // we may need to do some warning                                                                                   // 432\n  if(!Tracker.currentComputation) {                                                                                   // 433\n    // Still there are some cases where we can't flush                                                                // 434\n    //  eg:- when there is a flush currently                                                                          // 435\n    // But we've no public API or hacks to get that state                                                             // 436\n    // So, this is the only solution                                                                                  // 437\n    try {                                                                                                             // 438\n      Tracker.flush();                                                                                                // 439\n    } catch(ex) {                                                                                                     // 440\n      // only handling \"while flushing\" errors                                                                        // 441\n      if(!/Tracker\\.flush while flushing/.test(ex.message)) {                                                         // 442\n        return;                                                                                                       // 443\n      }                                                                                                               // 444\n                                                                                                                      // 445\n      // XXX: fix this with a proper solution by removing subscription mgt.                                           // 446\n      // from the router. Then we don't need to run invalidate using a tracker                                        // 447\n                                                                                                                      // 448\n      // this happens when we are trying to invoke a route change                                                     // 449\n      // with inside a route chnage. (eg:- Template.onCreated)                                                        // 450\n      // Since we use page.js and tracker, we don't have much control                                                 // 451\n      // over this process.                                                                                           // 452\n      // only solution is to defer route execution.                                                                   // 453\n                                                                                                                      // 454\n      // It's possible to have more than one path want to defer                                                       // 455\n      // But, we only need to pick the last one.                                                                      // 456\n      // self._nextPath = self._current.path;                                                                         // 457\n      Meteor.defer(function() {                                                                                       // 458\n        var path = self._nextPath;                                                                                    // 459\n        if(!path) {                                                                                                   // 460\n          return;                                                                                                     // 461\n        }                                                                                                             // 462\n                                                                                                                      // 463\n        delete self._nextPath;                                                                                        // 464\n        self.env.reload.withValue(true, function() {                                                                  // 465\n          self.go(path);                                                                                              // 466\n        });                                                                                                           // 467\n      });                                                                                                             // 468\n    }                                                                                                                 // 469\n  }                                                                                                                   // 470\n};                                                                                                                    // 471\n                                                                                                                      // 472\nRouter.prototype._updateCallbacks = function () {                                                                     // 473\n  var self = this;                                                                                                    // 474\n                                                                                                                      // 475\n  self._page.callbacks = [];                                                                                          // 476\n  self._page.exits = [];                                                                                              // 477\n                                                                                                                      // 478\n  _.each(self._routes, function(route) {                                                                              // 479\n    self._page(route.path, route._actionHandle);                                                                      // 480\n    self._page.exit(route.path, route._exitHandle);                                                                   // 481\n  });                                                                                                                 // 482\n                                                                                                                      // 483\n  self._page(\"*\", function(context) {                                                                                 // 484\n    self._notfoundRoute(context);                                                                                     // 485\n  });                                                                                                                 // 486\n};                                                                                                                    // 487\n                                                                                                                      // 488\nRouter.prototype._initTriggersAPI = function() {                                                                      // 489\n  var self = this;                                                                                                    // 490\n  this.triggers = {                                                                                                   // 491\n    enter: function(triggers, filter) {                                                                               // 492\n      triggers = Triggers.applyFilters(triggers, filter);                                                             // 493\n      if(triggers.length) {                                                                                           // 494\n        self._triggersEnter = self._triggersEnter.concat(triggers);                                                   // 495\n      }                                                                                                               // 496\n    },                                                                                                                // 497\n                                                                                                                      // 498\n    exit: function(triggers, filter) {                                                                                // 499\n      triggers = Triggers.applyFilters(triggers, filter);                                                             // 500\n      if(triggers.length) {                                                                                           // 501\n        self._triggersExit = self._triggersExit.concat(triggers);                                                     // 502\n      }                                                                                                               // 503\n    }                                                                                                                 // 504\n  };                                                                                                                  // 505\n};                                                                                                                    // 506\n                                                                                                                      // 507\nRouter.prototype.wait = function() {                                                                                  // 508\n  if(this._initialized) {                                                                                             // 509\n    throw new Error(\"can't wait after FlowRouter has been initialized\");                                              // 510\n  }                                                                                                                   // 511\n                                                                                                                      // 512\n  this._askedToWait = true;                                                                                           // 513\n};                                                                                                                    // 514\n                                                                                                                      // 515\nRouter.prototype._page = page;                                                                                        // 516\nRouter.prototype._qs = qs;                                                                                            // 517\n                                                                                                                      // 518\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                      // 2106\n}).call(this);                                                                                                        // 2107\n                                                                                                                      // 2108\n                                                                                                                      // 2109\n                                                                                                                      // 2110\n                                                                                                                      // 2111\n                                                                                                                      // 2112\n                                                                                                                      // 2113\n(function () {                                                                                                        // 2114\n                                                                                                                      // 2115\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                    //\n// packages/kadira:flow-router/client/group.js                                                                        //\n//                                                                                                                    //\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                      //\nGroup = function(router, options, parent) {                                                                           // 1\n  options = options || {};                                                                                            // 2\n                                                                                                                      // 3\n  if (options.prefix && !/^\\/.*/.test(options.prefix)) {                                                              // 4\n    var message = \"group's prefix must start with '/'\";                                                               // 5\n    throw new Error(message);                                                                                         // 6\n  }                                                                                                                   // 7\n                                                                                                                      // 8\n  this._router = router;                                                                                              // 9\n  this.prefix = options.prefix || '';                                                                                 // 10\n                                                                                                                      // 11\n  this._triggersEnter = options.triggersEnter || [];                                                                  // 12\n  this._triggersExit = options.triggersExit || [];                                                                    // 13\n  this._subscriptions = options.subscriptions || Function.prototype;                                                  // 14\n                                                                                                                      // 15\n  this.parent = parent;                                                                                               // 16\n  if (this.parent) {                                                                                                  // 17\n    this.prefix = parent.prefix + this.prefix;                                                                        // 18\n                                                                                                                      // 19\n    this._triggersEnter = parent._triggersEnter.concat(this._triggersEnter);                                          // 20\n    this._triggersExit = this._triggersExit.concat(parent._triggersExit);                                             // 21\n  }                                                                                                                   // 22\n};                                                                                                                    // 23\n                                                                                                                      // 24\nGroup.prototype.route = function(path, options, group) {                                                              // 25\n  options = options || {};                                                                                            // 26\n                                                                                                                      // 27\n  if (!/^\\/.*/.test(path)) {                                                                                          // 28\n    var message = \"route's path must start with '/'\";                                                                 // 29\n    throw new Error(message);                                                                                         // 30\n  }                                                                                                                   // 31\n                                                                                                                      // 32\n  group = group || this;                                                                                              // 33\n  path = this.prefix + path;                                                                                          // 34\n                                                                                                                      // 35\n  var triggersEnter = options.triggersEnter || [];                                                                    // 36\n  options.triggersEnter = this._triggersEnter.concat(triggersEnter);                                                  // 37\n                                                                                                                      // 38\n  var triggersExit = options.triggersExit || [];                                                                      // 39\n  options.triggersExit = triggersExit.concat(this._triggersExit);                                                     // 40\n                                                                                                                      // 41\n  return this._router.route(path, options, group);                                                                    // 42\n};                                                                                                                    // 43\n                                                                                                                      // 44\nGroup.prototype.group = function(options) {                                                                           // 45\n  return new Group(this._router, options, this);                                                                      // 46\n};                                                                                                                    // 47\n                                                                                                                      // 48\nGroup.prototype.callSubscriptions = function(current) {                                                               // 49\n  if (this.parent) {                                                                                                  // 50\n    this.parent.callSubscriptions(current);                                                                           // 51\n  }                                                                                                                   // 52\n                                                                                                                      // 53\n  this._subscriptions.call(current.route, current.params, current.queryParams);                                       // 54\n};                                                                                                                    // 55\n                                                                                                                      // 56\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                      // 2179\n}).call(this);                                                                                                        // 2180\n                                                                                                                      // 2181\n                                                                                                                      // 2182\n                                                                                                                      // 2183\n                                                                                                                      // 2184\n                                                                                                                      // 2185\n                                                                                                                      // 2186\n(function () {                                                                                                        // 2187\n                                                                                                                      // 2188\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                    //\n// packages/kadira:flow-router/client/route.js                                                                        //\n//                                                                                                                    //\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                      //\nRoute = function(router, path, options, group) {                                                                      // 1\n  options = options || {};                                                                                            // 2\n                                                                                                                      // 3\n  this.options = options;                                                                                             // 4\n  this.path = path;                                                                                                   // 5\n  if (options.name) {                                                                                                 // 6\n    this.name = options.name;                                                                                         // 7\n  }                                                                                                                   // 8\n                                                                                                                      // 9\n  this._action = options.action || Function.prototype;                                                                // 10\n  this._subscriptions = options.subscriptions || Function.prototype;                                                  // 11\n  this._triggersEnter = options.triggersEnter || [];                                                                  // 12\n  this._triggersExit = options.triggersExit || [];                                                                    // 13\n  this._subsMap = {};                                                                                                 // 14\n  this._router = router;                                                                                              // 15\n                                                                                                                      // 16\n  this._params = new ReactiveDict();                                                                                  // 17\n  this._queryParams = new ReactiveDict();                                                                             // 18\n  this._routeCloseDep = new Tracker.Dependency();                                                                     // 19\n                                                                                                                      // 20\n  // tracks the changes in the URL                                                                                    // 21\n  this._pathChangeDep = new Tracker.Dependency();                                                                     // 22\n                                                                                                                      // 23\n  this.group = group;                                                                                                 // 24\n};                                                                                                                    // 25\n                                                                                                                      // 26\nRoute.prototype.clearSubscriptions = function() {                                                                     // 27\n  this._subsMap = {};                                                                                                 // 28\n};                                                                                                                    // 29\n                                                                                                                      // 30\nRoute.prototype.register = function(name, sub, options) {                                                             // 31\n  this._subsMap[name] = sub;                                                                                          // 32\n};                                                                                                                    // 33\n                                                                                                                      // 34\n                                                                                                                      // 35\nRoute.prototype.getSubscription = function(name) {                                                                    // 36\n  return this._subsMap[name];                                                                                         // 37\n};                                                                                                                    // 38\n                                                                                                                      // 39\n                                                                                                                      // 40\nRoute.prototype.getAllSubscriptions = function() {                                                                    // 41\n  return this._subsMap;                                                                                               // 42\n};                                                                                                                    // 43\n                                                                                                                      // 44\nRoute.prototype.callAction = function(current) {                                                                      // 45\n  var self = this;                                                                                                    // 46\n  self._action(current.params, current.queryParams);                                                                  // 47\n};                                                                                                                    // 48\n                                                                                                                      // 49\nRoute.prototype.callSubscriptions = function(current) {                                                               // 50\n  this.clearSubscriptions();                                                                                          // 51\n  if (this.group) {                                                                                                   // 52\n    this.group.callSubscriptions(current);                                                                            // 53\n  }                                                                                                                   // 54\n                                                                                                                      // 55\n  this._subscriptions(current.params, current.queryParams);                                                           // 56\n};                                                                                                                    // 57\n                                                                                                                      // 58\nRoute.prototype.getRouteName = function() {                                                                           // 59\n  this._routeCloseDep.depend();                                                                                       // 60\n  return this.name;                                                                                                   // 61\n};                                                                                                                    // 62\n                                                                                                                      // 63\nRoute.prototype.getParam = function(key) {                                                                            // 64\n  this._routeCloseDep.depend();                                                                                       // 65\n  return this._params.get(key);                                                                                       // 66\n};                                                                                                                    // 67\n                                                                                                                      // 68\nRoute.prototype.getQueryParam = function(key) {                                                                       // 69\n  this._routeCloseDep.depend();                                                                                       // 70\n  return this._queryParams.get(key);                                                                                  // 71\n};                                                                                                                    // 72\n                                                                                                                      // 73\nRoute.prototype.watchPathChange = function() {                                                                        // 74\n  this._pathChangeDep.depend();                                                                                       // 75\n};                                                                                                                    // 76\n                                                                                                                      // 77\nRoute.prototype.registerRouteClose = function() {                                                                     // 78\n  this._params = new ReactiveDict();                                                                                  // 79\n  this._queryParams = new ReactiveDict();                                                                             // 80\n  this._routeCloseDep.changed();                                                                                      // 81\n  this._pathChangeDep.changed();                                                                                      // 82\n};                                                                                                                    // 83\n                                                                                                                      // 84\nRoute.prototype.registerRouteChange = function(currentContext, routeChanging) {                                       // 85\n  // register params                                                                                                  // 86\n  var params = currentContext.params;                                                                                 // 87\n  this._updateReactiveDict(this._params, params);                                                                     // 88\n                                                                                                                      // 89\n  // register query params                                                                                            // 90\n  var queryParams = currentContext.queryParams;                                                                       // 91\n  this._updateReactiveDict(this._queryParams, queryParams);                                                           // 92\n                                                                                                                      // 93\n  // if the route is changing, we need to defer triggering path changing                                              // 94\n  // if we did this, old route's path watchers will detect this                                                       // 95\n  // Real issue is, above watcher will get removed with the new route                                                 // 96\n  // So, we don't need to trigger it now                                                                              // 97\n  // We are doing it on the route close event. So, if they exists they'll                                             // 98\n  // get notify that                                                                                                  // 99\n  if(!routeChanging) {                                                                                                // 100\n    this._pathChangeDep.changed();                                                                                    // 101\n  }                                                                                                                   // 102\n};                                                                                                                    // 103\n                                                                                                                      // 104\nRoute.prototype._updateReactiveDict = function(dict, newValues) {                                                     // 105\n  var currentKeys = _.keys(newValues);                                                                                // 106\n  var oldKeys = _.keys(dict.keyDeps);                                                                                 // 107\n                                                                                                                      // 108\n  // set new values                                                                                                   // 109\n  //  params is an array. So, _.each(params) does not works                                                           // 110\n  //  to iterate params                                                                                               // 111\n  _.each(currentKeys, function(key) {                                                                                 // 112\n    dict.set(key, newValues[key]);                                                                                    // 113\n  });                                                                                                                 // 114\n                                                                                                                      // 115\n  // remove keys which does not exisits here                                                                          // 116\n  var removedKeys = _.difference(oldKeys, currentKeys);                                                               // 117\n  _.each(removedKeys, function(key) {                                                                                 // 118\n    dict.set(key, undefined);                                                                                         // 119\n  });                                                                                                                 // 120\n};                                                                                                                    // 121\n                                                                                                                      // 122\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                      // 2318\n}).call(this);                                                                                                        // 2319\n                                                                                                                      // 2320\n                                                                                                                      // 2321\n                                                                                                                      // 2322\n                                                                                                                      // 2323\n                                                                                                                      // 2324\n                                                                                                                      // 2325\n(function () {                                                                                                        // 2326\n                                                                                                                      // 2327\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                    //\n// packages/kadira:flow-router/client/_init.js                                                                        //\n//                                                                                                                    //\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                      //\n// Export Router Instance                                                                                             // 1\nFlowRouter = new Router();                                                                                            // 2\nFlowRouter.Router = Router;                                                                                           // 3\nFlowRouter.Route = Route;                                                                                             // 4\n                                                                                                                      // 5\n// Initialize FlowRouter                                                                                              // 6\nMeteor.startup(function () {                                                                                          // 7\n  if(!FlowRouter._askedToWait) {                                                                                      // 8\n    FlowRouter.initialize();                                                                                          // 9\n  }                                                                                                                   // 10\n});                                                                                                                   // 11\n                                                                                                                      // 12\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                      // 2347\n}).call(this);                                                                                                        // 2348\n                                                                                                                      // 2349\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n/* Exports */\nif (typeof Package === 'undefined') Package = {};\nPackage['kadira:flow-router'] = {\n  FlowRouter: FlowRouter\n};\n\n})();\n","servePath":"/packages/kadira_flow-router.js","sourceMap":{"version":3,"sources":["/packages/kadira_flow-router/packages/kadira_flow-router.js"],"names":[],"mappingsfile":"/packages/kadira_flow-router.js","sourcesContent":["(function () {\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                    //\n// packages/kadira:flow-router/client.browserify.js                                                                   //\n//                                                                                                                    //\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                      //\n(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){\n// shim for using process in browser\n\nvar process = module.exports = {};\nvar queue = [];\nvar draining = false;\nvar currentQueue;\nvar queueIndex = -1;\n\nfunction cleanUpNextTick() {\n    draining = false;\n    if (currentQueue.length) {\n        queue = currentQueue.concat(queue);\n    } else {\n        queueIndex = -1;\n    }\n    if (queue.length) {\n        drainQueue();\n    }\n}\n\nfunction drainQueue() {\n    if (draining) {\n        return;\n    }\n    var timeout = setTimeout(cleanUpNextTick);\n    draining = true;\n\n    var len = queue.length;\n    while(len) {\n        currentQueue = queue;\n        queue = [];\n        while (++queueIndex < len) {\n            currentQueue[queueIndex].run();\n        }\n        queueIndex = -1;\n        len = queue.length;\n    }\n    currentQueue = null;\n    draining = false;\n    clearTimeout(timeout);\n}\n\nprocess.nextTick = function (fun) {\n    var args = new Array(arguments.length - 1);\n    if (arguments.length > 1) {\n        for (var i = 1; i < arguments.length; i++) {\n            args[i - 1] = arguments[i];\n        }\n    }\n    queue.push(new Item(fun, args));\n    if (queue.length === 1 && !draining) {\n        setTimeout(drainQueue, 0);\n    }\n};\n\n// v8 likes predictible objects\nfunction Item(fun, array) {\n    this.fun = fun;\n    this.array = array;\n}\nItem.prototype.run = function () {\n    this.fun.apply(null, this.array);\n};\nprocess.title = 'browser';\nprocess.browser = true;\nprocess.env = {};\nprocess.argv = [];\nprocess.version = ''; // empty string to avoid regexp issues\nprocess.versions = {};\n\nfunction noop() {}\n\nprocess.on = noop;\nprocess.addListener = noop;\nprocess.once = noop;\nprocess.off = noop;\nprocess.removeListener = noop;\nprocess.removeAllListeners = noop;\nprocess.emit = noop;\n\nprocess.binding = function (name) {\n    throw new Error('process.binding is not supported');\n};\n\n// TODO(shtylman)\nprocess.cwd = function () { return '/' };\nprocess.chdir = function (dir) {\n    throw new Error('process.chdir is not supported');\n};\nprocess.umask = function() { return 0; };\n\n},{}],2:[function(require,module,exports){\npage = require('page');\nqs   = require('qs');\n\n},{\"page\":3,\"qs\":6}],3:[function(require,module,exports){\n(function (process){\n  /* globals require, module */\n\n  'use strict';\n\n  /**\n   * Module dependencies.\n   */\n\n  var pathtoRegexp = require('path-to-regexp');\n\n  /**\n   * Module exports.\n   */\n\n  module.exports = page;\n\n  /**\n   * Detect click event\n   */\n  var clickEvent = ('undefined' !== typeof document) && document.ontouchstart ? 'touchstart' : 'click';\n\n  /**\n   * To work properly with the URL\n   * history.location generated polyfill in https://github.com/devote/HTML5-History-API\n   */\n\n  var location = ('undefined' !== typeof window) && (window.history.location || window.location);\n\n  /**\n   * Perform initial dispatch.\n   */\n\n  var dispatch = true;\n\n\n  /**\n   * Decode URL components (query string, pathname, hash).\n   * Accommodates both regular percent encoding and x-www-form-urlencoded format.\n   */\n  var decodeURLComponents = true;\n\n  /**\n   * Base path.\n   */\n\n  var base = '';\n\n  /**\n   * Running flag.\n   */\n\n  var running;\n\n  /**\n   * HashBang option\n   */\n\n  var hashbang = false;\n\n  /**\n   * Previous context, for capturing\n   * page exit events.\n   */\n\n  var prevContext;\n\n  /**\n   * Register `path` with callback `fn()`,\n   * or route `path`, or redirection,\n   * or `page.start()`.\n   *\n   *   page(fn);\n   *   page('*', fn);\n   *   page('/user/:id', load, user);\n   *   page('/user/' + user.id, { some: 'thing' });\n   *   page('/user/' + user.id);\n   *   page('/from', '/to')\n   *   page();\n   *\n   * @param {String|Function} path\n   * @param {Function} fn...\n   * @api public\n   */\n\n  function page(path, fn) {\n    // <callback>\n    if ('function' === typeof path) {\n      return page('*', path);\n    }\n\n    // route <path> to <callback ...>\n    if ('function' === typeof fn) {\n      var route = new Route(path);\n      for (var i = 1; i < arguments.length; ++i) {\n        page.callbacks.push(route.middleware(arguments[i]));\n      }\n      // show <path> with [state]\n    } else if ('string' === typeof path) {\n      page['string' === typeof fn ? 'redirect' : 'show'](path, fn);\n      // start [options]\n    } else {\n      page.start(path);\n    }\n  }\n\n  /**\n   * Callback functions.\n   */\n\n  page.callbacks = [];\n  page.exits = [];\n\n  /**\n   * Current path being processed\n   * @type {String}\n   */\n  page.current = '';\n\n  /**\n   * Number of pages navigated to.\n   * @type {number}\n   *\n   *     page.len == 0;\n   *     page('/login');\n   *     page.len == 1;\n   */\n\n  page.len = 0;\n\n  /**\n   * Get or set basepath to `path`.\n   *\n   * @param {String} path\n   * @api public\n   */\n\n  page.base = function(path) {\n    if (0 === arguments.length) return base;\n    base = path;\n  };\n\n  /**\n   * Bind with the given `options`.\n   *\n   * Options:\n   *\n   *    - `click` bind to click events [true]\n   *    - `popstate` bind to popstate [true]\n   *    - `dispatch` perform initial dispatch [true]\n   *\n   * @param {Object} options\n   * @api public\n   */\n\n  page.start = function(options) {\n    options = options || {};\n    if (running) return;\n    running = true;\n    if (false === options.dispatch) dispatch = false;\n    if (false === options.decodeURLComponents) decodeURLComponents = false;\n    if (false !== options.popstate) window.addEventListener('popstate', onpopstate, false);\n    if (false !== options.click) {\n      document.addEventListener(clickEvent, onclick, false);\n    }\n    if (true === options.hashbang) hashbang = true;\n    if (!dispatch) return;\n    var url = (hashbang && ~location.hash.indexOf('#!')) ? location.hash.substr(2) + location.search : location.pathname + location.search + location.hash;\n    page.replace(url, null, true, dispatch);\n  };\n\n  /**\n   * Unbind click and popstate event handlers.\n   *\n   * @api public\n   */\n\n  page.stop = function() {\n    if (!running) return;\n    page.current = '';\n    page.len = 0;\n    running = false;\n    document.removeEventListener(clickEvent, onclick, false);\n    window.removeEventListener('popstate', onpopstate, false);\n  };\n\n  /**\n   * Show `path` with optional `state` object.\n   *\n   * @param {String} path\n   * @param {Object} state\n   * @param {Boolean} dispatch\n   * @return {Context}\n   * @api public\n   */\n\n  page.show = function(path, state, dispatch, push) {\n    var ctx = new Context(path, state);\n    page.current = ctx.path;\n    if (false !== dispatch) page.dispatch(ctx);\n    if (false !== ctx.handled && false !== push) ctx.pushState();\n    return ctx;\n  };\n\n  /**\n   * Goes back in the history\n   * Back should always let the current route push state and then go back.\n   *\n   * @param {String} path - fallback path to go back if no more history exists, if undefined defaults to page.base\n   * @param {Object} [state]\n   * @api public\n   */\n\n  page.back = function(path, state) {\n    if (page.len > 0) {\n      // this may need more testing to see if all browsers\n      // wait for the next tick to go back in history\n      history.back();\n      page.len--;\n    } else if (path) {\n      setTimeout(function() {\n        page.show(path, state);\n      });\n    }else{\n      setTimeout(function() {\n        page.show(base, state);\n      });\n    }\n  };\n\n\n  /**\n   * Register route to redirect from one path to other\n   * or just redirect to another route\n   *\n   * @param {String} from - if param 'to' is undefined redirects to 'from'\n   * @param {String} [to]\n   * @api public\n   */\n  page.redirect = function(from, to) {\n    // Define route from a path to another\n    if ('string' === typeof from && 'string' === typeof to) {\n      page(from, function(e) {\n        setTimeout(function() {\n          page.replace(to);\n        }, 0);\n      });\n    }\n\n    // Wait for the push state and replace it with another\n    if ('string' === typeof from && 'undefined' === typeof to) {\n      setTimeout(function() {\n        page.replace(from);\n      }, 0);\n    }\n  };\n\n  /**\n   * Replace `path` with optional `state` object.\n   *\n   * @param {String} path\n   * @param {Object} state\n   * @return {Context}\n   * @api public\n   */\n\n\n  page.replace = function(path, state, init, dispatch) {\n    var ctx = new Context(path, state);\n    page.current = ctx.path;\n    ctx.init = init;\n    ctx.save(); // save before dispatching, which may redirect\n    if (false !== dispatch) page.dispatch(ctx);\n    return ctx;\n  };\n\n  /**\n   * Dispatch the given `ctx`.\n   *\n   * @param {Object} ctx\n   * @api private\n   */\n\n  page.dispatch = function(ctx) {\n    var prev = prevContext,\n      i = 0,\n      j = 0;\n\n    prevContext = ctx;\n\n    function nextExit() {\n      var fn = page.exits[j++];\n      if (!fn) return nextEnter();\n      fn(prev, nextExit);\n    }\n\n    function nextEnter() {\n      var fn = page.callbacks[i++];\n\n      if (ctx.path !== page.current) {\n        ctx.handled = false;\n        return;\n      }\n      if (!fn) return unhandled(ctx);\n      fn(ctx, nextEnter);\n    }\n\n    if (prev) {\n      nextExit();\n    } else {\n      nextEnter();\n    }\n  };\n\n  /**\n   * Unhandled `ctx`. When it's not the initial\n   * popstate then redirect. If you wish to handle\n   * 404s on your own use `page('*', callback)`.\n   *\n   * @param {Context} ctx\n   * @api private\n   */\n\n  function unhandled(ctx) {\n    if (ctx.handled) return;\n    var current;\n\n    if (hashbang) {\n      current = base + location.hash.replace('#!', '');\n    } else {\n      current = location.pathname + location.search;\n    }\n\n    if (current === ctx.canonicalPath) return;\n    page.stop();\n    ctx.handled = false;\n    location.href = ctx.canonicalPath;\n  }\n\n  /**\n   * Register an exit route on `path` with\n   * callback `fn()`, which will be called\n   * on the previous context when a new\n   * page is visited.\n   */\n  page.exit = function(path, fn) {\n    if (typeof path === 'function') {\n      return page.exit('*', path);\n    }\n\n    var route = new Route(path);\n    for (var i = 1; i < arguments.length; ++i) {\n      page.exits.push(route.middleware(arguments[i]));\n    }\n  };\n\n  /**\n   * Remove URL encoding from the given `str`.\n   * Accommodates whitespace in both x-www-form-urlencoded\n   * and regular percent-encoded form.\n   *\n   * @param {str} URL component to decode\n   */\n  function decodeURLEncodedURIComponent(val) {\n    if (typeof val !== 'string') { return val; }\n    return decodeURLComponents ? decodeURIComponent(val.replace(/\\+/g, ' ')) : val;\n  }\n\n  /**\n   * Initialize a new \"request\" `Context`\n   * with the given `path` and optional initial `state`.\n   *\n   * @param {String} path\n   * @param {Object} state\n   * @api public\n   */\n\n  function Context(path, state) {\n    if ('/' === path[0] && 0 !== path.indexOf(base)) path = base + (hashbang ? '#!' : '') + path;\n    var i = path.indexOf('?');\n\n    this.canonicalPath = path;\n    this.path = path.replace(base, '') || '/';\n    if (hashbang) this.path = this.path.replace('#!', '') || '/';\n\n    this.title = document.title;\n    this.state = state || {};\n    this.state.path = path;\n    this.querystring = ~i ? decodeURLEncodedURIComponent(path.slice(i + 1)) : '';\n    this.pathname = decodeURLEncodedURIComponent(~i ? path.slice(0, i) : path);\n    this.params = {};\n\n    // fragment\n    this.hash = '';\n    if (!hashbang) {\n      if (!~this.path.indexOf('#')) return;\n      var parts = this.path.split('#');\n      this.path = parts[0];\n      this.hash = decodeURLEncodedURIComponent(parts[1]) || '';\n      this.querystring = this.querystring.split('#')[0];\n    }\n  }\n\n  /**\n   * Expose `Context`.\n   */\n\n  page.Context = Context;\n\n  /**\n   * Push state.\n   *\n   * @api private\n   */\n\n  Context.prototype.pushState = function() {\n    page.len++;\n    history.pushState(this.state, this.title, hashbang && this.path !== '/' ? '#!' + this.path : this.canonicalPath);\n  };\n\n  /**\n   * Save the context state.\n   *\n   * @api public\n   */\n\n  Context.prototype.save = function() {\n    history.replaceState(this.state, this.title, hashbang && this.path !== '/' ? '#!' + this.path : this.canonicalPath);\n  };\n\n  /**\n   * Initialize `Route` with the given HTTP `path`,\n   * and an array of `callbacks` and `options`.\n   *\n   * Options:\n   *\n   *   - `sensitive`    enable case-sensitive routes\n   *   - `strict`       enable strict matching for trailing slashes\n   *\n   * @param {String} path\n   * @param {Object} options.\n   * @api private\n   */\n\n  function Route(path, options) {\n    options = options || {};\n    this.path = (path === '*') ? '(.*)' : path;\n    this.method = 'GET';\n    this.regexp = pathtoRegexp(this.path,\n      this.keys = [],\n      options.sensitive,\n      options.strict);\n  }\n\n  /**\n   * Expose `Route`.\n   */\n\n  page.Route = Route;\n\n  /**\n   * Return route middleware with\n   * the given callback `fn()`.\n   *\n   * @param {Function} fn\n   * @return {Function}\n   * @api public\n   */\n\n  Route.prototype.middleware = function(fn) {\n    var self = this;\n    return function(ctx, next) {\n      if (self.match(ctx.path, ctx.params)) return fn(ctx, next);\n      next();\n    };\n  };\n\n  /**\n   * Check if this route matches `path`, if so\n   * populate `params`.\n   *\n   * @param {String} path\n   * @param {Object} params\n   * @return {Boolean}\n   * @api private\n   */\n\n  Route.prototype.match = function(path, params) {\n    var keys = this.keys,\n      qsIndex = path.indexOf('?'),\n      pathname = ~qsIndex ? path.slice(0, qsIndex) : path,\n      m = this.regexp.exec(decodeURIComponent(pathname));\n\n    if (!m) return false;\n\n    for (var i = 1, len = m.length; i < len; ++i) {\n      var key = keys[i - 1];\n      var val = decodeURLEncodedURIComponent(m[i]);\n      if (val !== undefined || !(hasOwnProperty.call(params, key.name))) {\n        params[key.name] = val;\n      }\n    }\n\n    return true;\n  };\n\n\n  /**\n   * Handle \"populate\" events.\n   */\n\n  var onpopstate = (function () {\n    var loaded = false;\n    if ('undefined' === typeof window) {\n      return;\n    }\n    if (document.readyState === 'complete') {\n      loaded = true;\n    } else {\n      window.addEventListener('load', function() {\n        setTimeout(function() {\n          loaded = true;\n        }, 0);\n      });\n    }\n    return function onpopstate(e) {\n      if (!loaded) return;\n      if (e.state) {\n        var path = e.state.path;\n        page.replace(path, e.state);\n      } else {\n        page.show(location.pathname + location.hash, undefined, undefined, false);\n      }\n    };\n  })();\n  /**\n   * Handle \"click\" events.\n   */\n\n  function onclick(e) {\n\n    if (1 !== which(e)) return;\n\n    if (e.metaKey || e.ctrlKey || e.shiftKey) return;\n    if (e.defaultPrevented) return;\n\n\n\n    // ensure link\n    var el = e.target;\n    while (el && 'A' !== el.nodeName) el = el.parentNode;\n    if (!el || 'A' !== el.nodeName) return;\n\n\n\n    // Ignore if tag has\n    // 1. \"download\" attribute\n    // 2. rel=\"external\" attribute\n    if (el.hasAttribute('download') || el.getAttribute('rel') === 'external') return;\n\n    // ensure non-hash for the same path\n    var link = el.getAttribute('href');\n    if (!hashbang && el.pathname === location.pathname && (el.hash || '#' === link)) return;\n\n\n\n    // Check for mailto: in the href\n    if (link && link.indexOf('mailto:') > -1) return;\n\n    // check target\n    if (el.target) return;\n\n    // x-origin\n    if (!sameOrigin(el.href)) return;\n\n\n\n    // rebuild path\n    var path = el.pathname + el.search + (el.hash || '');\n\n    path = path[0] !== '/' ? '/' + path : path;\n\n    // strip leading \"/[drive letter]:\" on NW.js on Windows\n    if (typeof process !== 'undefined' && path.match(/^\\/[a-zA-Z]:\\//)) {\n      path = path.replace(/^\\/[a-zA-Z]:\\//, '/');\n    }\n\n    // same page\n    var orig = path;\n\n    if (path.indexOf(base) === 0) {\n      path = path.substr(base.length);\n    }\n\n    if (hashbang) path = path.replace('#!', '');\n\n    if (base && orig === path) return;\n\n    e.preventDefault();\n    page.show(orig);\n  }\n\n  /**\n   * Event button.\n   */\n\n  function which(e) {\n    e = e || window.event;\n    return null === e.which ? e.button : e.which;\n  }\n\n  /**\n   * Check if `href` is the same origin.\n   */\n\n  function sameOrigin(href) {\n    var origin = location.protocol + '//' + location.hostname;\n    if (location.port) origin += ':' + location.port;\n    return (href && (0 === href.indexOf(origin)));\n  }\n\n  page.sameOrigin = sameOrigin;\n\n}).call(this,require('_process'))\n\n},{\"_process\":1,\"path-to-regexp\":4}],4:[function(require,module,exports){\nvar isArray = require('isarray');\n\n/**\n * Expose `pathToRegexp`.\n */\nmodule.exports = pathToRegexp;\n\n/**\n * The main path matching regexp utility.\n *\n * @type {RegExp}\n */\nvar PATH_REGEXP = new RegExp([\n  // Match escaped characters that would otherwise appear in future matches.\n  // This allows the user to escape special characters that won't transform.\n  '(\\\\\\\\.)',\n  // Match Express-style parameters and un-named parameters with a prefix\n  // and optional suffixes. Matches appear as:\n  //\n  // \"/:test(\\\\d+)?\" => [\"/\", \"test\", \"\\d+\", undefined, \"?\"]\n  // \"/route(\\\\d+)\" => [undefined, undefined, undefined, \"\\d+\", undefined]\n  '([\\\\/.])?(?:\\\\:(\\\\w+)(?:\\\\(((?:\\\\\\\\.|[^)])*)\\\\))?|\\\\(((?:\\\\\\\\.|[^)])*)\\\\))([+*?])?',\n  // Match regexp special characters that are always escaped.\n  '([.+*?=^!:${}()[\\\\]|\\\\/])'\n].join('|'), 'g');\n\n/**\n * Escape the capturing group by escaping special characters and meaning.\n *\n * @param  {String} group\n * @return {String}\n */\nfunction escapeGroup (group) {\n  return group.replace(/([=!:$\\/()])/g, '\\\\$1');\n}\n\n/**\n * Attach the keys as a property of the regexp.\n *\n * @param  {RegExp} re\n * @param  {Array}  keys\n * @return {RegExp}\n */\nfunction attachKeys (re, keys) {\n  re.keys = keys;\n  return re;\n}\n\n/**\n * Get the flags for a regexp from the options.\n *\n * @param  {Object} options\n * @return {String}\n */\nfunction flags (options) {\n  return options.sensitive ? '' : 'i';\n}\n\n/**\n * Pull out keys from a regexp.\n *\n * @param  {RegExp} path\n * @param  {Array}  keys\n * @return {RegExp}\n */\nfunction regexpToRegexp (path, keys) {\n  // Use a negative lookahead to match only capturing groups.\n  var groups = path.source.match(/\\((?!\\?)/g);\n\n  if (groups) {\n    for (var i = 0; i < groups.length; i++) {\n      keys.push({\n        name:      i,\n        delimiter: null,\n        optional:  false,\n        repeat:    false\n      });\n    }\n  }\n\n  return attachKeys(path, keys);\n}\n\n/**\n * Transform an array into a regexp.\n *\n * @param  {Array}  path\n * @param  {Array}  keys\n * @param  {Object} options\n * @return {RegExp}\n */\nfunction arrayToRegexp (path, keys, options) {\n  var parts = [];\n\n  for (var i = 0; i < path.length; i++) {\n    parts.push(pathToRegexp(path[i], keys, options).source);\n  }\n\n  var regexp = new RegExp('(?:' + parts.join('|') + ')', flags(options));\n  return attachKeys(regexp, keys);\n}\n\n/**\n * Replace the specific tags with regexp strings.\n *\n * @param  {String} path\n * @param  {Array}  keys\n * @return {String}\n */\nfunction replacePath (path, keys) {\n  var index = 0;\n\n  function replace (_, escaped, prefix, key, capture, group, suffix, escape) {\n    if (escaped) {\n      return escaped;\n    }\n\n    if (escape) {\n      return '\\\\' + escape;\n    }\n\n    var repeat   = suffix === '+' || suffix === '*';\n    var optional = suffix === '?' || suffix === '*';\n\n    keys.push({\n      name:      key || index++,\n      delimiter: prefix || '/',\n      optional:  optional,\n      repeat:    repeat\n    });\n\n    prefix = prefix ? ('\\\\' + prefix) : '';\n    capture = escapeGroup(capture || group || '[^' + (prefix || '\\\\/') + ']+?');\n\n    if (repeat) {\n      capture = capture + '(?:' + prefix + capture + ')*';\n    }\n\n    if (optional) {\n      return '(?:' + prefix + '(' + capture + '))?';\n    }\n\n    // Basic parameter support.\n    return prefix + '(' + capture + ')';\n  }\n\n  return path.replace(PATH_REGEXP, replace);\n}\n\n/**\n * Normalize the given path string, returning a regular expression.\n *\n * An empty array can be passed in for the keys, which will hold the\n * placeholder key descriptions. For example, using `/user/:id`, `keys` will\n * contain `[{ name: 'id', delimiter: '/', optional: false, repeat: false }]`.\n *\n * @param  {(String|RegExp|Array)} path\n * @param  {Array}                 [keys]\n * @param  {Object}                [options]\n * @return {RegExp}\n */\nfunction pathToRegexp (path, keys, options) {\n  keys = keys || [];\n\n  if (!isArray(keys)) {\n    options = keys;\n    keys = [];\n  } else if (!options) {\n    options = {};\n  }\n\n  if (path instanceof RegExp) {\n    return regexpToRegexp(path, keys, options);\n  }\n\n  if (isArray(path)) {\n    return arrayToRegexp(path, keys, options);\n  }\n\n  var strict = options.strict;\n  var end = options.end !== false;\n  var route = replacePath(path, keys);\n  var endsWithSlash = path.charAt(path.length - 1) === '/';\n\n  // In non-strict mode we allow a slash at the end of match. If the path to\n  // match already ends with a slash, we remove it for consistency. The slash\n  // is valid at the end of a path match, not in the middle. This is important\n  // in non-ending mode, where \"/test/\" shouldn't match \"/test//route\".\n  if (!strict) {\n    route = (endsWithSlash ? route.slice(0, -2) : route) + '(?:\\\\/(?=$))?';\n  }\n\n  if (end) {\n    route += '$';\n  } else {\n    // In non-ending mode, we need the capturing groups to match as much as\n    // possible by using a positive lookahead to the end or next path segment.\n    route += strict && endsWithSlash ? '' : '(?=\\\\/|$)';\n  }\n\n  return attachKeys(new RegExp('^' + route, flags(options)), keys);\n}\n\n},{\"isarray\":5}],5:[function(require,module,exports){\nmodule.exports = Array.isArray || function (arr) {\n  return Object.prototype.toString.call(arr) == '[object Array]';\n};\n\n},{}],6:[function(require,module,exports){\nmodule.exports = require('./lib/');\n\n},{\"./lib/\":7}],7:[function(require,module,exports){\n// Load modules\n\nvar Stringify = require('./stringify');\nvar Parse = require('./parse');\n\n\n// Declare internals\n\nvar internals = {};\n\n\nmodule.exports = {\n    stringify: Stringify,\n    parse: Parse\n};\n\n},{\"./parse\":8,\"./stringify\":9}],8:[function(require,module,exports){\n// Load modules\n\nvar Utils = require('./utils');\n\n\n// Declare internals\n\nvar internals = {\n    delimiter: '&',\n    depth: 5,\n    arrayLimit: 20,\n    parameterLimit: 1000,\n    strictNullHandling: false\n};\n\n\ninternals.parseValues = function (str, options) {\n\n    var obj = {};\n    var parts = str.split(options.delimiter, options.parameterLimit === Infinity ? undefined : options.parameterLimit);\n\n    for (var i = 0, il = parts.length; i < il; ++i) {\n        var part = parts[i];\n        var pos = part.indexOf(']=') === -1 ? part.indexOf('=') : part.indexOf(']=') + 1;\n\n        if (pos === -1) {\n            obj[Utils.decode(part)] = '';\n\n            if (options.strictNullHandling) {\n                obj[Utils.decode(part)] = null;\n            }\n        }\n        else {\n            var key = Utils.decode(part.slice(0, pos));\n            var val = Utils.decode(part.slice(pos + 1));\n\n            if (!Object.prototype.hasOwnProperty.call(obj, key)) {\n                obj[key] = val;\n            }\n            else {\n                obj[key] = [].concat(obj[key]).concat(val);\n            }\n        }\n    }\n\n    return obj;\n};\n\n\ninternals.parseObject = function (chain, val, options) {\n\n    if (!chain.length) {\n        return val;\n    }\n\n    var root = chain.shift();\n\n    var obj;\n    if (root === '[]') {\n        obj = [];\n        obj = obj.concat(internals.parseObject(chain, val, options));\n    }\n    else {\n        obj = Object.create(null);\n        var cleanRoot = root[0] === '[' && root[root.length - 1] === ']' ? root.slice(1, root.length - 1) : root;\n        var index = parseInt(cleanRoot, 10);\n        var indexString = '' + index;\n        if (!isNaN(index) &&\n            root !== cleanRoot &&\n            indexString === cleanRoot &&\n            index >= 0 &&\n            (options.parseArrays &&\n             index <= options.arrayLimit)) {\n\n            obj = [];\n            obj[index] = internals.parseObject(chain, val, options);\n        }\n        else {\n            obj[cleanRoot] = internals.parseObject(chain, val, options);\n        }\n    }\n\n    return obj;\n};\n\n\ninternals.parseKeys = function (key, val, options) {\n\n    if (!key) {\n        return;\n    }\n\n    // Transform dot notation to bracket notation\n\n    if (options.allowDots) {\n        key = key.replace(/\\.([^\\.\\[]+)/g, '[$1]');\n    }\n\n    // The regex chunks\n\n    var parent = /^([^\\[\\]]*)/;\n    var child = /(\\[[^\\[\\]]*\\])/g;\n\n    // Get the parent\n\n    var segment = parent.exec(key);\n\n    // Stash the parent if it exists\n\n    var keys = [];\n    if (segment[1]) {\n        keys.push(segment[1]);\n    }\n\n    // Loop through children appending to the array until we hit depth\n\n    var i = 0;\n    while ((segment = child.exec(key)) !== null && i < options.depth) {\n\n        ++i;\n        keys.push(segment[1]);\n    }\n\n    // If there's a remainder, just add whatever is left\n\n    if (segment) {\n        keys.push('[' + key.slice(segment.index) + ']');\n    }\n\n    return internals.parseObject(keys, val, options);\n};\n\n\nmodule.exports = function (str, options) {\n\n    if (str === '' ||\n        str === null ||\n        typeof str === 'undefined') {\n\n        return Object.create(null);\n    }\n\n    options = options || {};\n    options.delimiter = typeof options.delimiter === 'string' || Utils.isRegExp(options.delimiter) ? options.delimiter : internals.delimiter;\n    options.depth = typeof options.depth === 'number' ? options.depth : internals.depth;\n    options.arrayLimit = typeof options.arrayLimit === 'number' ? options.arrayLimit : internals.arrayLimit;\n    options.parseArrays = options.parseArrays !== false;\n    options.allowDots = options.allowDots !== false;\n    options.parameterLimit = typeof options.parameterLimit === 'number' ? options.parameterLimit : internals.parameterLimit;\n    options.strictNullHandling = typeof options.strictNullHandling === 'boolean' ? options.strictNullHandling : internals.strictNullHandling;\n\n\n    var tempObj = typeof str === 'string' ? internals.parseValues(str, options) : str;\n    var obj = Object.create(null);\n\n    // Iterate over the keys and setup the new object\n\n    var keys = Object.keys(tempObj);\n    for (var i = 0, il = keys.length; i < il; ++i) {\n        var key = keys[i];\n        var newObj = internals.parseKeys(key, tempObj[key], options);\n        obj = Utils.merge(obj, newObj);\n    }\n\n    return Utils.compact(obj);\n};\n\n},{\"./utils\":10}],9:[function(require,module,exports){\n// Load modules\n\nvar Utils = require('./utils');\n\n\n// Declare internals\n\nvar internals = {\n    delimiter: '&',\n    arrayPrefixGenerators: {\n        brackets: function (prefix, key) {\n\n            return prefix + '[]';\n        },\n        indices: function (prefix, key) {\n\n            return prefix + '[' + key + ']';\n        },\n        repeat: function (prefix, key) {\n\n            return prefix;\n        }\n    },\n    strictNullHandling: false\n};\n\n\ninternals.stringify = function (obj, prefix, generateArrayPrefix, strictNullHandling, filter) {\n\n    if (typeof filter === 'function') {\n        obj = filter(prefix, obj);\n    }\n    else if (Utils.isBuffer(obj)) {\n        obj = obj.toString();\n    }\n    else if (obj instanceof Date) {\n        obj = obj.toISOString();\n    }\n    else if (obj === null) {\n        if (strictNullHandling) {\n            return Utils.encode(prefix);\n        }\n\n        obj = '';\n    }\n\n    if (typeof obj === 'string' ||\n        typeof obj === 'number' ||\n        typeof obj === 'boolean') {\n\n        return [Utils.encode(prefix) + '=' + Utils.encode(obj)];\n    }\n\n    var values = [];\n\n    if (typeof obj === 'undefined') {\n        return values;\n    }\n\n    var objKeys = Array.isArray(filter) ? filter : Object.keys(obj);\n    for (var i = 0, il = objKeys.length; i < il; ++i) {\n        var key = objKeys[i];\n\n        if (Array.isArray(obj)) {\n            values = values.concat(internals.stringify(obj[key], generateArrayPrefix(prefix, key), generateArrayPrefix, strictNullHandling, filter));\n        }\n        else {\n            values = values.concat(internals.stringify(obj[key], prefix + '[' + key + ']', generateArrayPrefix, strictNullHandling, filter));\n        }\n    }\n\n    return values;\n};\n\n\nmodule.exports = function (obj, options) {\n\n    options = options || {};\n    var delimiter = typeof options.delimiter === 'undefined' ? internals.delimiter : options.delimiter;\n    var strictNullHandling = typeof options.strictNullHandling === 'boolean' ? options.strictNullHandling : internals.strictNullHandling;\n    var objKeys;\n    var filter;\n    if (typeof options.filter === 'function') {\n        filter = options.filter;\n        obj = filter('', obj);\n    }\n    else if (Array.isArray(options.filter)) {\n        objKeys = filter = options.filter;\n    }\n\n    var keys = [];\n\n    if (typeof obj !== 'object' ||\n        obj === null) {\n\n        return '';\n    }\n\n    var arrayFormat;\n    if (options.arrayFormat in internals.arrayPrefixGenerators) {\n        arrayFormat = options.arrayFormat;\n    }\n    else if ('indices' in options) {\n        arrayFormat = options.indices ? 'indices' : 'repeat';\n    }\n    else {\n        arrayFormat = 'indices';\n    }\n\n    var generateArrayPrefix = internals.arrayPrefixGenerators[arrayFormat];\n\n    if (!objKeys) {\n        objKeys = Object.keys(obj);\n    }\n    for (var i = 0, il = objKeys.length; i < il; ++i) {\n        var key = objKeys[i];\n        keys = keys.concat(internals.stringify(obj[key], key, generateArrayPrefix, strictNullHandling, filter));\n    }\n\n    return keys.join(delimiter);\n};\n\n},{\"./utils\":10}],10:[function(require,module,exports){\n// Load modules\n\n\n// Declare internals\n\nvar internals = {};\ninternals.hexTable = new Array(256);\nfor (var i = 0; i < 256; ++i) {\n    internals.hexTable[i] = '%' + ((i < 16 ? '0' : '') + i.toString(16)).toUpperCase();\n}\n\n\nexports.arrayToObject = function (source) {\n\n    var obj = Object.create(null);\n    for (var i = 0, il = source.length; i < il; ++i) {\n        if (typeof source[i] !== 'undefined') {\n\n            obj[i] = source[i];\n        }\n    }\n\n    return obj;\n};\n\n\nexports.merge = function (target, source) {\n\n    if (!source) {\n        return target;\n    }\n\n    if (typeof source !== 'object') {\n        if (Array.isArray(target)) {\n            target.push(source);\n        }\n        else if (typeof target === 'object') {\n            target[source] = true;\n        }\n        else {\n            target = [target, source];\n        }\n\n        return target;\n    }\n\n    if (typeof target !== 'object') {\n        target = [target].concat(source);\n        return target;\n    }\n\n    if (Array.isArray(target) &&\n        !Array.isArray(source)) {\n\n        target = exports.arrayToObject(target);\n    }\n\n    var keys = Object.keys(source);\n    for (var k = 0, kl = keys.length; k < kl; ++k) {\n        var key = keys[k];\n        var value = source[key];\n\n        if (!target[key]) {\n            target[key] = value;\n        }\n        else {\n            target[key] = exports.merge(target[key], value);\n        }\n    }\n\n    return target;\n};\n\n\nexports.decode = function (str) {\n\n    try {\n        return decodeURIComponent(str.replace(/\\+/g, ' '));\n    } catch (e) {\n        return str;\n    }\n};\n\nexports.encode = function (str) {\n\n    // This code was originally written by Brian White (mscdex) for the io.js core querystring library.\n    // It has been adapted here for stricter adherence to RFC 3986\n    if (str.length === 0) {\n        return str;\n    }\n\n    if (typeof str !== 'string') {\n        str = '' + str;\n    }\n\n    var out = '';\n    for (var i = 0, il = str.length; i < il; ++i) {\n        var c = str.charCodeAt(i);\n\n        if (c === 0x2D || // -\n            c === 0x2E || // .\n            c === 0x5F || // _\n            c === 0x7E || // ~\n            (c >= 0x30 && c <= 0x39) || // 0-9\n            (c >= 0x41 && c <= 0x5A) || // a-z\n            (c >= 0x61 && c <= 0x7A)) { // A-Z\n\n            out += str[i];\n            continue;\n        }\n\n        if (c < 0x80) {\n            out += internals.hexTable[c];\n            continue;\n        }\n\n        if (c < 0x800) {\n            out += internals.hexTable[0xC0 | (c >> 6)] + internals.hexTable[0x80 | (c & 0x3F)];\n            continue;\n        }\n\n        if (c < 0xD800 || c >= 0xE000) {\n            out += internals.hexTable[0xE0 | (c >> 12)] + internals.hexTable[0x80 | ((c >> 6) & 0x3F)] + internals.hexTable[0x80 | (c & 0x3F)];\n            continue;\n        }\n\n        ++i;\n        c = 0x10000 + (((c & 0x3FF) << 10) | (str.charCodeAt(i) & 0x3FF));\n        out += internals.hexTable[0xF0 | (c >> 18)] + internals.hexTable[0x80 | ((c >> 12) & 0x3F)] + internals.hexTable[0x80 | ((c >> 6) & 0x3F)] + internals.hexTable[0x80 | (c & 0x3F)];\n    }\n\n    return out;\n};\n\nexports.compact = function (obj, refs) {\n\n    if (typeof obj !== 'object' ||\n        obj === null) {\n\n        return obj;\n    }\n\n    refs = refs || [];\n    var lookup = refs.indexOf(obj);\n    if (lookup !== -1) {\n        return refs[lookup];\n    }\n\n    refs.push(obj);\n\n    if (Array.isArray(obj)) {\n        var compacted = [];\n\n        for (var i = 0, il = obj.length; i < il; ++i) {\n            if (typeof obj[i] !== 'undefined') {\n                compacted.push(obj[i]);\n            }\n        }\n\n        return compacted;\n    }\n\n    var keys = Object.keys(obj);\n    for (i = 0, il = keys.length; i < il; ++i) {\n        var key = keys[i];\n        obj[key] = exports.compact(obj[key], refs);\n    }\n\n    return obj;\n};\n\n\nexports.isRegExp = function (obj) {\n\n    return Object.prototype.toString.call(obj) === '[object RegExp]';\n};\n\n\nexports.isBuffer = function (obj) {\n\n    if (obj === null ||\n        typeof obj === 'undefined') {\n\n        return false;\n    }\n\n    return !!(obj.constructor &&\n              obj.constructor.isBuffer &&\n              obj.constructor.isBuffer(obj));\n};\n\n},{}]},{},[2])\n//# sourceMappingURL=kadira:flow-router/client.browserify.js\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n\n\n\n\n(function () {\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                    //\n// packages/kadira:flow-router/client/triggers.js                                                                     //\n//                                                                                                                    //\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                      //\n// a set of utility functions for triggers                                                                            // 1\n                                                                                                                      // 2\nTriggers = {};                                                                                                        // 3\n                                                                                                                      // 4\n// Apply filters for a set of triggers                                                                                // 5\n// @triggers - a set of triggers                                                                                      // 6\n// @filter - filter with array fileds with `only` and `except`                                                        // 7\n//           support only either `only` or `except`, but not both                                                     // 8\nTriggers.applyFilters = function(triggers, filter) {                                                                  // 9\n  if(!(triggers instanceof Array)) {                                                                                  // 10\n    triggers = [triggers];                                                                                            // 11\n  }                                                                                                                   // 12\n                                                                                                                      // 13\n  if(!filter) {                                                                                                       // 14\n    return triggers;                                                                                                  // 15\n  }                                                                                                                   // 16\n                                                                                                                      // 17\n  if(filter.only && filter.except) {                                                                                  // 18\n    throw new Error(\"Triggers don't support only and except filters at once\");                                        // 19\n  }                                                                                                                   // 20\n                                                                                                                      // 21\n  if(filter.only && !(filter.only instanceof Array)) {                                                                // 22\n    throw new Error(\"only filters needs to be an array\");                                                             // 23\n  }                                                                                                                   // 24\n                                                                                                                      // 25\n  if(filter.except && !(filter.except instanceof Array)) {                                                            // 26\n    throw new Error(\"except filters needs to be an array\");                                                           // 27\n  }                                                                                                                   // 28\n                                                                                                                      // 29\n  if(filter.only) {                                                                                                   // 30\n    return Triggers.createRouteBoundTriggers(triggers, filter.only);                                                  // 31\n  }                                                                                                                   // 32\n                                                                                                                      // 33\n  if(filter.except) {                                                                                                 // 34\n    return Triggers.createRouteBoundTriggers(triggers, filter.except, true);                                          // 35\n  }                                                                                                                   // 36\n                                                                                                                      // 37\n  throw new Error(\"Provided a filter but not supported\");                                                             // 38\n};                                                                                                                    // 39\n                                                                                                                      // 40\n//  create triggers by bounding them to a set of route names                                                          // 41\n//  @triggers - a set of triggers                                                                                     // 42\n//  @names - list of route names to be bound (trigger runs only for these names)                                      // 43\n//  @negate - negate the result (triggers won't run for above names)                                                  // 44\nTriggers.createRouteBoundTriggers = function(triggers, names, negate) {                                               // 45\n  var namesMap = {};                                                                                                  // 46\n  _.each(names, function(name) {                                                                                      // 47\n    namesMap[name] = true;                                                                                            // 48\n  });                                                                                                                 // 49\n                                                                                                                      // 50\n  var filteredTriggers = _.map(triggers, function(originalTrigger) {                                                  // 51\n    var modifiedTrigger = function(context, next) {                                                                   // 52\n      var routeName = context.route.name;                                                                             // 53\n      var matched = (namesMap[routeName])? 1: -1;                                                                     // 54\n      matched = (negate)? matched * -1 : matched;                                                                     // 55\n                                                                                                                      // 56\n      if(matched === 1) {                                                                                             // 57\n        originalTrigger(context, next);                                                                               // 58\n      }                                                                                                               // 59\n    };                                                                                                                // 60\n    return modifiedTrigger;                                                                                           // 61\n  });                                                                                                                 // 62\n                                                                                                                      // 63\n  return filteredTriggers;                                                                                            // 64\n};                                                                                                                    // 65\n                                                                                                                      // 66\n//  run triggers and abort if redirected                                                                              // 67\n//  @triggers - a set of triggers                                                                                     // 68\n//  @context - context we need to pass (it must have the route)                                                       // 69\n//  @redirectFn - function which used to redirect                                                                     // 70\n//  @after - called after if only all the triggers runs                                                               // 71\nTriggers.runTriggers = function(triggers, context, redirectFn, after) {                                               // 72\n  var abort = false;                                                                                                  // 73\n  var inCurrentLoop = true;                                                                                           // 74\n  var alreadyRedirected = false;                                                                                      // 75\n                                                                                                                      // 76\n  for(var lc=0; lc<triggers.length; lc++) {                                                                           // 77\n    var trigger = triggers[lc];                                                                                       // 78\n    trigger(context, doRedirect);                                                                                     // 79\n                                                                                                                      // 80\n    if(abort) {                                                                                                       // 81\n      return;                                                                                                         // 82\n    }                                                                                                                 // 83\n  }                                                                                                                   // 84\n                                                                                                                      // 85\n  // mark that, we've exceeds the currentEventloop for                                                                // 86\n  // this set of triggers.                                                                                            // 87\n  inCurrentLoop = false;                                                                                              // 88\n  after();                                                                                                            // 89\n                                                                                                                      // 90\n  function doRedirect(url, params, queryParams) {                                                                     // 91\n    if(alreadyRedirected) {                                                                                           // 92\n      throw new Error(\"already redirected\");                                                                          // 93\n    }                                                                                                                 // 94\n                                                                                                                      // 95\n    if(!inCurrentLoop) {                                                                                              // 96\n      throw new Error(\"redirect needs to be done in sync\");                                                           // 97\n    }                                                                                                                 // 98\n                                                                                                                      // 99\n    if(!url) {                                                                                                        // 100\n      throw new Error(\"trigger redirect requires an URL\");                                                            // 101\n    }                                                                                                                 // 102\n                                                                                                                      // 103\n    abort = true;                                                                                                     // 104\n    alreadyRedirected = true;                                                                                         // 105\n    redirectFn(url, params, queryParams);                                                                             // 106\n  }                                                                                                                   // 107\n};                                                                                                                    // 108\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n\n\n\n\n(function () {\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                    //\n// packages/kadira:flow-router/client/router.js                                                                       //\n//                                                                                                                    //\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                      //\nRouter = function () {                                                                                                // 1\n  var self = this;                                                                                                    // 2\n  this.globals = [];                                                                                                  // 3\n  this.subscriptions = Function.prototype;                                                                            // 4\n                                                                                                                      // 5\n  this._tracker = this._buildTracker();                                                                               // 6\n  this._current = {};                                                                                                 // 7\n                                                                                                                      // 8\n  // tracks the current path change                                                                                   // 9\n  this._onEveryPath = new Tracker.Dependency();                                                                       // 10\n                                                                                                                      // 11\n  this._globalRoute = new Route(this);                                                                                // 12\n                                                                                                                      // 13\n  // if _askedToWait is true. We don't automatically start the router                                                 // 14\n  // in Meteor.startup callback. (see client/_init.js)                                                                // 15\n  // Instead user need to call `.initialize()                                                                         // 16\n  this._askedToWait = false;                                                                                          // 17\n  this._initialized = false;                                                                                          // 18\n  this._triggersEnter = [];                                                                                           // 19\n  this._triggersExit = [];                                                                                            // 20\n  this._routes = [];                                                                                                  // 21\n  this._routesMap = {};                                                                                               // 22\n  this._updateCallbacks();                                                                                            // 23\n  this.notFound = this.notfound = null;                                                                               // 24\n  // indicate it's okay (or not okay) to run the tracker                                                              // 25\n  // when doing subscriptions                                                                                         // 26\n  // using a number and increment it help us to support FlowRouter.go()                                               // 27\n  // and legitimate reruns inside tracker on the same event loop.                                                     // 28\n  // this is a solution for #145                                                                                      // 29\n  this.safeToRun = 0;                                                                                                 // 30\n                                                                                                                      // 31\n  this.env = {                                                                                                        // 32\n    replaceState: new Meteor.EnvironmentVariable(),                                                                   // 33\n    reload: new Meteor.EnvironmentVariable(),                                                                         // 34\n    trailingSlash: new Meteor.EnvironmentVariable()                                                                   // 35\n  };                                                                                                                  // 36\n                                                                                                                      // 37\n  // redirect function used inside triggers                                                                           // 38\n  this._redirectFn = function(pathDef, fields, queryParams) {                                                         // 39\n    self.withReplaceState(function() {                                                                                // 40\n      var path = FlowRouter.path(pathDef, fields, queryParams);                                                       // 41\n      self._page.redirect(path);                                                                                      // 42\n    });                                                                                                               // 43\n  };                                                                                                                  // 44\n  this._initTriggersAPI();                                                                                            // 45\n};                                                                                                                    // 46\n                                                                                                                      // 47\nRouter.prototype.route = function(path, options, group) {                                                             // 48\n  if (!/^\\/.*/.test(path)) {                                                                                          // 49\n    var message = \"route's path must start with '/'\";                                                                 // 50\n    throw new Error(message);                                                                                         // 51\n  }                                                                                                                   // 52\n                                                                                                                      // 53\n  options = options || {};                                                                                            // 54\n  var self = this;                                                                                                    // 55\n  var route = new Route(this, path, options, group);                                                                  // 56\n                                                                                                                      // 57\n  // calls when the page route being activates                                                                        // 58\n  route._actionHandle = function (context, next) {                                                                    // 59\n    var oldRoute = self._current.route;                                                                               // 60\n    var queryParams = self._qs.parse(context.querystring);                                                            // 61\n    // _qs.parse() gives us a object without prototypes,                                                              // 62\n    // created with Object.create(null)                                                                               // 63\n    // Meteor's check doesn't play nice with it.                                                                      // 64\n    // So, we need to fix it by cloning it.                                                                           // 65\n    // see more: https://github.com/meteorhacks/flow-router/issues/164                                                // 66\n    queryParams = JSON.parse(JSON.stringify(queryParams));                                                            // 67\n                                                                                                                      // 68\n    self._current = {                                                                                                 // 69\n      path: context.path,                                                                                             // 70\n      context: context,                                                                                               // 71\n      params: context.params,                                                                                         // 72\n      queryParams: queryParams,                                                                                       // 73\n      route: route,                                                                                                   // 74\n      oldRoute: oldRoute                                                                                              // 75\n    };                                                                                                                // 76\n                                                                                                                      // 77\n    // we need to invalidate if all the triggers have been completed                                                  // 78\n    // if not that means, we've been redirected to another path                                                       // 79\n    // then we don't need to invalidate                                                                               // 80\n    var afterAllTriggersRan = function() {                                                                            // 81\n      self._invalidateTracker();                                                                                      // 82\n    };                                                                                                                // 83\n                                                                                                                      // 84\n    var triggers = self._triggersEnter.concat(route._triggersEnter);                                                  // 85\n    Triggers.runTriggers(                                                                                             // 86\n      triggers,                                                                                                       // 87\n      self._current,                                                                                                  // 88\n      self._redirectFn,                                                                                               // 89\n      afterAllTriggersRan                                                                                             // 90\n    );                                                                                                                // 91\n  };                                                                                                                  // 92\n                                                                                                                      // 93\n  // calls when you exit from the page js route                                                                       // 94\n  route._exitHandle = function(context, next) {                                                                       // 95\n    var triggers = self._triggersExit.concat(route._triggersExit);                                                    // 96\n    Triggers.runTriggers(                                                                                             // 97\n      triggers,                                                                                                       // 98\n      self._current,                                                                                                  // 99\n      self._redirectFn,                                                                                               // 100\n      next                                                                                                            // 101\n    );                                                                                                                // 102\n  };                                                                                                                  // 103\n                                                                                                                      // 104\n  this._routes.push(route);                                                                                           // 105\n  if (options.name) {                                                                                                 // 106\n    this._routesMap[options.name] = route;                                                                            // 107\n  }                                                                                                                   // 108\n                                                                                                                      // 109\n  this._updateCallbacks();                                                                                            // 110\n                                                                                                                      // 111\n  return route;                                                                                                       // 112\n};                                                                                                                    // 113\n                                                                                                                      // 114\nRouter.prototype.group = function(options) {                                                                          // 115\n  return new Group(this, options);                                                                                    // 116\n};                                                                                                                    // 117\n                                                                                                                      // 118\nRouter.prototype.path = function(pathDef, fields, queryParams) {                                                      // 119\n  if (this._routesMap[pathDef]) {                                                                                     // 120\n    pathDef = this._routesMap[pathDef].path;                                                                          // 121\n  }                                                                                                                   // 122\n                                                                                                                      // 123\n  fields = fields || {};                                                                                              // 124\n  var regExp = /(:[\\w\\(\\)\\\\\\+\\*\\.\\?]+)+/g;                                                                            // 125\n  var path = pathDef.replace(regExp, function(key) {                                                                  // 126\n    var firstRegexpChar = key.indexOf(\"(\");                                                                           // 127\n    // get the content behind : and (\\\\d+/)                                                                           // 128\n    key = key.substring(1, (firstRegexpChar > 0)? firstRegexpChar: undefined);                                        // 129\n    // remove +?*                                                                                                     // 130\n    key = key.replace(/[\\+\\*\\?]+/g, \"\");                                                                              // 131\n                                                                                                                      // 132\n    // this is to allow page js to keep the custom characters as it is                                                // 133\n    // we need to encode 2 times otherwise \"/\" char does not work properly                                            // 134\n    // So, in that case, when I includes \"/\" it will think it's a part of the                                         // 135\n    // route. encoding 2times fixes it                                                                                // 136\n    return encodeURIComponent(encodeURIComponent(fields[key] || \"\"));                                                 // 137\n  });                                                                                                                 // 138\n                                                                                                                      // 139\n  path = path.replace(/\\/\\/+/g, \"/\"); // Replace multiple slashes with single slash                                   // 140\n                                                                                                                      // 141\n  // remove trailing slash                                                                                            // 142\n  // but keep the root slash if it's the only one                                                                     // 143\n  path = path.match(/^\\/{1}$/) ? path: path.replace(/\\/$/, \"\");                                                       // 144\n                                                                                                                      // 145\n  // explictly asked to add a trailing slash                                                                          // 146\n  if(this.env.trailingSlash.get() && _.last(path) !== \"/\") {                                                          // 147\n    path += \"/\";                                                                                                      // 148\n  }                                                                                                                   // 149\n                                                                                                                      // 150\n  var strQueryParams = this._qs.stringify(queryParams || {});                                                         // 151\n  if(strQueryParams) {                                                                                                // 152\n    path += \"?\" + strQueryParams;                                                                                     // 153\n  }                                                                                                                   // 154\n                                                                                                                      // 155\n  return path;                                                                                                        // 156\n};                                                                                                                    // 157\n                                                                                                                      // 158\nRouter.prototype.go = function(pathDef, fields, queryParams) {                                                        // 159\n  var path = this.path(pathDef, fields, queryParams);                                                                 // 160\n                                                                                                                      // 161\n  var useReplaceState = this.env.replaceState.get();                                                                  // 162\n  if(useReplaceState) {                                                                                               // 163\n    this._page.replace(path);                                                                                         // 164\n  } else {                                                                                                            // 165\n    this._page(path);                                                                                                 // 166\n  }                                                                                                                   // 167\n};                                                                                                                    // 168\n                                                                                                                      // 169\nRouter.prototype.reload = function() {                                                                                // 170\n  var self = this;                                                                                                    // 171\n                                                                                                                      // 172\n  self.env.reload.withValue(true, function() {                                                                        // 173\n    self._page.replace(self._current.path);                                                                           // 174\n  });                                                                                                                 // 175\n};                                                                                                                    // 176\n                                                                                                                      // 177\nRouter.prototype.redirect = function(path) {                                                                          // 178\n  this._page.redirect(path);                                                                                          // 179\n};                                                                                                                    // 180\n                                                                                                                      // 181\nRouter.prototype.setParams = function(newParams) {                                                                    // 182\n  if(!this._current.route) {return false;}                                                                            // 183\n                                                                                                                      // 184\n  var pathDef = this._current.route.path;                                                                             // 185\n  var existingParams = this._current.params;                                                                          // 186\n  var params = {};                                                                                                    // 187\n  _.each(_.keys(existingParams), function(key) {                                                                      // 188\n    params[key] = existingParams[key];                                                                                // 189\n  });                                                                                                                 // 190\n                                                                                                                      // 191\n  params = _.extend(params, newParams);                                                                               // 192\n  var queryParams = this._current.queryParams;                                                                        // 193\n                                                                                                                      // 194\n  this.go(pathDef, params, queryParams);                                                                              // 195\n  return true;                                                                                                        // 196\n};                                                                                                                    // 197\n                                                                                                                      // 198\nRouter.prototype.setQueryParams = function(newParams) {                                                               // 199\n  if(!this._current.route) {return false;}                                                                            // 200\n                                                                                                                      // 201\n  var queryParams = _.clone(this._current.queryParams);                                                               // 202\n  _.extend(queryParams, newParams);                                                                                   // 203\n                                                                                                                      // 204\n  for (var k in queryParams) {                                                                                        // 205\n    if (queryParams[k] === null || queryParams[k] === undefined) {                                                    // 206\n      delete queryParams[k];                                                                                          // 207\n    }                                                                                                                 // 208\n  }                                                                                                                   // 209\n                                                                                                                      // 210\n  var pathDef = this._current.route.path;                                                                             // 211\n  var params = this._current.params;                                                                                  // 212\n  this.go(pathDef, params, queryParams);                                                                              // 213\n  return true;                                                                                                        // 214\n};                                                                                                                    // 215\n                                                                                                                      // 216\n// .current is not reactive                                                                                           // 217\n// This is by design. use .getParam() instead                                                                         // 218\n// If you really need to watch the path change, use .watchPathChange()                                                // 219\nRouter.prototype.current = function() {                                                                               // 220\n  return this._current;                                                                                               // 221\n};                                                                                                                    // 222\n                                                                                                                      // 223\n// Implementing Reactive APIs                                                                                         // 224\nvar reactiveApis = [                                                                                                  // 225\n  'getParam', 'getQueryParam',                                                                                        // 226\n  'getRouteName', 'watchPathChange'                                                                                   // 227\n];                                                                                                                    // 228\nreactiveApis.forEach(function(api) {                                                                                  // 229\n  Router.prototype[api] = function(arg1) {                                                                            // 230\n    // when this is calling, there may not be any route initiated                                                     // 231\n    // so we need to handle it                                                                                        // 232\n    var currentRoute = this._current.route;                                                                           // 233\n    if(!currentRoute) {                                                                                               // 234\n      this._onEveryPath.depend();                                                                                     // 235\n      return;                                                                                                         // 236\n    }                                                                                                                 // 237\n                                                                                                                      // 238\n    // currently, there is only one argument. If we've more let's add more args                                       // 239\n    // this is not clean code, but better in performance                                                              // 240\n    return currentRoute[api].call(currentRoute, arg1);                                                                // 241\n  };                                                                                                                  // 242\n});                                                                                                                   // 243\n                                                                                                                      // 244\nRouter.prototype.subsReady = function() {                                                                             // 245\n  var callback = null;                                                                                                // 246\n  var args = _.toArray(arguments);                                                                                    // 247\n                                                                                                                      // 248\n  if (typeof _.last(args) === \"function\") {                                                                           // 249\n    callback = args.pop();                                                                                            // 250\n  }                                                                                                                   // 251\n                                                                                                                      // 252\n  var currentRoute = this.current().route;                                                                            // 253\n  var globalRoute = this._globalRoute;                                                                                // 254\n                                                                                                                      // 255\n  // we need to depend for every route change and                                                                     // 256\n  // rerun subscriptions to check the ready state                                                                     // 257\n  this._onEveryPath.depend();                                                                                         // 258\n                                                                                                                      // 259\n  if(!currentRoute) {                                                                                                 // 260\n    return false;                                                                                                     // 261\n  }                                                                                                                   // 262\n                                                                                                                      // 263\n  var subscriptions;                                                                                                  // 264\n  if(args.length === 0) {                                                                                             // 265\n    subscriptions = _.values(globalRoute.getAllSubscriptions());                                                      // 266\n    subscriptions = subscriptions.concat(_.values(currentRoute.getAllSubscriptions()));                               // 267\n  } else {                                                                                                            // 268\n    subscriptions = _.map(args, function(subName) {                                                                   // 269\n      return globalRoute.getSubscription(subName) || currentRoute.getSubscription(subName);                           // 270\n    });                                                                                                               // 271\n  }                                                                                                                   // 272\n                                                                                                                      // 273\n  var isReady = function() {                                                                                          // 274\n    var ready =  _.every(subscriptions, function(sub) {                                                               // 275\n      return sub && sub.ready();                                                                                      // 276\n    });                                                                                                               // 277\n                                                                                                                      // 278\n    return ready;                                                                                                     // 279\n  };                                                                                                                  // 280\n                                                                                                                      // 281\n  if (callback) {                                                                                                     // 282\n    Tracker.autorun(function(c) {                                                                                     // 283\n      if (isReady()) {                                                                                                // 284\n        callback();                                                                                                   // 285\n        c.stop();                                                                                                     // 286\n      }                                                                                                               // 287\n    });                                                                                                               // 288\n  } else {                                                                                                            // 289\n    return isReady();                                                                                                 // 290\n  }                                                                                                                   // 291\n};                                                                                                                    // 292\n                                                                                                                      // 293\nRouter.prototype.withReplaceState = function(fn) {                                                                    // 294\n  return this.env.replaceState.withValue(true, fn);                                                                   // 295\n};                                                                                                                    // 296\n                                                                                                                      // 297\nRouter.prototype.withTrailingSlash = function(fn) {                                                                   // 298\n  return this.env.trailingSlash.withValue(true, fn);                                                                  // 299\n};                                                                                                                    // 300\n                                                                                                                      // 301\nRouter.prototype._notfoundRoute = function(context) {                                                                 // 302\n  this._current = {                                                                                                   // 303\n    path: context.path,                                                                                               // 304\n    context: context,                                                                                                 // 305\n    params: [],                                                                                                       // 306\n    queryParams: {},                                                                                                  // 307\n  };                                                                                                                  // 308\n                                                                                                                      // 309\n  // XXX this.notfound kept for backwards compatibility                                                               // 310\n  this.notFound = this.notFound || this.notfound;                                                                     // 311\n  if(!this.notFound) {                                                                                                // 312\n    console.error(\"There is no route for the path:\", context.path);                                                   // 313\n    return;                                                                                                           // 314\n  }                                                                                                                   // 315\n                                                                                                                      // 316\n  this._current.route = new Route(this, \"*\", this.notFound);                                                          // 317\n  this._invalidateTracker();                                                                                          // 318\n};                                                                                                                    // 319\n                                                                                                                      // 320\nRouter.prototype.initialize = function() {                                                                            // 321\n  if(this._initialized) {                                                                                             // 322\n    throw new Error(\"FlowRouter is already initialized\");                                                             // 323\n  }                                                                                                                   // 324\n                                                                                                                      // 325\n  var self = this;                                                                                                    // 326\n  this._updateCallbacks();                                                                                            // 327\n                                                                                                                      // 328\n  // Implementing idempotent routing                                                                                  // 329\n  // by overriding page.js`s \"show\" method.                                                                           // 330\n  // Why?                                                                                                             // 331\n  // It is impossible to bypass exit triggers,                                                                        // 332\n  // becuase they execute before the handler and                                                                      // 333\n  // can not know what the next path is, inside exit trigger.                                                         // 334\n  //                                                                                                                  // 335\n  // we need override both show, replace to make this work                                                            // 336\n  // since we use redirect when we are talking about withReplaceState                                                 // 337\n  _.each(['show', 'replace'], function(fnName) {                                                                      // 338\n    var original = self._page[fnName];                                                                                // 339\n    self._page[fnName] = function(path, state, dispatch, push) {                                                      // 340\n      var reload = self.env.reload.get();                                                                             // 341\n      if (!reload && self._current.path === path) {                                                                   // 342\n        return;                                                                                                       // 343\n      }                                                                                                               // 344\n                                                                                                                      // 345\n      original.call(this, path, state, dispatch, push);                                                               // 346\n    };                                                                                                                // 347\n  });                                                                                                                 // 348\n                                                                                                                      // 349\n  // this is very ugly part of pagejs and it does decoding few times                                                  // 350\n  // in unpredicatable manner. See #168                                                                               // 351\n  // this is the default behaviour and we need keep it like that                                                      // 352\n  // we are doing a hack. see .path()                                                                                 // 353\n  this._page({decodeURLComponents: true});                                                                            // 354\n  this._initialized = true;                                                                                           // 355\n};                                                                                                                    // 356\n                                                                                                                      // 357\nRouter.prototype._buildTracker = function() {                                                                         // 358\n  var self = this;                                                                                                    // 359\n                                                                                                                      // 360\n  // main autorun function                                                                                            // 361\n  var tracker = Tracker.autorun(function () {                                                                         // 362\n    if(!self._current || !self._current.route) {                                                                      // 363\n      return;                                                                                                         // 364\n    }                                                                                                                 // 365\n                                                                                                                      // 366\n    // see the definition of `this._processingContexts`                                                               // 367\n    var currentContext = self._current;                                                                               // 368\n    var route = currentContext.route;                                                                                 // 369\n    var path = currentContext.path;                                                                                   // 370\n                                                                                                                      // 371\n    if(self.safeToRun === 0) {                                                                                        // 372\n      var message =                                                                                                   // 373\n        \"You can't use reactive data sources like Session\" +                                                          // 374\n        \" inside the `.subscriptions` method!\";                                                                       // 375\n      throw new Error(message);                                                                                       // 376\n    }                                                                                                                 // 377\n                                                                                                                      // 378\n    // We need to run subscriptions inside a Tracker                                                                  // 379\n    // to stop subs when switching between routes                                                                     // 380\n    // But we don't need to run this tracker with                                                                     // 381\n    // other reactive changes inside the .subscription method                                                         // 382\n    // We tackle this with the `safeToRun` variable                                                                   // 383\n    self._globalRoute.clearSubscriptions();                                                                           // 384\n    self.subscriptions.call(self._globalRoute, path);                                                                 // 385\n    route.callSubscriptions(currentContext);                                                                          // 386\n                                                                                                                      // 387\n    // otherwise, computations inside action will trigger to re-run                                                   // 388\n    // this computation. which we do not need.                                                                        // 389\n    Tracker.nonreactive(function() {                                                                                  // 390\n      var isRouteChange = currentContext.oldRoute !== currentContext.route;                                           // 391\n      var isFirstRoute = !currentContext.oldRoute;                                                                    // 392\n      // first route is not a route change                                                                            // 393\n      if(isFirstRoute) {                                                                                              // 394\n        isRouteChange = false;                                                                                        // 395\n      }                                                                                                               // 396\n                                                                                                                      // 397\n      currentContext.route.registerRouteChange(currentContext, isRouteChange);                                        // 398\n      route.callAction(currentContext);                                                                               // 399\n                                                                                                                      // 400\n      Tracker.afterFlush(function() {                                                                                 // 401\n        self._onEveryPath.changed();                                                                                  // 402\n        if(isRouteChange) {                                                                                           // 403\n          // We need to trigger that route (definition itself) has changed.                                           // 404\n          // So, we need to re-run all the register callbacks to current route                                        // 405\n          // This is pretty important, otherwise tracker                                                              // 406\n          // can't identify new route's items                                                                         // 407\n                                                                                                                      // 408\n          // We also need to afterFlush, otherwise this will re-run                                                   // 409\n          // helpers on templates which are marked for destroying                                                     // 410\n          currentContext.oldRoute.registerRouteClose();                                                               // 411\n        }                                                                                                             // 412\n      });                                                                                                             // 413\n    });                                                                                                               // 414\n                                                                                                                      // 415\n    self.safeToRun--;                                                                                                 // 416\n  });                                                                                                                 // 417\n                                                                                                                      // 418\n  return tracker;                                                                                                     // 419\n};                                                                                                                    // 420\n                                                                                                                      // 421\nRouter.prototype._invalidateTracker = function() {                                                                    // 422\n  var self = this;                                                                                                    // 423\n  this.safeToRun++;                                                                                                   // 424\n  this._tracker.invalidate();                                                                                         // 425\n  // After the invalidation we need to flush to make changes imediately                                               // 426\n  // otherwise, we have face some issues context mix-maches and so on.                                                // 427\n  // But there are some cases we can't flush. So we need to ready for that.                                           // 428\n                                                                                                                      // 429\n  // we clearly know, we can't flush inside an autorun                                                                // 430\n  // this may leads some issues on flow-routing                                                                       // 431\n  // we may need to do some warning                                                                                   // 432\n  if(!Tracker.currentComputation) {                                                                                   // 433\n    // Still there are some cases where we can't flush                                                                // 434\n    //  eg:- when there is a flush currently                                                                          // 435\n    // But we've no public API or hacks to get that state                                                             // 436\n    // So, this is the only solution                                                                                  // 437\n    try {                                                                                                             // 438\n      Tracker.flush();                                                                                                // 439\n    } catch(ex) {                                                                                                     // 440\n      // only handling \"while flushing\" errors                                                                        // 441\n      if(!/Tracker\\.flush while flushing/.test(ex.message)) {                                                         // 442\n        return;                                                                                                       // 443\n      }                                                                                                               // 444\n                                                                                                                      // 445\n      // XXX: fix this with a proper solution by removing subscription mgt.                                           // 446\n      // from the router. Then we don't need to run invalidate using a tracker                                        // 447\n                                                                                                                      // 448\n      // this happens when we are trying to invoke a route change                                                     // 449\n      // with inside a route chnage. (eg:- Template.onCreated)                                                        // 450\n      // Since we use page.js and tracker, we don't have much control                                                 // 451\n      // over this process.                                                                                           // 452\n      // only solution is to defer route execution.                                                                   // 453\n                                                                                                                      // 454\n      // It's possible to have more than one path want to defer                                                       // 455\n      // But, we only need to pick the last one.                                                                      // 456\n      // self._nextPath = self._current.path;                                                                         // 457\n      Meteor.defer(function() {                                                                                       // 458\n        var path = self._nextPath;                                                                                    // 459\n        if(!path) {                                                                                                   // 460\n          return;                                                                                                     // 461\n        }                                                                                                             // 462\n                                                                                                                      // 463\n        delete self._nextPath;                                                                                        // 464\n        self.env.reload.withValue(true, function() {                                                                  // 465\n          self.go(path);                                                                                              // 466\n        });                                                                                                           // 467\n      });                                                                                                             // 468\n    }                                                                                                                 // 469\n  }                                                                                                                   // 470\n};                                                                                                                    // 471\n                                                                                                                      // 472\nRouter.prototype._updateCallbacks = function () {                                                                     // 473\n  var self = this;                                                                                                    // 474\n                                                                                                                      // 475\n  self._page.callbacks = [];                                                                                          // 476\n  self._page.exits = [];                                                                                              // 477\n                                                                                                                      // 478\n  _.each(self._routes, function(route) {                                                                              // 479\n    self._page(route.path, route._actionHandle);                                                                      // 480\n    self._page.exit(route.path, route._exitHandle);                                                                   // 481\n  });                                                                                                                 // 482\n                                                                                                                      // 483\n  self._page(\"*\", function(context) {                                                                                 // 484\n    self._notfoundRoute(context);                                                                                     // 485\n  });                                                                                                                 // 486\n};                                                                                                                    // 487\n                                                                                                                      // 488\nRouter.prototype._initTriggersAPI = function() {                                                                      // 489\n  var self = this;                                                                                                    // 490\n  this.triggers = {                                                                                                   // 491\n    enter: function(triggers, filter) {                                                                               // 492\n      triggers = Triggers.applyFilters(triggers, filter);                                                             // 493\n      if(triggers.length) {                                                                                           // 494\n        self._triggersEnter = self._triggersEnter.concat(triggers);                                                   // 495\n      }                                                                                                               // 496\n    },                                                                                                                // 497\n                                                                                                                      // 498\n    exit: function(triggers, filter) {                                                                                // 499\n      triggers = Triggers.applyFilters(triggers, filter);                                                             // 500\n      if(triggers.length) {                                                                                           // 501\n        self._triggersExit = self._triggersExit.concat(triggers);                                                     // 502\n      }                                                                                                               // 503\n    }                                                                                                                 // 504\n  };                                                                                                                  // 505\n};                                                                                                                    // 506\n                                                                                                                      // 507\nRouter.prototype.wait = function() {                                                                                  // 508\n  if(this._initialized) {                                                                                             // 509\n    throw new Error(\"can't wait after FlowRouter has been initialized\");                                              // 510\n  }                                                                                                                   // 511\n                                                                                                                      // 512\n  this._askedToWait = true;                                                                                           // 513\n};                                                                                                                    // 514\n                                                                                                                      // 515\nRouter.prototype._page = page;                                                                                        // 516\nRouter.prototype._qs = qs;                                                                                            // 517\n                                                                                                                      // 518\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n\n\n\n\n(function () {\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                    //\n// packages/kadira:flow-router/client/group.js                                                                        //\n//                                                                                                                    //\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                      //\nGroup = function(router, options, parent) {                                                                           // 1\n  options = options || {};                                                                                            // 2\n                                                                                                                      // 3\n  if (options.prefix && !/^\\/.*/.test(options.prefix)) {                                                              // 4\n    var message = \"group's prefix must start with '/'\";                                                               // 5\n    throw new Error(message);                                                                                         // 6\n  }                                                                                                                   // 7\n                                                                                                                      // 8\n  this._router = router;                                                                                              // 9\n  this.prefix = options.prefix || '';                                                                                 // 10\n                                                                                                                      // 11\n  this._triggersEnter = options.triggersEnter || [];                                                                  // 12\n  this._triggersExit = options.triggersExit || [];                                                                    // 13\n  this._subscriptions = options.subscriptions || Function.prototype;                                                  // 14\n                                                                                                                      // 15\n  this.parent = parent;                                                                                               // 16\n  if (this.parent) {                                                                                                  // 17\n    this.prefix = parent.prefix + this.prefix;                                                                        // 18\n                                                                                                                      // 19\n    this._triggersEnter = parent._triggersEnter.concat(this._triggersEnter);                                          // 20\n    this._triggersExit = this._triggersExit.concat(parent._triggersExit);                                             // 21\n  }                                                                                                                   // 22\n};                                                                                                                    // 23\n                                                                                                                      // 24\nGroup.prototype.route = function(path, options, group) {                                                              // 25\n  options = options || {};                                                                                            // 26\n                                                                                                                      // 27\n  if (!/^\\/.*/.test(path)) {                                                                                          // 28\n    var message = \"route's path must start with '/'\";                                                                 // 29\n    throw new Error(message);                                                                                         // 30\n  }                                                                                                                   // 31\n                                                                                                                      // 32\n  group = group || this;                                                                                              // 33\n  path = this.prefix + path;                                                                                          // 34\n                                                                                                                      // 35\n  var triggersEnter = options.triggersEnter || [];                                                                    // 36\n  options.triggersEnter = this._triggersEnter.concat(triggersEnter);                                                  // 37\n                                                                                                                      // 38\n  var triggersExit = options.triggersExit || [];                                                                      // 39\n  options.triggersExit = triggersExit.concat(this._triggersExit);                                                     // 40\n                                                                                                                      // 41\n  return this._router.route(path, options, group);                                                                    // 42\n};                                                                                                                    // 43\n                                                                                                                      // 44\nGroup.prototype.group = function(options) {                                                                           // 45\n  return new Group(this._router, options, this);                                                                      // 46\n};                                                                                                                    // 47\n                                                                                                                      // 48\nGroup.prototype.callSubscriptions = function(current) {                                                               // 49\n  if (this.parent) {                                                                                                  // 50\n    this.parent.callSubscriptions(current);                                                                           // 51\n  }                                                                                                                   // 52\n                                                                                                                      // 53\n  this._subscriptions.call(current.route, current.params, current.queryParams);                                       // 54\n};                                                                                                                    // 55\n                                                                                                                      // 56\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n\n\n\n\n(function () {\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                    //\n// packages/kadira:flow-router/client/route.js                                                                        //\n//                                                                                                                    //\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                      //\nRoute = function(router, path, options, group) {                                                                      // 1\n  options = options || {};                                                                                            // 2\n                                                                                                                      // 3\n  this.options = options;                                                                                             // 4\n  this.path = path;                                                                                                   // 5\n  if (options.name) {                                                                                                 // 6\n    this.name = options.name;                                                                                         // 7\n  }                                                                                                                   // 8\n                                                                                                                      // 9\n  this._action = options.action || Function.prototype;                                                                // 10\n  this._subscriptions = options.subscriptions || Function.prototype;                                                  // 11\n  this._triggersEnter = options.triggersEnter || [];                                                                  // 12\n  this._triggersExit = options.triggersExit || [];                                                                    // 13\n  this._subsMap = {};                                                                                                 // 14\n  this._router = router;                                                                                              // 15\n                                                                                                                      // 16\n  this._params = new ReactiveDict();                                                                                  // 17\n  this._queryParams = new ReactiveDict();                                                                             // 18\n  this._routeCloseDep = new Tracker.Dependency();                                                                     // 19\n                                                                                                                      // 20\n  // tracks the changes in the URL                                                                                    // 21\n  this._pathChangeDep = new Tracker.Dependency();                                                                     // 22\n                                                                                                                      // 23\n  this.group = group;                                                                                                 // 24\n};                                                                                                                    // 25\n                                                                                                                      // 26\nRoute.prototype.clearSubscriptions = function() {                                                                     // 27\n  this._subsMap = {};                                                                                                 // 28\n};                                                                                                                    // 29\n                                                                                                                      // 30\nRoute.prototype.register = function(name, sub, options) {                                                             // 31\n  this._subsMap[name] = sub;                                                                                          // 32\n};                                                                                                                    // 33\n                                                                                                                      // 34\n                                                                                                                      // 35\nRoute.prototype.getSubscription = function(name) {                                                                    // 36\n  return this._subsMap[name];                                                                                         // 37\n};                                                                                                                    // 38\n                                                                                                                      // 39\n                                                                                                                      // 40\nRoute.prototype.getAllSubscriptions = function() {                                                                    // 41\n  return this._subsMap;                                                                                               // 42\n};                                                                                                                    // 43\n                                                                                                                      // 44\nRoute.prototype.callAction = function(current) {                                                                      // 45\n  var self = this;                                                                                                    // 46\n  self._action(current.params, current.queryParams);                                                                  // 47\n};                                                                                                                    // 48\n                                                                                                                      // 49\nRoute.prototype.callSubscriptions = function(current) {                                                               // 50\n  this.clearSubscriptions();                                                                                          // 51\n  if (this.group) {                                                                                                   // 52\n    this.group.callSubscriptions(current);                                                                            // 53\n  }                                                                                                                   // 54\n                                                                                                                      // 55\n  this._subscriptions(current.params, current.queryParams);                                                           // 56\n};                                                                                                                    // 57\n                                                                                                                      // 58\nRoute.prototype.getRouteName = function() {                                                                           // 59\n  this._routeCloseDep.depend();                                                                                       // 60\n  return this.name;                                                                                                   // 61\n};                                                                                                                    // 62\n                                                                                                                      // 63\nRoute.prototype.getParam = function(key) {                                                                            // 64\n  this._routeCloseDep.depend();                                                                                       // 65\n  return this._params.get(key);                                                                                       // 66\n};                                                                                                                    // 67\n                                                                                                                      // 68\nRoute.prototype.getQueryParam = function(key) {                                                                       // 69\n  this._routeCloseDep.depend();                                                                                       // 70\n  return this._queryParams.get(key);                                                                                  // 71\n};                                                                                                                    // 72\n                                                                                                                      // 73\nRoute.prototype.watchPathChange = function() {                                                                        // 74\n  this._pathChangeDep.depend();                                                                                       // 75\n};                                                                                                                    // 76\n                                                                                                                      // 77\nRoute.prototype.registerRouteClose = function() {                                                                     // 78\n  this._params = new ReactiveDict();                                                                                  // 79\n  this._queryParams = new ReactiveDict();                                                                             // 80\n  this._routeCloseDep.changed();                                                                                      // 81\n  this._pathChangeDep.changed();                                                                                      // 82\n};                                                                                                                    // 83\n                                                                                                                      // 84\nRoute.prototype.registerRouteChange = function(currentContext, routeChanging) {                                       // 85\n  // register params                                                                                                  // 86\n  var params = currentContext.params;                                                                                 // 87\n  this._updateReactiveDict(this._params, params);                                                                     // 88\n                                                                                                                      // 89\n  // register query params                                                                                            // 90\n  var queryParams = currentContext.queryParams;                                                                       // 91\n  this._updateReactiveDict(this._queryParams, queryParams);                                                           // 92\n                                                                                                                      // 93\n  // if the route is changing, we need to defer triggering path changing                                              // 94\n  // if we did this, old route's path watchers will detect this                                                       // 95\n  // Real issue is, above watcher will get removed with the new route                                                 // 96\n  // So, we don't need to trigger it now                                                                              // 97\n  // We are doing it on the route close event. So, if they exists they'll                                             // 98\n  // get notify that                                                                                                  // 99\n  if(!routeChanging) {                                                                                                // 100\n    this._pathChangeDep.changed();                                                                                    // 101\n  }                                                                                                                   // 102\n};                                                                                                                    // 103\n                                                                                                                      // 104\nRoute.prototype._updateReactiveDict = function(dict, newValues) {                                                     // 105\n  var currentKeys = _.keys(newValues);                                                                                // 106\n  var oldKeys = _.keys(dict.keyDeps);                                                                                 // 107\n                                                                                                                      // 108\n  // set new values                                                                                                   // 109\n  //  params is an array. So, _.each(params) does not works                                                           // 110\n  //  to iterate params                                                                                               // 111\n  _.each(currentKeys, function(key) {                                                                                 // 112\n    dict.set(key, newValues[key]);                                                                                    // 113\n  });                                                                                                                 // 114\n                                                                                                                      // 115\n  // remove keys which does not exisits here                                                                          // 116\n  var removedKeys = _.difference(oldKeys, currentKeys);                                                               // 117\n  _.each(removedKeys, function(key) {                                                                                 // 118\n    dict.set(key, undefined);                                                                                         // 119\n  });                                                                                                                 // 120\n};                                                                                                                    // 121\n                                                                                                                      // 122\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n\n\n\n\n(function () {\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                    //\n// packages/kadira:flow-router/client/_init.js                                                                        //\n//                                                                                                                    //\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                      //\n// Export Router Instance                                                                                             // 1\nFlowRouter = new Router();                                                                                            // 2\nFlowRouter.Router = Router;                                                                                           // 3\nFlowRouter.Route = Route;                                                                                             // 4\n                                                                                                                      // 5\n// Initialize FlowRouter                                                                                              // 6\nMeteor.startup(function () {                                                                                          // 7\n  if(!FlowRouter._askedToWait) {                                                                                      // 8\n    FlowRouter.initialize();                                                                                          // 9\n  }                                                                                                                   // 10\n});                                                                                                                   // 11\n                                                                                                                      // 12\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n"]}}]